
TestRFID.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042e8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044e8  080044e8  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  080044e8  080044e8  000144e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044f0  080044f0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f0  080044f0  000144f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044f4  080044f4  000144f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080044f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000224  20000068  08004560  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08004560  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b66f  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f97  00000000  00000000  0002b74a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a50  00000000  00000000  0002d6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007da  00000000  00000000  0002e138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017272  00000000  00000000  0002e912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c55c  00000000  00000000  00045b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000890a3  00000000  00000000  000520e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003110  00000000  00000000  000db184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000de294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004470 	.word	0x08004470

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08004470 	.word	0x08004470

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <rc522_regRead8>:
bool rc522_antiColl(uint8_t* serNum);



uint8_t rc522_regRead8(uint8_t reg)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	4603      	mov	r3, r0
 8000584:	71fb      	strb	r3, [r7, #7]

  reg = ((reg << 1) & 0x7E) | 0x80;
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	b25b      	sxtb	r3, r3
 800058c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000590:	b25b      	sxtb	r3, r3
 8000592:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000596:	b25b      	sxtb	r3, r3
 8000598:	b2db      	uxtb	r3, r3
 800059a:	71fb      	strb	r3, [r7, #7]
  SPI_Transmit_Blocking(&reg,1);
 800059c:	1dfb      	adds	r3, r7, #7
 800059e:	2101      	movs	r1, #1
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fc67 	bl	8000e74 <SPI_Transmit_Blocking>
  uint8_t dataRd=0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	73fb      	strb	r3, [r7, #15]
  SPI_Receive_Blocking(&dataRd, 1);//Espero el dato
 80005aa:	f107 030f 	add.w	r3, r7, #15
 80005ae:	2101      	movs	r1, #1
 80005b0:	4618      	mov	r0, r3
 80005b2:	f000 fc79 	bl	8000ea8 <SPI_Receive_Blocking>
  return dataRd;
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	3710      	adds	r7, #16
 80005bc:	46bd      	mov	sp, r7
 80005be:	bd80      	pop	{r7, pc}

080005c0 <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b084      	sub	sp, #16
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	4603      	mov	r3, r0
 80005c8:	460a      	mov	r2, r1
 80005ca:	71fb      	strb	r3, [r7, #7]
 80005cc:	4613      	mov	r3, r2
 80005ce:	71bb      	strb	r3, [r7, #6]
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	005b      	lsls	r3, r3, #1
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	733b      	strb	r3, [r7, #12]
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	737b      	strb	r3, [r7, #13]
  SPI_Transmit_Blocking(txData,2);
 80005e2:	f107 030c 	add.w	r3, r7, #12
 80005e6:	2102      	movs	r1, #2
 80005e8:	4618      	mov	r0, r3
 80005ea:	f000 fc43 	bl	8000e74 <SPI_Transmit_Blocking>

}
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}

080005f6 <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 80005f6:	b580      	push	{r7, lr}
 80005f8:	b082      	sub	sp, #8
 80005fa:	af00      	add	r7, sp, #0
 80005fc:	4603      	mov	r3, r0
 80005fe:	460a      	mov	r2, r1
 8000600:	71fb      	strb	r3, [r7, #7]
 8000602:	4613      	mov	r3, r2
 8000604:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffb7 	bl	800057c <rc522_regRead8>
 800060e:	4603      	mov	r3, r0
 8000610:	461a      	mov	r2, r3
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	4313      	orrs	r3, r2
 8000616:	b2da      	uxtb	r2, r3
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4611      	mov	r1, r2
 800061c:	4618      	mov	r0, r3
 800061e:	f7ff ffcf 	bl	80005c0 <rc522_regWrite8>
}
 8000622:	bf00      	nop
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	460a      	mov	r2, r1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4613      	mov	r3, r2
 8000638:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	4618      	mov	r0, r3
 800063e:	f7ff ff9d 	bl	800057c <rc522_regRead8>
 8000642:	4603      	mov	r3, r0
 8000644:	b25a      	sxtb	r2, r3
 8000646:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800064a:	43db      	mvns	r3, r3
 800064c:	b25b      	sxtb	r3, r3
 800064e:	4013      	ands	r3, r2
 8000650:	b25b      	sxtb	r3, r3
 8000652:	b2da      	uxtb	r2, r3
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4611      	mov	r1, r2
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffb1 	bl	80005c0 <rc522_regWrite8>
}
 800065e:	bf00      	nop
 8000660:	3708      	adds	r7, #8
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}

08000666 <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	af00      	add	r7, sp, #0
  rc522_regWrite8(0x01, 0x0F);
 800066a:	210f      	movs	r1, #15
 800066c:	2001      	movs	r0, #1
 800066e:	f7ff ffa7 	bl	80005c0 <rc522_regWrite8>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}

08000676 <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	b082      	sub	sp, #8
 800067a:	af00      	add	r7, sp, #0
  uint8_t temp;

  temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 800067c:	2014      	movs	r0, #20
 800067e:	f7ff ff7d 	bl	800057c <rc522_regRead8>
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  if (!(temp & 0x03)) {
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	f003 0303 	and.w	r3, r3, #3
 800068c:	2b00      	cmp	r3, #0
 800068e:	d103      	bne.n	8000698 <rc522_antennaON+0x22>
    rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 8000690:	2103      	movs	r1, #3
 8000692:	2014      	movs	r0, #20
 8000694:	f7ff ffaf 	bl	80005f6 <rc522_setBit>
  }
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  bool status=false;
 80006a8:	2300      	movs	r3, #0
 80006aa:	73fb      	strb	r3, [r7, #15]
  //Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	2026      	movs	r0, #38	; 0x26
 80006b0:	f000 f811 	bl	80006d6 <rc522_request>
 80006b4:	4603      	mov	r3, r0
 80006b6:	73fb      	strb	r3, [r7, #15]
    if (status == true) {
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d004      	beq.n	80006c8 <rc522_checkCard+0x28>
      //Card detected
      //Anti-collision, return card serial number 4 bytes
      status = rc522_antiColl(id);
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 f91e 	bl	8000900 <rc522_antiColl>
 80006c4:	4603      	mov	r3, r0
 80006c6:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt();      //Command card into hibernation
 80006c8:	f000 f957 	bl	800097a <rc522_halt>

    return status;
 80006cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3710      	adds	r7, #16
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b086      	sub	sp, #24
 80006da:	af02      	add	r7, sp, #8
 80006dc:	4603      	mov	r3, r0
 80006de:	6039      	str	r1, [r7, #0]
 80006e0:	71fb      	strb	r3, [r7, #7]
  bool status=false;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 80006e6:	2107      	movs	r1, #7
 80006e8:	200d      	movs	r0, #13
 80006ea:	f7ff ff69 	bl	80005c0 <rc522_regWrite8>
  tagType[0] = reqMode;
 80006ee:	683b      	ldr	r3, [r7, #0]
 80006f0:	79fa      	ldrb	r2, [r7, #7]
 80006f2:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	2201      	movs	r2, #1
 80006fe:	6839      	ldr	r1, [r7, #0]
 8000700:	200c      	movs	r0, #12
 8000702:	f000 f813 	bl	800072c <rc522_toCard>
 8000706:	4603      	mov	r3, r0
 8000708:	73fb      	strb	r3, [r7, #15]
  if ((status != true) || (backBits != 0x10)) {
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	f083 0301 	eor.w	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d102      	bne.n	800071c <rc522_request+0x46>
 8000716:	89bb      	ldrh	r3, [r7, #12]
 8000718:	2b10      	cmp	r3, #16
 800071a:	d001      	beq.n	8000720 <rc522_request+0x4a>
    status = false;
 800071c:	2300      	movs	r3, #0
 800071e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <rc522_toCard>:
    uint8_t command,
    uint8_t* sendData,
    uint8_t sendLen,
    uint8_t* backData,
    uint16_t* backLen)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	73fb      	strb	r3, [r7, #15]
 800073a:	4613      	mov	r3, r2
 800073c:	73bb      	strb	r3, [r7, #14]
  bool status = false;
 800073e:	2300      	movs	r3, #0
 8000740:	77fb      	strb	r3, [r7, #31]
  uint8_t irqEn = 0x00;
 8000742:	2300      	movs	r3, #0
 8000744:	77bb      	strb	r3, [r7, #30]
  uint8_t waitIRq = 0x00;
 8000746:	2300      	movs	r3, #0
 8000748:	777b      	strb	r3, [r7, #29]
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command) {
 800074a:	7bfb      	ldrb	r3, [r7, #15]
 800074c:	2b0c      	cmp	r3, #12
 800074e:	d006      	beq.n	800075e <rc522_toCard+0x32>
 8000750:	2b0e      	cmp	r3, #14
 8000752:	d109      	bne.n	8000768 <rc522_toCard+0x3c>
    case PCD_AUTHENT: {
      irqEn = 0x12;
 8000754:	2312      	movs	r3, #18
 8000756:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x10;
 8000758:	2310      	movs	r3, #16
 800075a:	777b      	strb	r3, [r7, #29]
      break;
 800075c:	e005      	b.n	800076a <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE: {
      irqEn = 0x77;
 800075e:	2377      	movs	r3, #119	; 0x77
 8000760:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x30;
 8000762:	2330      	movs	r3, #48	; 0x30
 8000764:	777b      	strb	r3, [r7, #29]
      break;
 8000766:	e000      	b.n	800076a <rc522_toCard+0x3e>
    }
    default:
      break;
 8000768:	bf00      	nop
  }

  rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 800076a:	7fbb      	ldrb	r3, [r7, #30]
 800076c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000770:	b2db      	uxtb	r3, r3
 8000772:	4619      	mov	r1, r3
 8000774:	2002      	movs	r0, #2
 8000776:	f7ff ff23 	bl	80005c0 <rc522_regWrite8>
  rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 800077a:	2180      	movs	r1, #128	; 0x80
 800077c:	2004      	movs	r0, #4
 800077e:	f7ff ff54 	bl	800062a <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 8000782:	2180      	movs	r1, #128	; 0x80
 8000784:	200a      	movs	r0, #10
 8000786:	f7ff ff36 	bl	80005f6 <rc522_setBit>

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 800078a:	2100      	movs	r1, #0
 800078c:	2001      	movs	r0, #1
 800078e:	f7ff ff17 	bl	80005c0 <rc522_regWrite8>

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
 8000792:	2300      	movs	r3, #0
 8000794:	837b      	strh	r3, [r7, #26]
 8000796:	e00a      	b.n	80007ae <rc522_toCard+0x82>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 8000798:	8b7b      	ldrh	r3, [r7, #26]
 800079a:	68ba      	ldr	r2, [r7, #8]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	4619      	mov	r1, r3
 80007a2:	2009      	movs	r0, #9
 80007a4:	f7ff ff0c 	bl	80005c0 <rc522_regWrite8>
  for (i = 0; i < sendLen; i++) {
 80007a8:	8b7b      	ldrh	r3, [r7, #26]
 80007aa:	3301      	adds	r3, #1
 80007ac:	837b      	strh	r3, [r7, #26]
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	8b7a      	ldrh	r2, [r7, #26]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d3ef      	bcc.n	8000798 <rc522_toCard+0x6c>
  }

  //Execute the command
  rc522_regWrite8(MFRC522_REG_COMMAND, command);
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	4619      	mov	r1, r3
 80007bc:	2001      	movs	r0, #1
 80007be:	f7ff feff 	bl	80005c0 <rc522_regWrite8>
  if (command == PCD_TRANSCEIVE) {
 80007c2:	7bfb      	ldrb	r3, [r7, #15]
 80007c4:	2b0c      	cmp	r3, #12
 80007c6:	d103      	bne.n	80007d0 <rc522_toCard+0xa4>
    rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80);   //StartSend=1,transmission of data starts
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	200d      	movs	r0, #13
 80007cc:	f7ff ff13 	bl	80005f6 <rc522_setBit>
  }

  //Waiting to receive data to complete
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 80007d0:	2364      	movs	r3, #100	; 0x64
 80007d2:	837b      	strh	r3, [r7, #26]
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 80007d4:	2004      	movs	r0, #4
 80007d6:	f7ff fed1 	bl	800057c <rc522_regRead8>
 80007da:	4603      	mov	r3, r0
 80007dc:	773b      	strb	r3, [r7, #28]
    i--;
 80007de:	8b7b      	ldrh	r3, [r7, #26]
 80007e0:	3b01      	subs	r3, #1
 80007e2:	837b      	strh	r3, [r7, #26]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 80007e4:	8b7b      	ldrh	r3, [r7, #26]
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d00a      	beq.n	8000800 <rc522_toCard+0xd4>
 80007ea:	7f3b      	ldrb	r3, [r7, #28]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d105      	bne.n	8000800 <rc522_toCard+0xd4>
 80007f4:	7f3a      	ldrb	r2, [r7, #28]
 80007f6:	7f7b      	ldrb	r3, [r7, #29]
 80007f8:	4013      	ands	r3, r2
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d0e9      	beq.n	80007d4 <rc522_toCard+0xa8>

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 8000800:	2180      	movs	r1, #128	; 0x80
 8000802:	200d      	movs	r0, #13
 8000804:	f7ff ff11 	bl	800062a <rc522_clearBit>

  if (i != 0)  {
 8000808:	8b7b      	ldrh	r3, [r7, #26]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d06d      	beq.n	80008ea <rc522_toCard+0x1be>
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 800080e:	2006      	movs	r0, #6
 8000810:	f7ff feb4 	bl	800057c <rc522_regRead8>
 8000814:	4603      	mov	r3, r0
 8000816:	f003 031b 	and.w	r3, r3, #27
 800081a:	2b00      	cmp	r3, #0
 800081c:	d160      	bne.n	80008e0 <rc522_toCard+0x1b4>
      status = true;
 800081e:	2301      	movs	r3, #1
 8000820:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01) {
 8000822:	7f3a      	ldrb	r2, [r7, #28]
 8000824:	7fbb      	ldrb	r3, [r7, #30]
 8000826:	4013      	ands	r3, r2
 8000828:	b2db      	uxtb	r3, r3
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <rc522_toCard+0x10a>
        status = false;
 8000832:	2300      	movs	r3, #0
 8000834:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE) {
 8000836:	7bfb      	ldrb	r3, [r7, #15]
 8000838:	2b0c      	cmp	r3, #12
 800083a:	d156      	bne.n	80008ea <rc522_toCard+0x1be>
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 800083c:	200a      	movs	r0, #10
 800083e:	f7ff fe9d 	bl	800057c <rc522_regRead8>
 8000842:	4603      	mov	r3, r0
 8000844:	773b      	strb	r3, [r7, #28]
        uint8_t l = n;
 8000846:	7f3b      	ldrb	r3, [r7, #28]
 8000848:	767b      	strb	r3, [r7, #25]
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 800084a:	200c      	movs	r0, #12
 800084c:	f7ff fe96 	bl	800057c <rc522_regRead8>
 8000850:	4603      	mov	r3, r0
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	763b      	strb	r3, [r7, #24]
        if (lastBits) {
 8000858:	7e3b      	ldrb	r3, [r7, #24]
 800085a:	2b00      	cmp	r3, #0
 800085c:	d00b      	beq.n	8000876 <rc522_toCard+0x14a>
          *backLen = (n - 1) * 8 + lastBits;
 800085e:	7f3b      	ldrb	r3, [r7, #28]
 8000860:	3b01      	subs	r3, #1
 8000862:	b29b      	uxth	r3, r3
 8000864:	00db      	lsls	r3, r3, #3
 8000866:	b29a      	uxth	r2, r3
 8000868:	7e3b      	ldrb	r3, [r7, #24]
 800086a:	b29b      	uxth	r3, r3
 800086c:	4413      	add	r3, r2
 800086e:	b29a      	uxth	r2, r3
 8000870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000872:	801a      	strh	r2, [r3, #0]
 8000874:	e005      	b.n	8000882 <rc522_toCard+0x156>
        } else {
          *backLen = n * 8;
 8000876:	7f3b      	ldrb	r3, [r7, #28]
 8000878:	b29b      	uxth	r3, r3
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	b29a      	uxth	r2, r3
 800087e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000880:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0) {
 8000882:	7f3b      	ldrb	r3, [r7, #28]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d101      	bne.n	800088c <rc522_toCard+0x160>
          n = 1;
 8000888:	2301      	movs	r3, #1
 800088a:	773b      	strb	r3, [r7, #28]
        }
        if (n > MFRC522_MAX_LEN) {
 800088c:	7f3b      	ldrb	r3, [r7, #28]
 800088e:	2b10      	cmp	r3, #16
 8000890:	d901      	bls.n	8000896 <rc522_toCard+0x16a>
          n = MFRC522_MAX_LEN;
 8000892:	2310      	movs	r3, #16
 8000894:	773b      	strb	r3, [r7, #28]
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) {
 8000896:	2300      	movs	r3, #0
 8000898:	837b      	strh	r3, [r7, #26]
 800089a:	e014      	b.n	80008c6 <rc522_toCard+0x19a>
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 800089c:	2009      	movs	r0, #9
 800089e:	f7ff fe6d 	bl	800057c <rc522_regRead8>
 80008a2:	4603      	mov	r3, r0
 80008a4:	75fb      	strb	r3, [r7, #23]
          if (l == 4)
 80008a6:	7e7b      	ldrb	r3, [r7, #25]
 80008a8:	2b04      	cmp	r3, #4
 80008aa:	d104      	bne.n	80008b6 <rc522_toCard+0x18a>
            printf("%02x ", d);
 80008ac:	7dfb      	ldrb	r3, [r7, #23]
 80008ae:	4619      	mov	r1, r3
 80008b0:	4810      	ldr	r0, [pc, #64]	; (80008f4 <rc522_toCard+0x1c8>)
 80008b2:	f002 ff0f 	bl	80036d4 <iprintf>
          backData[i] = d;
 80008b6:	8b7b      	ldrh	r3, [r7, #26]
 80008b8:	687a      	ldr	r2, [r7, #4]
 80008ba:	4413      	add	r3, r2
 80008bc:	7dfa      	ldrb	r2, [r7, #23]
 80008be:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++) {
 80008c0:	8b7b      	ldrh	r3, [r7, #26]
 80008c2:	3301      	adds	r3, #1
 80008c4:	837b      	strh	r3, [r7, #26]
 80008c6:	7f3b      	ldrb	r3, [r7, #28]
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	8b7a      	ldrh	r2, [r7, #26]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	d3e5      	bcc.n	800089c <rc522_toCard+0x170>
        }
        if (l==4)
 80008d0:	7e7b      	ldrb	r3, [r7, #25]
 80008d2:	2b04      	cmp	r3, #4
 80008d4:	d102      	bne.n	80008dc <rc522_toCard+0x1b0>
          printf("\r\n");
 80008d6:	4808      	ldr	r0, [pc, #32]	; (80008f8 <rc522_toCard+0x1cc>)
 80008d8:	f002 ff62 	bl	80037a0 <puts>
        return status;
 80008dc:	7ffb      	ldrb	r3, [r7, #31]
 80008de:	e005      	b.n	80008ec <rc522_toCard+0x1c0>
      }
    } else {
      printf("error\r\n");
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <rc522_toCard+0x1d0>)
 80008e2:	f002 ff5d 	bl	80037a0 <puts>
      status = false;
 80008e6:	2300      	movs	r3, #0
 80008e8:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 80008ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3720      	adds	r7, #32
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08004488 	.word	0x08004488
 80008f8:	08004490 	.word	0x08004490
 80008fc:	08004494 	.word	0x08004494

08000900 <rc522_antiColl>:

bool rc522_antiColl(uint8_t* serNum)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b086      	sub	sp, #24
 8000904:	af02      	add	r7, sp, #8
 8000906:	6078      	str	r0, [r7, #4]
  bool status;
  uint8_t i;
  uint8_t serNumCheck = 0;
 8000908:	2300      	movs	r3, #0
 800090a:	737b      	strb	r3, [r7, #13]
  uint16_t unLen;
  //for (i = 0; i < 4; i++)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]
 800090c:	2100      	movs	r1, #0
 800090e:	200d      	movs	r0, #13
 8000910:	f7ff fe56 	bl	80005c0 <rc522_regWrite8>

  serNum[0] = PICC_ANTICOLL;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2293      	movs	r2, #147	; 0x93
 8000918:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3301      	adds	r3, #1
 800091e:	2220      	movs	r2, #32
 8000920:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000922:	f107 030a 	add.w	r3, r7, #10
 8000926:	9300      	str	r3, [sp, #0]
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	2202      	movs	r2, #2
 800092c:	6879      	ldr	r1, [r7, #4]
 800092e:	200c      	movs	r0, #12
 8000930:	f7ff fefc 	bl	800072c <rc522_toCard>
 8000934:	4603      	mov	r3, r0
 8000936:	73fb      	strb	r3, [r7, #15]

  //for (i = 0; i < 4; i++)
//      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

  if (status == true) {
 8000938:	7bfb      	ldrb	r3, [r7, #15]
 800093a:	2b00      	cmp	r3, #0
 800093c:	d018      	beq.n	8000970 <rc522_antiColl+0x70>
    //Check card serial number
    for (i = 0; i < 4; i++) {
 800093e:	2300      	movs	r3, #0
 8000940:	73bb      	strb	r3, [r7, #14]
 8000942:	e009      	b.n	8000958 <rc522_antiColl+0x58>
      serNumCheck ^= serNum[i];
 8000944:	7bbb      	ldrb	r3, [r7, #14]
 8000946:	687a      	ldr	r2, [r7, #4]
 8000948:	4413      	add	r3, r2
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	7b7b      	ldrb	r3, [r7, #13]
 800094e:	4053      	eors	r3, r2
 8000950:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++) {
 8000952:	7bbb      	ldrb	r3, [r7, #14]
 8000954:	3301      	adds	r3, #1
 8000956:	73bb      	strb	r3, [r7, #14]
 8000958:	7bbb      	ldrb	r3, [r7, #14]
 800095a:	2b03      	cmp	r3, #3
 800095c:	d9f2      	bls.n	8000944 <rc522_antiColl+0x44>
    }
    if (serNumCheck != serNum[i]) {
 800095e:	7bbb      	ldrb	r3, [r7, #14]
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	4413      	add	r3, r2
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	7b7a      	ldrb	r2, [r7, #13]
 8000968:	429a      	cmp	r2, r3
 800096a:	d001      	beq.n	8000970 <rc522_antiColl+0x70>
      status = false;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8000970:	7bfb      	ldrb	r3, [r7, #15]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3710      	adds	r7, #16
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <rc522_halt>:

void rc522_halt(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	b084      	sub	sp, #16
 800097e:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 8000980:	2350      	movs	r3, #80	; 0x50
 8000982:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 8000984:	2300      	movs	r3, #0
 8000986:	707b      	strb	r3, [r7, #1]
  rc522_calculateCRC(buff, 2, &buff[2]);
 8000988:	463b      	mov	r3, r7
 800098a:	1c9a      	adds	r2, r3, #2
 800098c:	463b      	mov	r3, r7
 800098e:	2102      	movs	r1, #2
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f80d 	bl	80009b0 <rc522_calculateCRC>

  rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 8000996:	463a      	mov	r2, r7
 8000998:	4639      	mov	r1, r7
 800099a:	1dbb      	adds	r3, r7, #6
 800099c:	9300      	str	r3, [sp, #0]
 800099e:	4613      	mov	r3, r2
 80009a0:	2204      	movs	r2, #4
 80009a2:	200c      	movs	r0, #12
 80009a4:	f7ff fec2 	bl	800072c <rc522_toCard>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
{
 80009b0:	b590      	push	{r4, r7, lr}
 80009b2:	b087      	sub	sp, #28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	60f8      	str	r0, [r7, #12]
 80009b8:	460b      	mov	r3, r1
 80009ba:	607a      	str	r2, [r7, #4]
 80009bc:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 80009be:	2104      	movs	r1, #4
 80009c0:	2005      	movs	r0, #5
 80009c2:	f7ff fe32 	bl	800062a <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 80009c6:	2180      	movs	r1, #128	; 0x80
 80009c8:	200a      	movs	r0, #10
 80009ca:	f7ff fe14 	bl	80005f6 <rc522_setBit>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	75fb      	strb	r3, [r7, #23]
 80009d2:	e00a      	b.n	80009ea <rc522_calculateCRC+0x3a>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	4413      	add	r3, r2
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	4619      	mov	r1, r3
 80009de:	2009      	movs	r0, #9
 80009e0:	f7ff fdee 	bl	80005c0 <rc522_regWrite8>
  for (i = 0; i < len; i++) {
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	3301      	adds	r3, #1
 80009e8:	75fb      	strb	r3, [r7, #23]
 80009ea:	7dfa      	ldrb	r2, [r7, #23]
 80009ec:	7afb      	ldrb	r3, [r7, #11]
 80009ee:	429a      	cmp	r2, r3
 80009f0:	d3f0      	bcc.n	80009d4 <rc522_calculateCRC+0x24>
  }
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 80009f2:	2103      	movs	r1, #3
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fde3 	bl	80005c0 <rc522_regWrite8>

  //Wait CRC calculation is complete
  i = 0xFF;
 80009fa:	23ff      	movs	r3, #255	; 0xff
 80009fc:	75fb      	strb	r3, [r7, #23]
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 80009fe:	2005      	movs	r0, #5
 8000a00:	f7ff fdbc 	bl	800057c <rc522_regRead8>
 8000a04:	4603      	mov	r3, r0
 8000a06:	75bb      	strb	r3, [r7, #22]
    i--;
 8000a08:	7dfb      	ldrb	r3, [r7, #23]
 8000a0a:	3b01      	subs	r3, #1
 8000a0c:	75fb      	strb	r3, [r7, #23]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8000a0e:	7dfb      	ldrb	r3, [r7, #23]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d004      	beq.n	8000a1e <rc522_calculateCRC+0x6e>
 8000a14:	7dbb      	ldrb	r3, [r7, #22]
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0ef      	beq.n	80009fe <rc522_calculateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8000a1e:	2022      	movs	r0, #34	; 0x22
 8000a20:	f7ff fdac 	bl	800057c <rc522_regRead8>
 8000a24:	4603      	mov	r3, r0
 8000a26:	461a      	mov	r2, r3
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	701a      	strb	r2, [r3, #0]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	1c5c      	adds	r4, r3, #1
 8000a30:	2021      	movs	r0, #33	; 0x21
 8000a32:	f7ff fda3 	bl	800057c <rc522_regRead8>
 8000a36:	4603      	mov	r3, r0
 8000a38:	7023      	strb	r3, [r4, #0]
}
 8000a3a:	bf00      	nop
 8000a3c:	371c      	adds	r7, #28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd90      	pop	{r4, r7, pc}
	...

08000a44 <rc522_init>:
  }
  return true;
}

void rc522_init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	 * SPI  -> SPI
	 * PA8  ->RST
	 * PB0  ->CS
	 * */
  //SPI_Init();
  GPIOA->MODER|=GPIO_MODER_MODE8_0;
 8000a4a:	4b27      	ldr	r3, [pc, #156]	; (8000ae8 <rc522_init+0xa4>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a26      	ldr	r2, [pc, #152]	; (8000ae8 <rc522_init+0xa4>)
 8000a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a54:	6013      	str	r3, [r2, #0]
  GPIOA->MODER&=~GPIO_MODER_MODE8_1;
 8000a56:	4b24      	ldr	r3, [pc, #144]	; (8000ae8 <rc522_init+0xa4>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a23      	ldr	r2, [pc, #140]	; (8000ae8 <rc522_init+0xa4>)
 8000a5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000a60:	6013      	str	r3, [r2, #0]

  RCC->AHB1ENR|=RCC_AHB1ENR_GPIOBEN;
 8000a62:	4b22      	ldr	r3, [pc, #136]	; (8000aec <rc522_init+0xa8>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	4a21      	ldr	r2, [pc, #132]	; (8000aec <rc522_init+0xa8>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	6313      	str	r3, [r2, #48]	; 0x30

  //GPIOB->MODER|=GPIO_MODER_MODE0_0;
  //GPIOB->MODER&=~GPIO_MODER_MODE0_1;
  GPIOA->BSRR=GPIO_BSRR_BR8;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <rc522_init+0xa4>)
 8000a70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000a74:	619a      	str	r2, [r3, #24]
  for(volatile int i=0;i<100000;i++);
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	e002      	b.n	8000a82 <rc522_init+0x3e>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	607b      	str	r3, [r7, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	4a1a      	ldr	r2, [pc, #104]	; (8000af0 <rc522_init+0xac>)
 8000a86:	4293      	cmp	r3, r2
 8000a88:	ddf8      	ble.n	8000a7c <rc522_init+0x38>
  GPIOA->BSRR=GPIO_BSRR_BS8;
 8000a8a:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <rc522_init+0xa4>)
 8000a8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a90:	619a      	str	r2, [r3, #24]
  for(volatile int i=0;i<100000;i++);
 8000a92:	2300      	movs	r3, #0
 8000a94:	603b      	str	r3, [r7, #0]
 8000a96:	e002      	b.n	8000a9e <rc522_init+0x5a>
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	603b      	str	r3, [r7, #0]
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <rc522_init+0xac>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	ddf8      	ble.n	8000a98 <rc522_init+0x54>
  rc522_reset();
 8000aa6:	f7ff fdde 	bl	8000666 <rc522_reset>

  rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	202a      	movs	r0, #42	; 0x2a
 8000aae:	f7ff fd87 	bl	80005c0 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8000ab2:	21a9      	movs	r1, #169	; 0xa9
 8000ab4:	202b      	movs	r0, #43	; 0x2b
 8000ab6:	f7ff fd83 	bl	80005c0 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 8000aba:	21e8      	movs	r1, #232	; 0xe8
 8000abc:	202d      	movs	r0, #45	; 0x2d
 8000abe:	f7ff fd7f 	bl	80005c0 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8000ac2:	2103      	movs	r1, #3
 8000ac4:	202c      	movs	r0, #44	; 0x2c
 8000ac6:	f7ff fd7b 	bl	80005c0 <rc522_regWrite8>


  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 8000aca:	2140      	movs	r1, #64	; 0x40
 8000acc:	2015      	movs	r0, #21
 8000ace:	f7ff fd77 	bl	80005c0 <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8000ad2:	213d      	movs	r1, #61	; 0x3d
 8000ad4:	2011      	movs	r0, #17
 8000ad6:	f7ff fd73 	bl	80005c0 <rc522_regWrite8>

  rc522_antennaON();   //Open the antenna
 8000ada:	f7ff fdcc 	bl	8000676 <rc522_antennaON>
}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40020000 	.word	0x40020000
 8000aec:	40023800 	.word	0x40023800
 8000af0:	0001869f 	.word	0x0001869f

08000af4 <main>:
 * @retval int
 */

uint8_t rfid_id[4];

int main(void) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b086      	sub	sp, #24
 8000af8:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000afa:	f000 fbe3 	bl	80012c4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000afe:	f000 f811 	bl	8000b24 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b02:	f000 f8a5 	bl	8000c50 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000b06:	f000 f879 	bl	8000bfc <MX_USART2_UART_Init>
	SPI_Init();
 8000b0a:	f000 f937 	bl	8000d7c <SPI_Init>
	rc522_init();
 8000b0e:	f7ff ff99 	bl	8000a44 <rc522_init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (rc522_checkCard(rfid_id)) {
 8000b12:	4803      	ldr	r0, [pc, #12]	; (8000b20 <main+0x2c>)
 8000b14:	f7ff fdc4 	bl	80006a0 <rc522_checkCard>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	e7f9      	b.n	8000b12 <main+0x1e>
 8000b1e:	bf00      	nop
 8000b20:	200000c8 	.word	0x200000c8

08000b24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b094      	sub	sp, #80	; 0x50
 8000b28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b2a:	f107 0320 	add.w	r3, r7, #32
 8000b2e:	2230      	movs	r2, #48	; 0x30
 8000b30:	2100      	movs	r1, #0
 8000b32:	4618      	mov	r0, r3
 8000b34:	f002 fe3c 	bl	80037b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b38:	f107 030c 	add.w	r3, r7, #12
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b48:	2300      	movs	r3, #0
 8000b4a:	60bb      	str	r3, [r7, #8]
 8000b4c:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <SystemClock_Config+0xd0>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b50:	4a28      	ldr	r2, [pc, #160]	; (8000bf4 <SystemClock_Config+0xd0>)
 8000b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b56:	6413      	str	r3, [r2, #64]	; 0x40
 8000b58:	4b26      	ldr	r3, [pc, #152]	; (8000bf4 <SystemClock_Config+0xd0>)
 8000b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b60:	60bb      	str	r3, [r7, #8]
 8000b62:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b23      	ldr	r3, [pc, #140]	; (8000bf8 <SystemClock_Config+0xd4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b70:	4a21      	ldr	r2, [pc, #132]	; (8000bf8 <SystemClock_Config+0xd4>)
 8000b72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b76:	6013      	str	r3, [r2, #0]
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <SystemClock_Config+0xd4>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b84:	2302      	movs	r3, #2
 8000b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b88:	2301      	movs	r3, #1
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b8c:	2310      	movs	r3, #16
 8000b8e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b90:	2302      	movs	r3, #2
 8000b92:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b94:	2300      	movs	r3, #0
 8000b96:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b98:	2310      	movs	r3, #16
 8000b9a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b9c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ba0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ba2:	2304      	movs	r3, #4
 8000ba4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ba6:	2307      	movs	r3, #7
 8000ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000baa:	f107 0320 	add.w	r3, r7, #32
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 fecc 	bl	800194c <HAL_RCC_OscConfig>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bba:	f000 f8d9 	bl	8000d70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bbe:	230f      	movs	r3, #15
 8000bc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd4:	f107 030c 	add.w	r3, r7, #12
 8000bd8:	2102      	movs	r1, #2
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f001 f92e 	bl	8001e3c <HAL_RCC_ClockConfig>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000be6:	f000 f8c3 	bl	8000d70 <Error_Handler>
  }
}
 8000bea:	bf00      	nop
 8000bec:	3750      	adds	r7, #80	; 0x50
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40007000 	.word	0x40007000

08000bfc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f002 f9dc 	bl	8002ff0 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f000 f897 	bl	8000d70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000084 	.word	0x20000084
 8000c4c:	40004400 	.word	0x40004400

08000c50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]
 8000c60:	609a      	str	r2, [r3, #8]
 8000c62:	60da      	str	r2, [r3, #12]
 8000c64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b3d      	ldr	r3, [pc, #244]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a3c      	ldr	r2, [pc, #240]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a35      	ldr	r2, [pc, #212]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60bb      	str	r3, [r7, #8]
 8000ca2:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a2e      	ldr	r2, [pc, #184]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
 8000cb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a27      	ldr	r2, [pc, #156]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <MX_GPIO_Init+0x110>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2120      	movs	r1, #32
 8000cda:	4822      	ldr	r0, [pc, #136]	; (8000d64 <MX_GPIO_Init+0x114>)
 8000cdc:	f000 fe1c 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIO_SPI_CS_GPIO_Port, GPIO_SPI_CS_Pin, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4820      	ldr	r0, [pc, #128]	; (8000d68 <MX_GPIO_Init+0x118>)
 8000ce6:	f000 fe17 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000cf0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	4619      	mov	r1, r3
 8000d00:	481a      	ldr	r0, [pc, #104]	; (8000d6c <MX_GPIO_Init+0x11c>)
 8000d02:	f000 fc85 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d06:	2320      	movs	r3, #32
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4811      	ldr	r0, [pc, #68]	; (8000d64 <MX_GPIO_Init+0x114>)
 8000d1e:	f000 fc77 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPIO_SPI_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_SPI_CS_Pin;
 8000d22:	2301      	movs	r3, #1
 8000d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d26:	2301      	movs	r3, #1
 8000d28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIO_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	480b      	ldr	r0, [pc, #44]	; (8000d68 <MX_GPIO_Init+0x118>)
 8000d3a:	f000 fc69 	bl	8001610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d44:	2300      	movs	r3, #0
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4804      	ldr	r0, [pc, #16]	; (8000d64 <MX_GPIO_Init+0x114>)
 8000d54:	f000 fc5c 	bl	8001610 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	40020000 	.word	0x40020000
 8000d68:	40020400 	.word	0x40020400
 8000d6c:	40020800 	.word	0x40020800

08000d70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d74:	b672      	cpsid	i
}
 8000d76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000d78:	e7fe      	b.n	8000d78 <Error_Handler+0x8>
	...

08000d7c <SPI_Init>:

static bool BufferIsUsed = false;
static bool DataReadyToExport = true;

void SPI_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0

	hspi1.Instance = SPI1;
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <SPI_Init+0xb0>)
 8000d84:	4a2a      	ldr	r2, [pc, #168]	; (8000e30 <SPI_Init+0xb4>)
 8000d86:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SPI_Init+0xb0>)
 8000d8a:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d8e:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000d90:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <SPI_Init+0xb0>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <SPI_Init+0xb0>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <SPI_Init+0xb0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <SPI_Init+0xb0>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <SPI_Init+0xb0>)
 8000daa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000dae:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <SPI_Init+0xb0>)
 8000db2:	2218      	movs	r2, #24
 8000db4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000db6:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <SPI_Init+0xb0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <SPI_Init+0xb0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <SPI_Init+0xb0>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <SPI_Init+0xb0>)
 8000dca:	220a      	movs	r2, #10
 8000dcc:	62da      	str	r2, [r3, #44]	; 0x2c
	  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000dce:	4817      	ldr	r0, [pc, #92]	; (8000e2c <SPI_Init+0xb0>)
 8000dd0:	f001 fa54 	bl	800227c <HAL_SPI_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <SPI_Init+0x62>
	  {
	    Error_Handler();
 8000dda:	f7ff ffc9 	bl	8000d70 <Error_Handler>
	  }

	  //Inicializo el CS
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
 8000de2:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <SPI_Init+0xb8>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de6:	4a13      	ldr	r2, [pc, #76]	; (8000e34 <SPI_Init+0xb8>)
 8000de8:	f043 0302 	orr.w	r3, r3, #2
 8000dec:	6313      	str	r3, [r2, #48]	; 0x30
 8000dee:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <SPI_Init+0xb8>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	f003 0302 	and.w	r3, r3, #2
 8000df6:	607b      	str	r3, [r7, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
	  /*Configure GPIO pin : GPIO_SPI_CS_Pin */
	  GPIO_InitStruct.Pin = GPIO_SPI_CS_Pin;
 8000dfa:	4b0f      	ldr	r3, [pc, #60]	; (8000e38 <SPI_Init+0xbc>)
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	601a      	str	r2, [r3, #0]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <SPI_Init+0xbc>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	605a      	str	r2, [r3, #4]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	4b0c      	ldr	r3, [pc, #48]	; (8000e38 <SPI_Init+0xbc>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <SPI_Init+0xbc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
	  HAL_GPIO_Init(GPIO_SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8000e12:	4909      	ldr	r1, [pc, #36]	; (8000e38 <SPI_Init+0xbc>)
 8000e14:	4809      	ldr	r0, [pc, #36]	; (8000e3c <SPI_Init+0xc0>)
 8000e16:	f000 fbfb 	bl	8001610 <HAL_GPIO_Init>

	  //El CS es activo en bajo
	  HAL_GPIO_WritePin(GPIO_SPI_CS_GPIO_Port, GPIO_SPI_CS_Pin,CS_ON); //Escribo un 1 logico en el GPIO
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4807      	ldr	r0, [pc, #28]	; (8000e3c <SPI_Init+0xc0>)
 8000e20:	f000 fd7a 	bl	8001918 <HAL_GPIO_WritePin>

}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000cc 	.word	0x200000cc
 8000e30:	40013000 	.word	0x40013000
 8000e34:	40023800 	.word	0x40023800
 8000e38:	20000124 	.word	0x20000124
 8000e3c:	40020400 	.word	0x40020400

08000e40 <SPI_CS_Enable>:

static void SPI_CS_Enable(bool state)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	71fb      	strb	r3, [r7, #7]
	if(state)
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d005      	beq.n	8000e5c <SPI_CS_Enable+0x1c>
	  {
		HAL_GPIO_WritePin(GPIO_SPI_CS_GPIO_Port, GPIO_SPI_CS_Pin,CS_ON); //Escribo un 1 logico en el GPIO
 8000e50:	2201      	movs	r2, #1
 8000e52:	2101      	movs	r1, #1
 8000e54:	4806      	ldr	r0, [pc, #24]	; (8000e70 <SPI_CS_Enable+0x30>)
 8000e56:	f000 fd5f 	bl	8001918 <HAL_GPIO_WritePin>
	  }
	  else
	  {
		 HAL_GPIO_WritePin(GPIO_SPI_CS_GPIO_Port, GPIO_SPI_CS_Pin,CS_OFF); //Escribo un 0 logico en el GPIO
	  }
}
 8000e5a:	e004      	b.n	8000e66 <SPI_CS_Enable+0x26>
		 HAL_GPIO_WritePin(GPIO_SPI_CS_GPIO_Port, GPIO_SPI_CS_Pin,CS_OFF); //Escribo un 0 logico en el GPIO
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4803      	ldr	r0, [pc, #12]	; (8000e70 <SPI_CS_Enable+0x30>)
 8000e62:	f000 fd59 	bl	8001918 <HAL_GPIO_WritePin>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40020400 	.word	0x40020400

08000e74 <SPI_Transmit_Blocking>:

return 0;
}

int8_t SPI_Transmit_Blocking(uint8_t *data, uint32_t size)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	6039      	str	r1, [r7, #0]

	SPI_CS_Enable(SPI_TRANSMIT_INIT);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f7ff ffde 	bl	8000e40 <SPI_CS_Enable>
	HAL_SPI_Transmit(&hspi1, data, size, 0xFFFF);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b29a      	uxth	r2, r3
 8000e88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <SPI_Transmit_Blocking+0x30>)
 8000e90:	f001 fa7d 	bl	800238e <HAL_SPI_Transmit>
	SPI_CS_Enable(SPI_TRANSMIT_END);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f7ff ffd3 	bl	8000e40 <SPI_CS_Enable>

return 0;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000cc 	.word	0x200000cc

08000ea8 <SPI_Receive_Blocking>:

	return 0;
}

int8_t SPI_Receive_Blocking(uint8_t *data, uint32_t size)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]

	SPI_CS_Enable(SPI_TRANSMIT_INIT);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff ffc4 	bl	8000e40 <SPI_CS_Enable>
	HAL_SPI_Receive(&hspi1, data, size, 0xFF);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b29a      	uxth	r2, r3
 8000ebc:	23ff      	movs	r3, #255	; 0xff
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <SPI_Receive_Blocking+0x30>)
 8000ec2:	f001 fba0 	bl	8002606 <HAL_SPI_Receive>
	SPI_CS_Enable(SPI_TRANSMIT_END);
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	f7ff ffba 	bl	8000e40 <SPI_CS_Enable>

return 0;
 8000ecc:	2300      	movs	r3, #0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200000cc 	.word	0x200000cc

08000edc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	4b10      	ldr	r3, [pc, #64]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	4a0f      	ldr	r2, [pc, #60]	; (8000f28 <HAL_MspInit+0x4c>)
 8000eec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef2:	4b0d      	ldr	r3, [pc, #52]	; (8000f28 <HAL_MspInit+0x4c>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a08      	ldr	r2, [pc, #32]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <HAL_MspInit+0x4c>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f16:	603b      	str	r3, [r7, #0]
 8000f18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f1a:	2007      	movs	r0, #7
 8000f1c:	f000 fb14 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40023800 	.word	0x40023800

08000f2c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b08a      	sub	sp, #40	; 0x28
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	2200      	movs	r2, #0
 8000f3a:	601a      	str	r2, [r3, #0]
 8000f3c:	605a      	str	r2, [r3, #4]
 8000f3e:	609a      	str	r2, [r3, #8]
 8000f40:	60da      	str	r2, [r3, #12]
 8000f42:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a2c      	ldr	r2, [pc, #176]	; (8000ffc <HAL_SPI_MspInit+0xd0>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d151      	bne.n	8000ff2 <HAL_SPI_MspInit+0xc6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f4e:	2300      	movs	r3, #0
 8000f50:	613b      	str	r3, [r7, #16]
 8000f52:	4b2b      	ldr	r3, [pc, #172]	; (8001000 <HAL_SPI_MspInit+0xd4>)
 8000f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f56:	4a2a      	ldr	r2, [pc, #168]	; (8001000 <HAL_SPI_MspInit+0xd4>)
 8000f58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f5c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <HAL_SPI_MspInit+0xd4>)
 8000f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f66:	613b      	str	r3, [r7, #16]
 8000f68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	4b24      	ldr	r3, [pc, #144]	; (8001000 <HAL_SPI_MspInit+0xd4>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f72:	4a23      	ldr	r2, [pc, #140]	; (8001000 <HAL_SPI_MspInit+0xd4>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <HAL_SPI_MspInit+0xd4>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60bb      	str	r3, [r7, #8]
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <HAL_SPI_MspInit+0xd4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a1c      	ldr	r2, [pc, #112]	; (8001000 <HAL_SPI_MspInit+0xd4>)
 8000f90:	f043 0302 	orr.w	r3, r3, #2
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b1a      	ldr	r3, [pc, #104]	; (8001000 <HAL_SPI_MspInit+0xd4>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
 8000fa0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fa2:	23c0      	movs	r3, #192	; 0xc0
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fb2:	2305      	movs	r3, #5
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4811      	ldr	r0, [pc, #68]	; (8001004 <HAL_SPI_MspInit+0xd8>)
 8000fbe:	f000 fb27 	bl	8001610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000fd2:	2305      	movs	r3, #5
 8000fd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd6:	f107 0314 	add.w	r3, r7, #20
 8000fda:	4619      	mov	r1, r3
 8000fdc:	480a      	ldr	r0, [pc, #40]	; (8001008 <HAL_SPI_MspInit+0xdc>)
 8000fde:	f000 fb17 	bl	8001610 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2023      	movs	r0, #35	; 0x23
 8000fe8:	f000 fab9 	bl	800155e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fec:	2023      	movs	r0, #35	; 0x23
 8000fee:	f000 fad2 	bl	8001596 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3728      	adds	r7, #40	; 0x28
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40013000 	.word	0x40013000
 8001000:	40023800 	.word	0x40023800
 8001004:	40020000 	.word	0x40020000
 8001008:	40020400 	.word	0x40020400

0800100c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08a      	sub	sp, #40	; 0x28
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 0314 	add.w	r3, r7, #20
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a19      	ldr	r2, [pc, #100]	; (8001090 <HAL_UART_MspInit+0x84>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d12b      	bne.n	8001086 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	4b18      	ldr	r3, [pc, #96]	; (8001094 <HAL_UART_MspInit+0x88>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	4a17      	ldr	r2, [pc, #92]	; (8001094 <HAL_UART_MspInit+0x88>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6413      	str	r3, [r2, #64]	; 0x40
 800103e:	4b15      	ldr	r3, [pc, #84]	; (8001094 <HAL_UART_MspInit+0x88>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	613b      	str	r3, [r7, #16]
 8001048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	2300      	movs	r3, #0
 800104c:	60fb      	str	r3, [r7, #12]
 800104e:	4b11      	ldr	r3, [pc, #68]	; (8001094 <HAL_UART_MspInit+0x88>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	4a10      	ldr	r2, [pc, #64]	; (8001094 <HAL_UART_MspInit+0x88>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	6313      	str	r3, [r2, #48]	; 0x30
 800105a:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <HAL_UART_MspInit+0x88>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001066:	230c      	movs	r3, #12
 8001068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800106a:	2302      	movs	r3, #2
 800106c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	2300      	movs	r3, #0
 8001074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001076:	2307      	movs	r3, #7
 8001078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	4619      	mov	r1, r3
 8001080:	4805      	ldr	r0, [pc, #20]	; (8001098 <HAL_UART_MspInit+0x8c>)
 8001082:	f000 fac5 	bl	8001610 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001086:	bf00      	nop
 8001088:	3728      	adds	r7, #40	; 0x28
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40004400 	.word	0x40004400
 8001094:	40023800 	.word	0x40023800
 8001098:	40020000 	.word	0x40020000

0800109c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a0:	e7fe      	b.n	80010a0 <NMI_Handler+0x4>

080010a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010a2:	b480      	push	{r7}
 80010a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010a6:	e7fe      	b.n	80010a6 <HardFault_Handler+0x4>

080010a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010ac:	e7fe      	b.n	80010ac <MemManage_Handler+0x4>

080010ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010b2:	e7fe      	b.n	80010b2 <BusFault_Handler+0x4>

080010b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b8:	e7fe      	b.n	80010b8 <UsageFault_Handler+0x4>

080010ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ba:	b480      	push	{r7}
 80010bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e8:	f000 f93e 	bl	8001368 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010f4:	4802      	ldr	r0, [pc, #8]	; (8001100 <SPI1_IRQHandler+0x10>)
 80010f6:	f001 fd39 	bl	8002b6c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200000cc 	.word	0x200000cc

08001104 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b086      	sub	sp, #24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e00a      	b.n	800112c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001116:	f3af 8000 	nop.w
 800111a:	4601      	mov	r1, r0
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	1c5a      	adds	r2, r3, #1
 8001120:	60ba      	str	r2, [r7, #8]
 8001122:	b2ca      	uxtb	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	3301      	adds	r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbf0      	blt.n	8001116 <_read+0x12>
  }

  return len;
 8001134:	687b      	ldr	r3, [r7, #4]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3718      	adds	r7, #24
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	b086      	sub	sp, #24
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	e009      	b.n	8001164 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1c5a      	adds	r2, r3, #1
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	3301      	adds	r3, #1
 8001162:	617b      	str	r3, [r7, #20]
 8001164:	697a      	ldr	r2, [r7, #20]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	429a      	cmp	r2, r3
 800116a:	dbf1      	blt.n	8001150 <_write+0x12>
  }
  return len;
 800116c:	687b      	ldr	r3, [r7, #4]
}
 800116e:	4618      	mov	r0, r3
 8001170:	3718      	adds	r7, #24
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <_close>:

int _close(int file)
{
 8001176:	b480      	push	{r7}
 8001178:	b083      	sub	sp, #12
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800117e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001182:	4618      	mov	r0, r3
 8001184:	370c      	adds	r7, #12
 8001186:	46bd      	mov	sp, r7
 8001188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118c:	4770      	bx	lr

0800118e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800118e:	b480      	push	{r7}
 8001190:	b083      	sub	sp, #12
 8001192:	af00      	add	r7, sp, #0
 8001194:	6078      	str	r0, [r7, #4]
 8001196:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800119e:	605a      	str	r2, [r3, #4]
  return 0;
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <_isatty>:

int _isatty(int file)
{
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011b6:	2301      	movs	r3, #1
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	370c      	adds	r7, #12
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011d0:	2300      	movs	r3, #0
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011e8:	4a14      	ldr	r2, [pc, #80]	; (800123c <_sbrk+0x5c>)
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <_sbrk+0x60>)
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011f4:	4b13      	ldr	r3, [pc, #76]	; (8001244 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d102      	bne.n	8001202 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <_sbrk+0x64>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <_sbrk+0x68>)
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <_sbrk+0x64>)
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4413      	add	r3, r2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	429a      	cmp	r2, r3
 800120e:	d207      	bcs.n	8001220 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001210:	f002 fad6 	bl	80037c0 <__errno>
 8001214:	4603      	mov	r3, r0
 8001216:	220c      	movs	r2, #12
 8001218:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800121a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800121e:	e009      	b.n	8001234 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001220:	4b08      	ldr	r3, [pc, #32]	; (8001244 <_sbrk+0x64>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001226:	4b07      	ldr	r3, [pc, #28]	; (8001244 <_sbrk+0x64>)
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4413      	add	r3, r2
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <_sbrk+0x64>)
 8001230:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001232:	68fb      	ldr	r3, [r7, #12]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20018000 	.word	0x20018000
 8001240:	00000400 	.word	0x00000400
 8001244:	20000138 	.word	0x20000138
 8001248:	20000290 	.word	0x20000290

0800124c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <SystemInit+0x20>)
 8001252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001256:	4a05      	ldr	r2, [pc, #20]	; (800126c <SystemInit+0x20>)
 8001258:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800125c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	e000ed00 	.word	0xe000ed00

08001270 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001270:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001274:	480d      	ldr	r0, [pc, #52]	; (80012ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001276:	490e      	ldr	r1, [pc, #56]	; (80012b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001278:	4a0e      	ldr	r2, [pc, #56]	; (80012b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800127c:	e002      	b.n	8001284 <LoopCopyDataInit>

0800127e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800127e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001280:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001282:	3304      	adds	r3, #4

08001284 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001284:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001286:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001288:	d3f9      	bcc.n	800127e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128a:	4a0b      	ldr	r2, [pc, #44]	; (80012b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800128c:	4c0b      	ldr	r4, [pc, #44]	; (80012bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800128e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001290:	e001      	b.n	8001296 <LoopFillZerobss>

08001292 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001292:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001294:	3204      	adds	r2, #4

08001296 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001296:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001298:	d3fb      	bcc.n	8001292 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800129a:	f7ff ffd7 	bl	800124c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800129e:	f002 fa95 	bl	80037cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a2:	f7ff fc27 	bl	8000af4 <main>
  bx  lr    
 80012a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80012a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80012ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80012b4:	080044f8 	.word	0x080044f8
  ldr r2, =_sbss
 80012b8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80012bc:	2000028c 	.word	0x2000028c

080012c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c0:	e7fe      	b.n	80012c0 <ADC_IRQHandler>
	...

080012c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012c8:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a0d      	ldr	r2, [pc, #52]	; (8001304 <HAL_Init+0x40>)
 80012ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012d4:	4b0b      	ldr	r3, [pc, #44]	; (8001304 <HAL_Init+0x40>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a0a      	ldr	r2, [pc, #40]	; (8001304 <HAL_Init+0x40>)
 80012da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <HAL_Init+0x40>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a07      	ldr	r2, [pc, #28]	; (8001304 <HAL_Init+0x40>)
 80012e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ec:	2003      	movs	r0, #3
 80012ee:	f000 f92b 	bl	8001548 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f000 f808 	bl	8001308 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012f8:	f7ff fdf0 	bl	8000edc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	40023c00 	.word	0x40023c00

08001308 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001310:	4b12      	ldr	r3, [pc, #72]	; (800135c <HAL_InitTick+0x54>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_InitTick+0x58>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	4619      	mov	r1, r3
 800131a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800131e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001322:	fbb2 f3f3 	udiv	r3, r2, r3
 8001326:	4618      	mov	r0, r3
 8001328:	f000 f943 	bl	80015b2 <HAL_SYSTICK_Config>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e00e      	b.n	8001354 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	d80a      	bhi.n	8001352 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800133c:	2200      	movs	r2, #0
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001344:	f000 f90b 	bl	800155e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001348:	4a06      	ldr	r2, [pc, #24]	; (8001364 <HAL_InitTick+0x5c>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
 8001350:	e000      	b.n	8001354 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000000 	.word	0x20000000
 8001360:	20000008 	.word	0x20000008
 8001364:	20000004 	.word	0x20000004

08001368 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <HAL_IncTick+0x20>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	461a      	mov	r2, r3
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_IncTick+0x24>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4413      	add	r3, r2
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_IncTick+0x24>)
 800137a:	6013      	str	r3, [r2, #0]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008
 800138c:	2000013c 	.word	0x2000013c

08001390 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return uwTick;
 8001394:	4b03      	ldr	r3, [pc, #12]	; (80013a4 <HAL_GetTick+0x14>)
 8001396:	681b      	ldr	r3, [r3, #0]
}
 8001398:	4618      	mov	r0, r3
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	2000013c 	.word	0x2000013c

080013a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013b8:	4b0c      	ldr	r3, [pc, #48]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013c4:	4013      	ands	r3, r2
 80013c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013da:	4a04      	ldr	r2, [pc, #16]	; (80013ec <__NVIC_SetPriorityGrouping+0x44>)
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	60d3      	str	r3, [r2, #12]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013f4:	4b04      	ldr	r3, [pc, #16]	; (8001408 <__NVIC_GetPriorityGrouping+0x18>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	0a1b      	lsrs	r3, r3, #8
 80013fa:	f003 0307 	and.w	r3, r3, #7
}
 80013fe:	4618      	mov	r0, r3
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800141a:	2b00      	cmp	r3, #0
 800141c:	db0b      	blt.n	8001436 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f003 021f 	and.w	r2, r3, #31
 8001424:	4907      	ldr	r1, [pc, #28]	; (8001444 <__NVIC_EnableIRQ+0x38>)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	095b      	lsrs	r3, r3, #5
 800142c:	2001      	movs	r0, #1
 800142e:	fa00 f202 	lsl.w	r2, r0, r2
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001436:	bf00      	nop
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000e100 	.word	0xe000e100

08001448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	6039      	str	r1, [r7, #0]
 8001452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0a      	blt.n	8001472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	b2da      	uxtb	r2, r3
 8001460:	490c      	ldr	r1, [pc, #48]	; (8001494 <__NVIC_SetPriority+0x4c>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	0112      	lsls	r2, r2, #4
 8001468:	b2d2      	uxtb	r2, r2
 800146a:	440b      	add	r3, r1
 800146c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001470:	e00a      	b.n	8001488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	b2da      	uxtb	r2, r3
 8001476:	4908      	ldr	r1, [pc, #32]	; (8001498 <__NVIC_SetPriority+0x50>)
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	3b04      	subs	r3, #4
 8001480:	0112      	lsls	r2, r2, #4
 8001482:	b2d2      	uxtb	r2, r2
 8001484:	440b      	add	r3, r1
 8001486:	761a      	strb	r2, [r3, #24]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	e000e100 	.word	0xe000e100
 8001498:	e000ed00 	.word	0xe000ed00

0800149c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800149c:	b480      	push	{r7}
 800149e:	b089      	sub	sp, #36	; 0x24
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	60f8      	str	r0, [r7, #12]
 80014a4:	60b9      	str	r1, [r7, #8]
 80014a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f1c3 0307 	rsb	r3, r3, #7
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	bf28      	it	cs
 80014ba:	2304      	movcs	r3, #4
 80014bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014be:	69fb      	ldr	r3, [r7, #28]
 80014c0:	3304      	adds	r3, #4
 80014c2:	2b06      	cmp	r3, #6
 80014c4:	d902      	bls.n	80014cc <NVIC_EncodePriority+0x30>
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	3b03      	subs	r3, #3
 80014ca:	e000      	b.n	80014ce <NVIC_EncodePriority+0x32>
 80014cc:	2300      	movs	r3, #0
 80014ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43da      	mvns	r2, r3
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	401a      	ands	r2, r3
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa01 f303 	lsl.w	r3, r1, r3
 80014ee:	43d9      	mvns	r1, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	4313      	orrs	r3, r2
         );
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3724      	adds	r7, #36	; 0x24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001514:	d301      	bcc.n	800151a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001516:	2301      	movs	r3, #1
 8001518:	e00f      	b.n	800153a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <SysTick_Config+0x40>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001522:	210f      	movs	r1, #15
 8001524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001528:	f7ff ff8e 	bl	8001448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SysTick_Config+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <SysTick_Config+0x40>)
 8001534:	2207      	movs	r2, #7
 8001536:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	e000e010 	.word	0xe000e010

08001548 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7ff ff29 	bl	80013a8 <__NVIC_SetPriorityGrouping>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800155e:	b580      	push	{r7, lr}
 8001560:	b086      	sub	sp, #24
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
 800156a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001570:	f7ff ff3e 	bl	80013f0 <__NVIC_GetPriorityGrouping>
 8001574:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	68b9      	ldr	r1, [r7, #8]
 800157a:	6978      	ldr	r0, [r7, #20]
 800157c:	f7ff ff8e 	bl	800149c <NVIC_EncodePriority>
 8001580:	4602      	mov	r2, r0
 8001582:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001586:	4611      	mov	r1, r2
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff5d 	bl	8001448 <__NVIC_SetPriority>
}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff31 	bl	800140c <__NVIC_EnableIRQ>
}
 80015aa:	bf00      	nop
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f7ff ffa2 	bl	8001504 <SysTick_Config>
 80015c0:	4603      	mov	r3, r0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d004      	beq.n	80015e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e00c      	b.n	8001602 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2205      	movs	r2, #5
 80015ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f022 0201 	bic.w	r2, r2, #1
 80015fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
	...

08001610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001610:	b480      	push	{r7}
 8001612:	b089      	sub	sp, #36	; 0x24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800161a:	2300      	movs	r3, #0
 800161c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800161e:	2300      	movs	r3, #0
 8001620:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001622:	2300      	movs	r3, #0
 8001624:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001626:	2300      	movs	r3, #0
 8001628:	61fb      	str	r3, [r7, #28]
 800162a:	e159      	b.n	80018e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800162c:	2201      	movs	r2, #1
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	429a      	cmp	r2, r3
 8001646:	f040 8148 	bne.w	80018da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f003 0303 	and.w	r3, r3, #3
 8001652:	2b01      	cmp	r3, #1
 8001654:	d005      	beq.n	8001662 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800165e:	2b02      	cmp	r3, #2
 8001660:	d130      	bne.n	80016c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	2203      	movs	r2, #3
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43db      	mvns	r3, r3
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	4013      	ands	r3, r2
 8001678:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	68da      	ldr	r2, [r3, #12]
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	69ba      	ldr	r2, [r7, #24]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f003 0201 	and.w	r2, r3, #1
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	69ba      	ldr	r2, [r7, #24]
 80016c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d017      	beq.n	8001700 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	2203      	movs	r2, #3
 80016dc:	fa02 f303 	lsl.w	r3, r2, r3
 80016e0:	43db      	mvns	r3, r3
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4013      	ands	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f003 0303 	and.w	r3, r3, #3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d123      	bne.n	8001754 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	08da      	lsrs	r2, r3, #3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3208      	adds	r2, #8
 8001714:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	220f      	movs	r2, #15
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	691a      	ldr	r2, [r3, #16]
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4313      	orrs	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	08da      	lsrs	r2, r3, #3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	3208      	adds	r2, #8
 800174e:	69b9      	ldr	r1, [r7, #24]
 8001750:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	2203      	movs	r2, #3
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	4013      	ands	r3, r2
 800176a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0203 	and.w	r2, r3, #3
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	fa02 f303 	lsl.w	r3, r2, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4313      	orrs	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 80a2 	beq.w	80018da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
 800179a:	4b57      	ldr	r3, [pc, #348]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179e:	4a56      	ldr	r2, [pc, #344]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 80017a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017a4:	6453      	str	r3, [r2, #68]	; 0x44
 80017a6:	4b54      	ldr	r3, [pc, #336]	; (80018f8 <HAL_GPIO_Init+0x2e8>)
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ae:	60fb      	str	r3, [r7, #12]
 80017b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017b2:	4a52      	ldr	r2, [pc, #328]	; (80018fc <HAL_GPIO_Init+0x2ec>)
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	089b      	lsrs	r3, r3, #2
 80017b8:	3302      	adds	r3, #2
 80017ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f003 0303 	and.w	r3, r3, #3
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	220f      	movs	r2, #15
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a49      	ldr	r2, [pc, #292]	; (8001900 <HAL_GPIO_Init+0x2f0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d019      	beq.n	8001812 <HAL_GPIO_Init+0x202>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	4a48      	ldr	r2, [pc, #288]	; (8001904 <HAL_GPIO_Init+0x2f4>)
 80017e2:	4293      	cmp	r3, r2
 80017e4:	d013      	beq.n	800180e <HAL_GPIO_Init+0x1fe>
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4a47      	ldr	r2, [pc, #284]	; (8001908 <HAL_GPIO_Init+0x2f8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d00d      	beq.n	800180a <HAL_GPIO_Init+0x1fa>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a46      	ldr	r2, [pc, #280]	; (800190c <HAL_GPIO_Init+0x2fc>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d007      	beq.n	8001806 <HAL_GPIO_Init+0x1f6>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a45      	ldr	r2, [pc, #276]	; (8001910 <HAL_GPIO_Init+0x300>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_GPIO_Init+0x1f2>
 80017fe:	2304      	movs	r3, #4
 8001800:	e008      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001802:	2307      	movs	r3, #7
 8001804:	e006      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001806:	2303      	movs	r3, #3
 8001808:	e004      	b.n	8001814 <HAL_GPIO_Init+0x204>
 800180a:	2302      	movs	r3, #2
 800180c:	e002      	b.n	8001814 <HAL_GPIO_Init+0x204>
 800180e:	2301      	movs	r3, #1
 8001810:	e000      	b.n	8001814 <HAL_GPIO_Init+0x204>
 8001812:	2300      	movs	r3, #0
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	f002 0203 	and.w	r2, r2, #3
 800181a:	0092      	lsls	r2, r2, #2
 800181c:	4093      	lsls	r3, r2
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001824:	4935      	ldr	r1, [pc, #212]	; (80018fc <HAL_GPIO_Init+0x2ec>)
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	089b      	lsrs	r3, r3, #2
 800182a:	3302      	adds	r3, #2
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001832:	4b38      	ldr	r3, [pc, #224]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d003      	beq.n	8001856 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001856:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <HAL_GPIO_Init+0x304>)
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	43db      	mvns	r3, r3
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	4013      	ands	r3, r2
 800186a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001874:	2b00      	cmp	r3, #0
 8001876:	d003      	beq.n	8001880 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001880:	4a24      	ldr	r2, [pc, #144]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001886:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_GPIO_Init+0x304>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	43db      	mvns	r3, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4013      	ands	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d003      	beq.n	80018aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018aa:	4a1a      	ldr	r2, [pc, #104]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018b0:	4b18      	ldr	r3, [pc, #96]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d003      	beq.n	80018d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018d4:	4a0f      	ldr	r2, [pc, #60]	; (8001914 <HAL_GPIO_Init+0x304>)
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	3301      	adds	r3, #1
 80018de:	61fb      	str	r3, [r7, #28]
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	2b0f      	cmp	r3, #15
 80018e4:	f67f aea2 	bls.w	800162c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
 80018f6:	bf00      	nop
 80018f8:	40023800 	.word	0x40023800
 80018fc:	40013800 	.word	0x40013800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400
 8001908:	40020800 	.word	0x40020800
 800190c:	40020c00 	.word	0x40020c00
 8001910:	40021000 	.word	0x40021000
 8001914:	40013c00 	.word	0x40013c00

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	619a      	str	r2, [r3, #24]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
	...

0800194c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d101      	bne.n	800195e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e267      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d075      	beq.n	8001a56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f003 030c 	and.w	r3, r3, #12
 8001972:	2b04      	cmp	r3, #4
 8001974:	d00c      	beq.n	8001990 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001976:	4b85      	ldr	r3, [pc, #532]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800197e:	2b08      	cmp	r3, #8
 8001980:	d112      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001982:	4b82      	ldr	r3, [pc, #520]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800198e:	d10b      	bne.n	80019a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001990:	4b7e      	ldr	r3, [pc, #504]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d05b      	beq.n	8001a54 <HAL_RCC_OscConfig+0x108>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d157      	bne.n	8001a54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e242      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019b0:	d106      	bne.n	80019c0 <HAL_RCC_OscConfig+0x74>
 80019b2:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a75      	ldr	r2, [pc, #468]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e01d      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019c8:	d10c      	bne.n	80019e4 <HAL_RCC_OscConfig+0x98>
 80019ca:	4b70      	ldr	r3, [pc, #448]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a6f      	ldr	r2, [pc, #444]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 80019d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019d4:	6013      	str	r3, [r2, #0]
 80019d6:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a6c      	ldr	r2, [pc, #432]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 80019dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019e0:	6013      	str	r3, [r2, #0]
 80019e2:	e00b      	b.n	80019fc <HAL_RCC_OscConfig+0xb0>
 80019e4:	4b69      	ldr	r3, [pc, #420]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a68      	ldr	r2, [pc, #416]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 80019ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019ee:	6013      	str	r3, [r2, #0]
 80019f0:	4b66      	ldr	r3, [pc, #408]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a65      	ldr	r2, [pc, #404]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 80019f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d013      	beq.n	8001a2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a04:	f7ff fcc4 	bl	8001390 <HAL_GetTick>
 8001a08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a0a:	e008      	b.n	8001a1e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fcc0 	bl	8001390 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	2b64      	cmp	r3, #100	; 0x64
 8001a18:	d901      	bls.n	8001a1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	e207      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a1e:	4b5b      	ldr	r3, [pc, #364]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d0f0      	beq.n	8001a0c <HAL_RCC_OscConfig+0xc0>
 8001a2a:	e014      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2c:	f7ff fcb0 	bl	8001390 <HAL_GetTick>
 8001a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a32:	e008      	b.n	8001a46 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a34:	f7ff fcac 	bl	8001390 <HAL_GetTick>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b64      	cmp	r3, #100	; 0x64
 8001a40:	d901      	bls.n	8001a46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e1f3      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a46:	4b51      	ldr	r3, [pc, #324]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d1f0      	bne.n	8001a34 <HAL_RCC_OscConfig+0xe8>
 8001a52:	e000      	b.n	8001a56 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d063      	beq.n	8001b2a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a62:	4b4a      	ldr	r3, [pc, #296]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d00b      	beq.n	8001a86 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a6e:	4b47      	ldr	r3, [pc, #284]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a76:	2b08      	cmp	r3, #8
 8001a78:	d11c      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a7a:	4b44      	ldr	r3, [pc, #272]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d116      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a86:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d005      	beq.n	8001a9e <HAL_RCC_OscConfig+0x152>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	68db      	ldr	r3, [r3, #12]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d001      	beq.n	8001a9e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e1c7      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	00db      	lsls	r3, r3, #3
 8001aac:	4937      	ldr	r1, [pc, #220]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ab2:	e03a      	b.n	8001b2a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	68db      	ldr	r3, [r3, #12]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001abc:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_RCC_OscConfig+0x244>)
 8001abe:	2201      	movs	r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac2:	f7ff fc65 	bl	8001390 <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff fc61 	bl	8001390 <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e1a8      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001adc:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	4925      	ldr	r1, [pc, #148]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]
 8001afc:	e015      	b.n	8001b2a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b24      	ldr	r3, [pc, #144]	; (8001b90 <HAL_RCC_OscConfig+0x244>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b04:	f7ff fc44 	bl	8001390 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b0c:	f7ff fc40 	bl	8001390 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e187      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b1e:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d1f0      	bne.n	8001b0c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d036      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d016      	beq.n	8001b6c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <HAL_RCC_OscConfig+0x248>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7ff fc24 	bl	8001390 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7ff fc20 	bl	8001390 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e167      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b5e:	4b0b      	ldr	r3, [pc, #44]	; (8001b8c <HAL_RCC_OscConfig+0x240>)
 8001b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d0f0      	beq.n	8001b4c <HAL_RCC_OscConfig+0x200>
 8001b6a:	e01b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_OscConfig+0x248>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b72:	f7ff fc0d 	bl	8001390 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b78:	e00e      	b.n	8001b98 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fc09 	bl	8001390 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d907      	bls.n	8001b98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e150      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	42470000 	.word	0x42470000
 8001b94:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b98:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001b9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d1ea      	bne.n	8001b7a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0304 	and.w	r3, r3, #4
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	f000 8097 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bb6:	4b81      	ldr	r3, [pc, #516]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10f      	bne.n	8001be2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60bb      	str	r3, [r7, #8]
 8001bc6:	4b7d      	ldr	r3, [pc, #500]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bca:	4a7c      	ldr	r2, [pc, #496]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	60bb      	str	r3, [r7, #8]
 8001bdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bde:	2301      	movs	r3, #1
 8001be0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001be2:	4b77      	ldr	r3, [pc, #476]	; (8001dc0 <HAL_RCC_OscConfig+0x474>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d118      	bne.n	8001c20 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bee:	4b74      	ldr	r3, [pc, #464]	; (8001dc0 <HAL_RCC_OscConfig+0x474>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a73      	ldr	r2, [pc, #460]	; (8001dc0 <HAL_RCC_OscConfig+0x474>)
 8001bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bfa:	f7ff fbc9 	bl	8001390 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c02:	f7ff fbc5 	bl	8001390 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e10c      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c14:	4b6a      	ldr	r3, [pc, #424]	; (8001dc0 <HAL_RCC_OscConfig+0x474>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d0f0      	beq.n	8001c02 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d106      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2ea>
 8001c28:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c2c:	4a63      	ldr	r2, [pc, #396]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c2e:	f043 0301 	orr.w	r3, r3, #1
 8001c32:	6713      	str	r3, [r2, #112]	; 0x70
 8001c34:	e01c      	b.n	8001c70 <HAL_RCC_OscConfig+0x324>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	689b      	ldr	r3, [r3, #8]
 8001c3a:	2b05      	cmp	r3, #5
 8001c3c:	d10c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x30c>
 8001c3e:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c42:	4a5e      	ldr	r2, [pc, #376]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6713      	str	r3, [r2, #112]	; 0x70
 8001c4a:	4b5c      	ldr	r3, [pc, #368]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c4e:	4a5b      	ldr	r2, [pc, #364]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6713      	str	r3, [r2, #112]	; 0x70
 8001c56:	e00b      	b.n	8001c70 <HAL_RCC_OscConfig+0x324>
 8001c58:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5c:	4a57      	ldr	r2, [pc, #348]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c5e:	f023 0301 	bic.w	r3, r3, #1
 8001c62:	6713      	str	r3, [r2, #112]	; 0x70
 8001c64:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c68:	4a54      	ldr	r2, [pc, #336]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c6a:	f023 0304 	bic.w	r3, r3, #4
 8001c6e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d015      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff fb8a 	bl	8001390 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c7e:	e00a      	b.n	8001c96 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c80:	f7ff fb86 	bl	8001390 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e0cb      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c96:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c9a:	f003 0302 	and.w	r3, r3, #2
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0ee      	beq.n	8001c80 <HAL_RCC_OscConfig+0x334>
 8001ca2:	e014      	b.n	8001cce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca4:	f7ff fb74 	bl	8001390 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cac:	f7ff fb70 	bl	8001390 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e0b5      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001cc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1ee      	bne.n	8001cac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d105      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cd4:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	4a38      	ldr	r2, [pc, #224]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001cda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cde:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	699b      	ldr	r3, [r3, #24]
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80a1 	beq.w	8001e2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cea:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d05c      	beq.n	8001db0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d141      	bne.n	8001d82 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <HAL_RCC_OscConfig+0x478>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff fb44 	bl	8001390 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff fb40 	bl	8001390 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e087      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1e:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69da      	ldr	r2, [r3, #28]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	431a      	orrs	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	019b      	lsls	r3, r3, #6
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	3b01      	subs	r3, #1
 8001d44:	041b      	lsls	r3, r3, #16
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d4c:	061b      	lsls	r3, r3, #24
 8001d4e:	491b      	ldr	r1, [pc, #108]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <HAL_RCC_OscConfig+0x478>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d5a:	f7ff fb19 	bl	8001390 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d62:	f7ff fb15 	bl	8001390 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e05c      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0f0      	beq.n	8001d62 <HAL_RCC_OscConfig+0x416>
 8001d80:	e054      	b.n	8001e2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_RCC_OscConfig+0x478>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7ff fb02 	bl	8001390 <HAL_GetTick>
 8001d8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d8e:	e008      	b.n	8001da2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d90:	f7ff fafe 	bl	8001390 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d901      	bls.n	8001da2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	e045      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCC_OscConfig+0x470>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d1f0      	bne.n	8001d90 <HAL_RCC_OscConfig+0x444>
 8001dae:	e03d      	b.n	8001e2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	699b      	ldr	r3, [r3, #24]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d107      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e038      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_RCC_OscConfig+0x4ec>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d028      	beq.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d121      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	429a      	cmp	r2, r3
 8001df0:	d11a      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001df2:	68fa      	ldr	r2, [r7, #12]
 8001df4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001df8:	4013      	ands	r3, r2
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001dfe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d111      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e0e:	085b      	lsrs	r3, r3, #1
 8001e10:	3b01      	subs	r3, #1
 8001e12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e000      	b.n	8001e2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d101      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e0cc      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e50:	4b68      	ldr	r3, [pc, #416]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d90c      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5e:	4b65      	ldr	r3, [pc, #404]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e60:	683a      	ldr	r2, [r7, #0]
 8001e62:	b2d2      	uxtb	r2, r2
 8001e64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b63      	ldr	r3, [pc, #396]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e0b8      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d020      	beq.n	8001ec6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e90:	4b59      	ldr	r3, [pc, #356]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4a58      	ldr	r2, [pc, #352]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e9a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0308 	and.w	r3, r3, #8
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ea8:	4b53      	ldr	r3, [pc, #332]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	4a52      	ldr	r2, [pc, #328]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001eb2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eb4:	4b50      	ldr	r3, [pc, #320]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	494d      	ldr	r1, [pc, #308]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d044      	beq.n	8001f5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d107      	bne.n	8001eea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eda:	4b47      	ldr	r3, [pc, #284]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d119      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e07f      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d003      	beq.n	8001efa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d107      	bne.n	8001f0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001efa:	4b3f      	ldr	r3, [pc, #252]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e06f      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d101      	bne.n	8001f1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	e067      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f1a:	4b37      	ldr	r3, [pc, #220]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	f023 0203 	bic.w	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	4934      	ldr	r1, [pc, #208]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f2c:	f7ff fa30 	bl	8001390 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f32:	e00a      	b.n	8001f4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f34:	f7ff fa2c 	bl	8001390 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e04f      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 020c 	and.w	r2, r3, #12
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d1eb      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f5c:	4b25      	ldr	r3, [pc, #148]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d20c      	bcs.n	8001f84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f6a:	4b22      	ldr	r3, [pc, #136]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f6c:	683a      	ldr	r2, [r7, #0]
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f72:	4b20      	ldr	r3, [pc, #128]	; (8001ff4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0307 	and.w	r3, r3, #7
 8001f7a:	683a      	ldr	r2, [r7, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d001      	beq.n	8001f84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e032      	b.n	8001fea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0304 	and.w	r3, r3, #4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d008      	beq.n	8001fa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f90:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	4916      	ldr	r1, [pc, #88]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d009      	beq.n	8001fc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fae:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	00db      	lsls	r3, r3, #3
 8001fbc:	490e      	ldr	r1, [pc, #56]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fc2:	f000 f821 	bl	8002008 <HAL_RCC_GetSysClockFreq>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	490a      	ldr	r1, [pc, #40]	; (8001ffc <HAL_RCC_ClockConfig+0x1c0>)
 8001fd4:	5ccb      	ldrb	r3, [r1, r3]
 8001fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8001fda:	4a09      	ldr	r2, [pc, #36]	; (8002000 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001fde:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCC_ClockConfig+0x1c8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7ff f990 	bl	8001308 <HAL_InitTick>

  return HAL_OK;
 8001fe8:	2300      	movs	r3, #0
}
 8001fea:	4618      	mov	r0, r3
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40023c00 	.word	0x40023c00
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	0800449c 	.word	0x0800449c
 8002000:	20000000 	.word	0x20000000
 8002004:	20000004 	.word	0x20000004

08002008 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800200c:	b094      	sub	sp, #80	; 0x50
 800200e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002010:	2300      	movs	r3, #0
 8002012:	647b      	str	r3, [r7, #68]	; 0x44
 8002014:	2300      	movs	r3, #0
 8002016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002018:	2300      	movs	r3, #0
 800201a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800201c:	2300      	movs	r3, #0
 800201e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002020:	4b79      	ldr	r3, [pc, #484]	; (8002208 <HAL_RCC_GetSysClockFreq+0x200>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 030c 	and.w	r3, r3, #12
 8002028:	2b08      	cmp	r3, #8
 800202a:	d00d      	beq.n	8002048 <HAL_RCC_GetSysClockFreq+0x40>
 800202c:	2b08      	cmp	r3, #8
 800202e:	f200 80e1 	bhi.w	80021f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <HAL_RCC_GetSysClockFreq+0x34>
 8002036:	2b04      	cmp	r3, #4
 8002038:	d003      	beq.n	8002042 <HAL_RCC_GetSysClockFreq+0x3a>
 800203a:	e0db      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800203c:	4b73      	ldr	r3, [pc, #460]	; (800220c <HAL_RCC_GetSysClockFreq+0x204>)
 800203e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002040:	e0db      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002042:	4b73      	ldr	r3, [pc, #460]	; (8002210 <HAL_RCC_GetSysClockFreq+0x208>)
 8002044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002046:	e0d8      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002048:	4b6f      	ldr	r3, [pc, #444]	; (8002208 <HAL_RCC_GetSysClockFreq+0x200>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002050:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002052:	4b6d      	ldr	r3, [pc, #436]	; (8002208 <HAL_RCC_GetSysClockFreq+0x200>)
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d063      	beq.n	8002126 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205e:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <HAL_RCC_GetSysClockFreq+0x200>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	099b      	lsrs	r3, r3, #6
 8002064:	2200      	movs	r2, #0
 8002066:	63bb      	str	r3, [r7, #56]	; 0x38
 8002068:	63fa      	str	r2, [r7, #60]	; 0x3c
 800206a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002070:	633b      	str	r3, [r7, #48]	; 0x30
 8002072:	2300      	movs	r3, #0
 8002074:	637b      	str	r3, [r7, #52]	; 0x34
 8002076:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800207a:	4622      	mov	r2, r4
 800207c:	462b      	mov	r3, r5
 800207e:	f04f 0000 	mov.w	r0, #0
 8002082:	f04f 0100 	mov.w	r1, #0
 8002086:	0159      	lsls	r1, r3, #5
 8002088:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800208c:	0150      	lsls	r0, r2, #5
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4621      	mov	r1, r4
 8002094:	1a51      	subs	r1, r2, r1
 8002096:	6139      	str	r1, [r7, #16]
 8002098:	4629      	mov	r1, r5
 800209a:	eb63 0301 	sbc.w	r3, r3, r1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	f04f 0300 	mov.w	r3, #0
 80020a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020ac:	4659      	mov	r1, fp
 80020ae:	018b      	lsls	r3, r1, #6
 80020b0:	4651      	mov	r1, sl
 80020b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020b6:	4651      	mov	r1, sl
 80020b8:	018a      	lsls	r2, r1, #6
 80020ba:	4651      	mov	r1, sl
 80020bc:	ebb2 0801 	subs.w	r8, r2, r1
 80020c0:	4659      	mov	r1, fp
 80020c2:	eb63 0901 	sbc.w	r9, r3, r1
 80020c6:	f04f 0200 	mov.w	r2, #0
 80020ca:	f04f 0300 	mov.w	r3, #0
 80020ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020da:	4690      	mov	r8, r2
 80020dc:	4699      	mov	r9, r3
 80020de:	4623      	mov	r3, r4
 80020e0:	eb18 0303 	adds.w	r3, r8, r3
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	462b      	mov	r3, r5
 80020e8:	eb49 0303 	adc.w	r3, r9, r3
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	f04f 0200 	mov.w	r2, #0
 80020f2:	f04f 0300 	mov.w	r3, #0
 80020f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020fa:	4629      	mov	r1, r5
 80020fc:	024b      	lsls	r3, r1, #9
 80020fe:	4621      	mov	r1, r4
 8002100:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002104:	4621      	mov	r1, r4
 8002106:	024a      	lsls	r2, r1, #9
 8002108:	4610      	mov	r0, r2
 800210a:	4619      	mov	r1, r3
 800210c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800210e:	2200      	movs	r2, #0
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
 8002112:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002114:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002118:	f7fe f8b2 	bl	8000280 <__aeabi_uldivmod>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4613      	mov	r3, r2
 8002122:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002124:	e058      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002126:	4b38      	ldr	r3, [pc, #224]	; (8002208 <HAL_RCC_GetSysClockFreq+0x200>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	099b      	lsrs	r3, r3, #6
 800212c:	2200      	movs	r2, #0
 800212e:	4618      	mov	r0, r3
 8002130:	4611      	mov	r1, r2
 8002132:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002136:	623b      	str	r3, [r7, #32]
 8002138:	2300      	movs	r3, #0
 800213a:	627b      	str	r3, [r7, #36]	; 0x24
 800213c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002140:	4642      	mov	r2, r8
 8002142:	464b      	mov	r3, r9
 8002144:	f04f 0000 	mov.w	r0, #0
 8002148:	f04f 0100 	mov.w	r1, #0
 800214c:	0159      	lsls	r1, r3, #5
 800214e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002152:	0150      	lsls	r0, r2, #5
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4641      	mov	r1, r8
 800215a:	ebb2 0a01 	subs.w	sl, r2, r1
 800215e:	4649      	mov	r1, r9
 8002160:	eb63 0b01 	sbc.w	fp, r3, r1
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	f04f 0300 	mov.w	r3, #0
 800216c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002170:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002174:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002178:	ebb2 040a 	subs.w	r4, r2, sl
 800217c:	eb63 050b 	sbc.w	r5, r3, fp
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	00eb      	lsls	r3, r5, #3
 800218a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800218e:	00e2      	lsls	r2, r4, #3
 8002190:	4614      	mov	r4, r2
 8002192:	461d      	mov	r5, r3
 8002194:	4643      	mov	r3, r8
 8002196:	18e3      	adds	r3, r4, r3
 8002198:	603b      	str	r3, [r7, #0]
 800219a:	464b      	mov	r3, r9
 800219c:	eb45 0303 	adc.w	r3, r5, r3
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	f04f 0300 	mov.w	r3, #0
 80021aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ae:	4629      	mov	r1, r5
 80021b0:	028b      	lsls	r3, r1, #10
 80021b2:	4621      	mov	r1, r4
 80021b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021b8:	4621      	mov	r1, r4
 80021ba:	028a      	lsls	r2, r1, #10
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021c2:	2200      	movs	r2, #0
 80021c4:	61bb      	str	r3, [r7, #24]
 80021c6:	61fa      	str	r2, [r7, #28]
 80021c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021cc:	f7fe f858 	bl	8000280 <__aeabi_uldivmod>
 80021d0:	4602      	mov	r2, r0
 80021d2:	460b      	mov	r3, r1
 80021d4:	4613      	mov	r3, r2
 80021d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_RCC_GetSysClockFreq+0x200>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	0c1b      	lsrs	r3, r3, #16
 80021de:	f003 0303 	and.w	r3, r3, #3
 80021e2:	3301      	adds	r3, #1
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80021e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80021ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021f2:	e002      	b.n	80021fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_RCC_GetSysClockFreq+0x204>)
 80021f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80021f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3750      	adds	r7, #80	; 0x50
 8002200:	46bd      	mov	sp, r7
 8002202:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	00f42400 	.word	0x00f42400
 8002210:	007a1200 	.word	0x007a1200

08002214 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002218:	4b03      	ldr	r3, [pc, #12]	; (8002228 <HAL_RCC_GetHCLKFreq+0x14>)
 800221a:	681b      	ldr	r3, [r3, #0]
}
 800221c:	4618      	mov	r0, r3
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000000 	.word	0x20000000

0800222c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002230:	f7ff fff0 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	0a9b      	lsrs	r3, r3, #10
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	080044ac 	.word	0x080044ac

08002254 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002258:	f7ff ffdc 	bl	8002214 <HAL_RCC_GetHCLKFreq>
 800225c:	4602      	mov	r2, r0
 800225e:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	0b5b      	lsrs	r3, r3, #13
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	4903      	ldr	r1, [pc, #12]	; (8002278 <HAL_RCC_GetPCLK2Freq+0x24>)
 800226a:	5ccb      	ldrb	r3, [r1, r3]
 800226c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002270:	4618      	mov	r0, r3
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40023800 	.word	0x40023800
 8002278:	080044ac 	.word	0x080044ac

0800227c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d101      	bne.n	800228e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e07b      	b.n	8002386 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002292:	2b00      	cmp	r3, #0
 8002294:	d108      	bne.n	80022a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800229e:	d009      	beq.n	80022b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	61da      	str	r2, [r3, #28]
 80022a6:	e005      	b.n	80022b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f7fe fe2c 	bl	8000f2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2202      	movs	r2, #2
 80022d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80022fc:	431a      	orrs	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002306:	431a      	orrs	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	691b      	ldr	r3, [r3, #16]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	431a      	orrs	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	f003 0301 	and.w	r3, r3, #1
 800231a:	431a      	orrs	r2, r3
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	699b      	ldr	r3, [r3, #24]
 8002320:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002324:	431a      	orrs	r2, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	69db      	ldr	r3, [r3, #28]
 800232a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800232e:	431a      	orrs	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	ea42 0103 	orr.w	r1, r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002340:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	0c1b      	lsrs	r3, r3, #16
 8002352:	f003 0104 	and.w	r1, r3, #4
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235a:	f003 0210 	and.w	r2, r3, #16
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69da      	ldr	r2, [r3, #28]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002374:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b088      	sub	sp, #32
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	603b      	str	r3, [r7, #0]
 800239a:	4613      	mov	r3, r2
 800239c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_SPI_Transmit+0x22>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e126      	b.n	80025fe <HAL_SPI_Transmit+0x270>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023b8:	f7fe ffea 	bl	8001390 <HAL_GetTick>
 80023bc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80023be:	88fb      	ldrh	r3, [r7, #6]
 80023c0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d002      	beq.n	80023d4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80023ce:	2302      	movs	r3, #2
 80023d0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023d2:	e10b      	b.n	80025ec <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <HAL_SPI_Transmit+0x52>
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80023e4:	e102      	b.n	80025ec <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2203      	movs	r2, #3
 80023ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	88fa      	ldrh	r2, [r7, #6]
 80023fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	88fa      	ldrh	r2, [r7, #6]
 8002404:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2200      	movs	r2, #0
 8002410:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2200      	movs	r2, #0
 8002422:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800242c:	d10f      	bne.n	800244e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800243c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800244c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002458:	2b40      	cmp	r3, #64	; 0x40
 800245a:	d007      	beq.n	800246c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800246a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002474:	d14b      	bne.n	800250e <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d002      	beq.n	8002484 <HAL_SPI_Transmit+0xf6>
 800247e:	8afb      	ldrh	r3, [r7, #22]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d13e      	bne.n	8002502 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002488:	881a      	ldrh	r2, [r3, #0]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002494:	1c9a      	adds	r2, r3, #2
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800249e:	b29b      	uxth	r3, r3
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80024a8:	e02b      	b.n	8002502 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d112      	bne.n	80024de <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024bc:	881a      	ldrh	r2, [r3, #0]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	1c9a      	adds	r2, r3, #2
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	3b01      	subs	r3, #1
 80024d6:	b29a      	uxth	r2, r3
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	86da      	strh	r2, [r3, #54]	; 0x36
 80024dc:	e011      	b.n	8002502 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024de:	f7fe ff57 	bl	8001390 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d803      	bhi.n	80024f6 <HAL_SPI_Transmit+0x168>
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024f4:	d102      	bne.n	80024fc <HAL_SPI_Transmit+0x16e>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d102      	bne.n	8002502 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002500:	e074      	b.n	80025ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002506:	b29b      	uxth	r3, r3
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1ce      	bne.n	80024aa <HAL_SPI_Transmit+0x11c>
 800250c:	e04c      	b.n	80025a8 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <HAL_SPI_Transmit+0x18e>
 8002516:	8afb      	ldrh	r3, [r7, #22]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d140      	bne.n	800259e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	330c      	adds	r3, #12
 8002526:	7812      	ldrb	r2, [r2, #0]
 8002528:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002538:	b29b      	uxth	r3, r3
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002542:	e02c      	b.n	800259e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d113      	bne.n	800257a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	330c      	adds	r3, #12
 800255c:	7812      	ldrb	r2, [r2, #0]
 800255e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002564:	1c5a      	adds	r2, r3, #1
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800256e:	b29b      	uxth	r3, r3
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	86da      	strh	r2, [r3, #54]	; 0x36
 8002578:	e011      	b.n	800259e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800257a:	f7fe ff09 	bl	8001390 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	69bb      	ldr	r3, [r7, #24]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d803      	bhi.n	8002592 <HAL_SPI_Transmit+0x204>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002590:	d102      	bne.n	8002598 <HAL_SPI_Transmit+0x20a>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800259c:	e026      	b.n	80025ec <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1cd      	bne.n	8002544 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	6839      	ldr	r1, [r7, #0]
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f000 fcdd 	bl	8002f6c <SPI_EndRxTxTransaction>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d002      	beq.n	80025be <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2220      	movs	r2, #32
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d10a      	bne.n	80025dc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	77fb      	strb	r3, [r7, #31]
 80025e8:	e000      	b.n	80025ec <HAL_SPI_Transmit+0x25e>
  }

error:
 80025ea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80025fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3720      	adds	r7, #32
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b088      	sub	sp, #32
 800260a:	af02      	add	r7, sp, #8
 800260c:	60f8      	str	r0, [r7, #12]
 800260e:	60b9      	str	r1, [r7, #8]
 8002610:	603b      	str	r3, [r7, #0]
 8002612:	4613      	mov	r3, r2
 8002614:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002622:	d112      	bne.n	800264a <HAL_SPI_Receive+0x44>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10e      	bne.n	800264a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2204      	movs	r2, #4
 8002630:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002634:	88fa      	ldrh	r2, [r7, #6]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	4613      	mov	r3, r2
 800263c:	68ba      	ldr	r2, [r7, #8]
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f000 f8f1 	bl	8002828 <HAL_SPI_TransmitReceive>
 8002646:	4603      	mov	r3, r0
 8002648:	e0ea      	b.n	8002820 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_SPI_Receive+0x52>
 8002654:	2302      	movs	r3, #2
 8002656:	e0e3      	b.n	8002820 <HAL_SPI_Receive+0x21a>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002660:	f7fe fe96 	bl	8001390 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b01      	cmp	r3, #1
 8002670:	d002      	beq.n	8002678 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002672:	2302      	movs	r3, #2
 8002674:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002676:	e0ca      	b.n	800280e <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_SPI_Receive+0x7e>
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d102      	bne.n	800268a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002688:	e0c1      	b.n	800280e <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2204      	movs	r2, #4
 800268e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	88fa      	ldrh	r2, [r7, #6]
 80026a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	88fa      	ldrh	r2, [r7, #6]
 80026a8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2200      	movs	r2, #0
 80026c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d0:	d10f      	bne.n	80026f2 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026f0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026fc:	2b40      	cmp	r3, #64	; 0x40
 80026fe:	d007      	beq.n	8002710 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800270e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d162      	bne.n	80027de <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002718:	e02e      	b.n	8002778 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	f003 0301 	and.w	r3, r3, #1
 8002724:	2b01      	cmp	r3, #1
 8002726:	d115      	bne.n	8002754 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f103 020c 	add.w	r2, r3, #12
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273e:	1c5a      	adds	r2, r3, #1
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002748:	b29b      	uxth	r3, r3
 800274a:	3b01      	subs	r3, #1
 800274c:	b29a      	uxth	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002752:	e011      	b.n	8002778 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002754:	f7fe fe1c 	bl	8001390 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d803      	bhi.n	800276c <HAL_SPI_Receive+0x166>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800276a:	d102      	bne.n	8002772 <HAL_SPI_Receive+0x16c>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d102      	bne.n	8002778 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002776:	e04a      	b.n	800280e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800277c:	b29b      	uxth	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1cb      	bne.n	800271a <HAL_SPI_Receive+0x114>
 8002782:	e031      	b.n	80027e8 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d113      	bne.n	80027ba <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	b292      	uxth	r2, r2
 800279e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	1c9a      	adds	r2, r3, #2
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	3b01      	subs	r3, #1
 80027b2:	b29a      	uxth	r2, r3
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80027b8:	e011      	b.n	80027de <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027ba:	f7fe fde9 	bl	8001390 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	683a      	ldr	r2, [r7, #0]
 80027c6:	429a      	cmp	r2, r3
 80027c8:	d803      	bhi.n	80027d2 <HAL_SPI_Receive+0x1cc>
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027d0:	d102      	bne.n	80027d8 <HAL_SPI_Receive+0x1d2>
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80027dc:	e017      	b.n	800280e <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027e2:	b29b      	uxth	r3, r3
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1cd      	bne.n	8002784 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	6839      	ldr	r1, [r7, #0]
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 fb57 	bl	8002ea0 <SPI_EndRxTransaction>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2220      	movs	r2, #32
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	75fb      	strb	r3, [r7, #23]
 800280a:	e000      	b.n	800280e <HAL_SPI_Receive+0x208>
  }

error :
 800280c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2200      	movs	r2, #0
 800281a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800281e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08c      	sub	sp, #48	; 0x30
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
 8002834:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002836:	2301      	movs	r3, #1
 8002838:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_SPI_TransmitReceive+0x26>
 800284a:	2302      	movs	r3, #2
 800284c:	e18a      	b.n	8002b64 <HAL_SPI_TransmitReceive+0x33c>
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002856:	f7fe fd9b 	bl	8001390 <HAL_GetTick>
 800285a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800286c:	887b      	ldrh	r3, [r7, #2]
 800286e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002870:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002874:	2b01      	cmp	r3, #1
 8002876:	d00f      	beq.n	8002898 <HAL_SPI_TransmitReceive+0x70>
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800287e:	d107      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d103      	bne.n	8002890 <HAL_SPI_TransmitReceive+0x68>
 8002888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800288c:	2b04      	cmp	r3, #4
 800288e:	d003      	beq.n	8002898 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002890:	2302      	movs	r3, #2
 8002892:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002896:	e15b      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d005      	beq.n	80028aa <HAL_SPI_TransmitReceive+0x82>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_SPI_TransmitReceive+0x82>
 80028a4:	887b      	ldrh	r3, [r7, #2]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d103      	bne.n	80028b2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028b0:	e14e      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b04      	cmp	r3, #4
 80028bc:	d003      	beq.n	80028c6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2205      	movs	r2, #5
 80028c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2200      	movs	r2, #0
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	887a      	ldrh	r2, [r7, #2]
 80028d6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	887a      	ldrh	r2, [r7, #2]
 80028dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	68ba      	ldr	r2, [r7, #8]
 80028e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	887a      	ldrh	r2, [r7, #2]
 80028e8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	887a      	ldrh	r2, [r7, #2]
 80028ee:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2200      	movs	r2, #0
 80028fa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002906:	2b40      	cmp	r3, #64	; 0x40
 8002908:	d007      	beq.n	800291a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002918:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002922:	d178      	bne.n	8002a16 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d002      	beq.n	8002932 <HAL_SPI_TransmitReceive+0x10a>
 800292c:	8b7b      	ldrh	r3, [r7, #26]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d166      	bne.n	8002a00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	881a      	ldrh	r2, [r3, #0]
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	1c9a      	adds	r2, r3, #2
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002956:	e053      	b.n	8002a00 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d11b      	bne.n	800299e <HAL_SPI_TransmitReceive+0x176>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d016      	beq.n	800299e <HAL_SPI_TransmitReceive+0x176>
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	2b01      	cmp	r3, #1
 8002974:	d113      	bne.n	800299e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	881a      	ldrh	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	1c9a      	adds	r2, r3, #2
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800299a:	2300      	movs	r3, #0
 800299c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	689b      	ldr	r3, [r3, #8]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d119      	bne.n	80029e0 <HAL_SPI_TransmitReceive+0x1b8>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b0:	b29b      	uxth	r3, r3
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d014      	beq.n	80029e0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	68da      	ldr	r2, [r3, #12]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c0:	b292      	uxth	r2, r2
 80029c2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	1c9a      	adds	r2, r3, #2
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	3b01      	subs	r3, #1
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029dc:	2301      	movs	r3, #1
 80029de:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029e0:	f7fe fcd6 	bl	8001390 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d807      	bhi.n	8002a00 <HAL_SPI_TransmitReceive+0x1d8>
 80029f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f6:	d003      	beq.n	8002a00 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029fe:	e0a7      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1a6      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x130>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1a1      	bne.n	8002958 <HAL_SPI_TransmitReceive+0x130>
 8002a14:	e07c      	b.n	8002b10 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_SPI_TransmitReceive+0x1fc>
 8002a1e:	8b7b      	ldrh	r3, [r7, #26]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d16b      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	330c      	adds	r3, #12
 8002a2e:	7812      	ldrb	r2, [r2, #0]
 8002a30:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	1c5a      	adds	r2, r3, #1
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a4a:	e057      	b.n	8002afc <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d11c      	bne.n	8002a94 <HAL_SPI_TransmitReceive+0x26c>
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d017      	beq.n	8002a94 <HAL_SPI_TransmitReceive+0x26c>
 8002a64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d114      	bne.n	8002a94 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	330c      	adds	r3, #12
 8002a74:	7812      	ldrb	r2, [r2, #0]
 8002a76:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0301 	and.w	r3, r3, #1
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d119      	bne.n	8002ad6 <HAL_SPI_TransmitReceive+0x2ae>
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d014      	beq.n	8002ad6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ab6:	b2d2      	uxtb	r2, r2
 8002ab8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	1c5a      	adds	r2, r3, #1
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	3b01      	subs	r3, #1
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ad6:	f7fe fc5b 	bl	8001390 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d803      	bhi.n	8002aee <HAL_SPI_TransmitReceive+0x2c6>
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002aec:	d102      	bne.n	8002af4 <HAL_SPI_TransmitReceive+0x2cc>
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d103      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002afa:	e029      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1a2      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x224>
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d19d      	bne.n	8002a4c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b12:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b14:	68f8      	ldr	r0, [r7, #12]
 8002b16:	f000 fa29 	bl	8002f6c <SPI_EndRxTxTransaction>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d006      	beq.n	8002b2e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b2c:	e010      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10b      	bne.n	8002b4e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	e000      	b.n	8002b50 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b60:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3730      	adds	r7, #48	; 0x30
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b088      	sub	sp, #32
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10e      	bne.n	8002bac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d009      	beq.n	8002bac <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
    return;
 8002baa:	e0ce      	b.n	8002d4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002bac:	69bb      	ldr	r3, [r7, #24]
 8002bae:	f003 0302 	and.w	r3, r3, #2
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_SPI_IRQHandler+0x5e>
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d004      	beq.n	8002bca <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
    return;
 8002bc8:	e0bf      	b.n	8002d4a <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d10a      	bne.n	8002bea <HAL_SPI_IRQHandler+0x7e>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	f000 80b0 	beq.w	8002d4a <HAL_SPI_IRQHandler+0x1de>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f003 0320 	and.w	r3, r3, #32
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80aa 	beq.w	8002d4a <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d023      	beq.n	8002c48 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002c06:	b2db      	uxtb	r3, r3
 8002c08:	2b03      	cmp	r3, #3
 8002c0a:	d011      	beq.n	8002c30 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f043 0204 	orr.w	r2, r3, #4
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	617b      	str	r3, [r7, #20]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	e00b      	b.n	8002c48 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002c30:	2300      	movs	r3, #0
 8002c32:	613b      	str	r3, [r7, #16]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	613b      	str	r3, [r7, #16]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]
        return;
 8002c46:	e080      	b.n	8002d4a <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	f003 0320 	and.w	r3, r3, #32
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d014      	beq.n	8002c7c <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c56:	f043 0201 	orr.w	r2, r3, #1
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c78:	601a      	str	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00c      	beq.n	8002ca0 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f043 0208 	orr.w	r2, r3, #8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d04f      	beq.n	8002d48 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002cb6:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d104      	bne.n	8002cd4 <HAL_SPI_IRQHandler+0x168>
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d034      	beq.n	8002d3e <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	685a      	ldr	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0203 	bic.w	r2, r2, #3
 8002ce2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d011      	beq.n	8002d10 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf0:	4a17      	ldr	r2, [pc, #92]	; (8002d50 <HAL_SPI_IRQHandler+0x1e4>)
 8002cf2:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fc66 	bl	80015ca <HAL_DMA_Abort_IT>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d005      	beq.n	8002d10 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d016      	beq.n	8002d46 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d1c:	4a0c      	ldr	r2, [pc, #48]	; (8002d50 <HAL_SPI_IRQHandler+0x1e4>)
 8002d1e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fc50 	bl	80015ca <HAL_DMA_Abort_IT>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d34:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002d3c:	e003      	b.n	8002d46 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f808 	bl	8002d54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002d44:	e000      	b.n	8002d48 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8002d46:	bf00      	nop
    return;
 8002d48:	bf00      	nop
  }
}
 8002d4a:	3720      	adds	r7, #32
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	08002d69 	.word	0x08002d69

08002d54 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	f7ff ffe6 	bl	8002d54 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002d88:	bf00      	nop
 8002d8a:	3710      	adds	r7, #16
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002da0:	f7fe faf6 	bl	8001390 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	683a      	ldr	r2, [r7, #0]
 8002dac:	4413      	add	r3, r2
 8002dae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002db0:	f7fe faee 	bl	8001390 <HAL_GetTick>
 8002db4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002db6:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	015b      	lsls	r3, r3, #5
 8002dbc:	0d1b      	lsrs	r3, r3, #20
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	fb02 f303 	mul.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002dc6:	e054      	b.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002dce:	d050      	beq.n	8002e72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002dd0:	f7fe fade 	bl	8001390 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	69fa      	ldr	r2, [r7, #28]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	d902      	bls.n	8002de6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d13d      	bne.n	8002e62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685a      	ldr	r2, [r3, #4]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002df4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002dfe:	d111      	bne.n	8002e24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e08:	d004      	beq.n	8002e14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d107      	bne.n	8002e24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e2c:	d10f      	bne.n	8002e4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002e4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e017      	b.n	8002e92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d101      	bne.n	8002e6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	bf0c      	ite	eq
 8002e82:	2301      	moveq	r3, #1
 8002e84:	2300      	movne	r3, #0
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	461a      	mov	r2, r3
 8002e8a:	79fb      	ldrb	r3, [r7, #7]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	d19b      	bne.n	8002dc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3720      	adds	r7, #32
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	20000000 	.word	0x20000000

08002ea0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b086      	sub	sp, #24
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002eb4:	d111      	bne.n	8002eda <SPI_EndRxTransaction+0x3a>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ebe:	d004      	beq.n	8002eca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ec8:	d107      	bne.n	8002eda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee2:	d12a      	bne.n	8002f3a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eec:	d012      	beq.n	8002f14 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7ff ff49 	bl	8002d90 <SPI_WaitFlagStateUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d02d      	beq.n	8002f60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f043 0220 	orr.w	r2, r3, #32
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e026      	b.n	8002f62 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	2101      	movs	r1, #1
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f7ff ff36 	bl	8002d90 <SPI_WaitFlagStateUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d01a      	beq.n	8002f60 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e013      	b.n	8002f62 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2101      	movs	r1, #1
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7ff ff23 	bl	8002d90 <SPI_WaitFlagStateUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d007      	beq.n	8002f60 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f54:	f043 0220 	orr.w	r2, r3, #32
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e000      	b.n	8002f62 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3710      	adds	r7, #16
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
	...

08002f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f78:	4b1b      	ldr	r3, [pc, #108]	; (8002fe8 <SPI_EndRxTxTransaction+0x7c>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1b      	ldr	r2, [pc, #108]	; (8002fec <SPI_EndRxTxTransaction+0x80>)
 8002f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f82:	0d5b      	lsrs	r3, r3, #21
 8002f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f88:	fb02 f303 	mul.w	r3, r2, r3
 8002f8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f96:	d112      	bne.n	8002fbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2180      	movs	r1, #128	; 0x80
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f7ff fef4 	bl	8002d90 <SPI_WaitFlagStateUntilTimeout>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d016      	beq.n	8002fdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fb2:	f043 0220 	orr.w	r2, r3, #32
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e00f      	b.n	8002fde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd4:	2b80      	cmp	r3, #128	; 0x80
 8002fd6:	d0f2      	beq.n	8002fbe <SPI_EndRxTxTransaction+0x52>
 8002fd8:	e000      	b.n	8002fdc <SPI_EndRxTxTransaction+0x70>
        break;
 8002fda:	bf00      	nop
  }

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	165e9f81 	.word	0x165e9f81

08002ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e03f      	b.n	8003082 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d106      	bne.n	800301c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f7fd fff8 	bl	800100c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2224      	movs	r2, #36	; 0x24
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	68da      	ldr	r2, [r3, #12]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f829 	bl	800308c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695a      	ldr	r2, [r3, #20]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800308c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003090:	b0c0      	sub	sp, #256	; 0x100
 8003092:	af00      	add	r7, sp, #0
 8003094:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80030a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030a8:	68d9      	ldr	r1, [r3, #12]
 80030aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	ea40 0301 	orr.w	r3, r0, r1
 80030b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80030b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c0:	691b      	ldr	r3, [r3, #16]
 80030c2:	431a      	orrs	r2, r3
 80030c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80030d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80030e4:	f021 010c 	bic.w	r1, r1, #12
 80030e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80030f2:	430b      	orrs	r3, r1
 80030f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003106:	6999      	ldr	r1, [r3, #24]
 8003108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	ea40 0301 	orr.w	r3, r0, r1
 8003112:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b8f      	ldr	r3, [pc, #572]	; (8003358 <UART_SetConfig+0x2cc>)
 800311c:	429a      	cmp	r2, r3
 800311e:	d005      	beq.n	800312c <UART_SetConfig+0xa0>
 8003120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	4b8d      	ldr	r3, [pc, #564]	; (800335c <UART_SetConfig+0x2d0>)
 8003128:	429a      	cmp	r2, r3
 800312a:	d104      	bne.n	8003136 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7ff f892 	bl	8002254 <HAL_RCC_GetPCLK2Freq>
 8003130:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003134:	e003      	b.n	800313e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003136:	f7ff f879 	bl	800222c <HAL_RCC_GetPCLK1Freq>
 800313a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800313e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003142:	69db      	ldr	r3, [r3, #28]
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003148:	f040 810c 	bne.w	8003364 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800314c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003150:	2200      	movs	r2, #0
 8003152:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003156:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800315a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800315e:	4622      	mov	r2, r4
 8003160:	462b      	mov	r3, r5
 8003162:	1891      	adds	r1, r2, r2
 8003164:	65b9      	str	r1, [r7, #88]	; 0x58
 8003166:	415b      	adcs	r3, r3
 8003168:	65fb      	str	r3, [r7, #92]	; 0x5c
 800316a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800316e:	4621      	mov	r1, r4
 8003170:	eb12 0801 	adds.w	r8, r2, r1
 8003174:	4629      	mov	r1, r5
 8003176:	eb43 0901 	adc.w	r9, r3, r1
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800318a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800318e:	4690      	mov	r8, r2
 8003190:	4699      	mov	r9, r3
 8003192:	4623      	mov	r3, r4
 8003194:	eb18 0303 	adds.w	r3, r8, r3
 8003198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800319c:	462b      	mov	r3, r5
 800319e:	eb49 0303 	adc.w	r3, r9, r3
 80031a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80031a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80031b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80031b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80031ba:	460b      	mov	r3, r1
 80031bc:	18db      	adds	r3, r3, r3
 80031be:	653b      	str	r3, [r7, #80]	; 0x50
 80031c0:	4613      	mov	r3, r2
 80031c2:	eb42 0303 	adc.w	r3, r2, r3
 80031c6:	657b      	str	r3, [r7, #84]	; 0x54
 80031c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80031cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80031d0:	f7fd f856 	bl	8000280 <__aeabi_uldivmod>
 80031d4:	4602      	mov	r2, r0
 80031d6:	460b      	mov	r3, r1
 80031d8:	4b61      	ldr	r3, [pc, #388]	; (8003360 <UART_SetConfig+0x2d4>)
 80031da:	fba3 2302 	umull	r2, r3, r3, r2
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	011c      	lsls	r4, r3, #4
 80031e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031e6:	2200      	movs	r2, #0
 80031e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80031f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80031f4:	4642      	mov	r2, r8
 80031f6:	464b      	mov	r3, r9
 80031f8:	1891      	adds	r1, r2, r2
 80031fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80031fc:	415b      	adcs	r3, r3
 80031fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003200:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003204:	4641      	mov	r1, r8
 8003206:	eb12 0a01 	adds.w	sl, r2, r1
 800320a:	4649      	mov	r1, r9
 800320c:	eb43 0b01 	adc.w	fp, r3, r1
 8003210:	f04f 0200 	mov.w	r2, #0
 8003214:	f04f 0300 	mov.w	r3, #0
 8003218:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800321c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003224:	4692      	mov	sl, r2
 8003226:	469b      	mov	fp, r3
 8003228:	4643      	mov	r3, r8
 800322a:	eb1a 0303 	adds.w	r3, sl, r3
 800322e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003232:	464b      	mov	r3, r9
 8003234:	eb4b 0303 	adc.w	r3, fp, r3
 8003238:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800323c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003248:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800324c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003250:	460b      	mov	r3, r1
 8003252:	18db      	adds	r3, r3, r3
 8003254:	643b      	str	r3, [r7, #64]	; 0x40
 8003256:	4613      	mov	r3, r2
 8003258:	eb42 0303 	adc.w	r3, r2, r3
 800325c:	647b      	str	r3, [r7, #68]	; 0x44
 800325e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003262:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003266:	f7fd f80b 	bl	8000280 <__aeabi_uldivmod>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4611      	mov	r1, r2
 8003270:	4b3b      	ldr	r3, [pc, #236]	; (8003360 <UART_SetConfig+0x2d4>)
 8003272:	fba3 2301 	umull	r2, r3, r3, r1
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	2264      	movs	r2, #100	; 0x64
 800327a:	fb02 f303 	mul.w	r3, r2, r3
 800327e:	1acb      	subs	r3, r1, r3
 8003280:	00db      	lsls	r3, r3, #3
 8003282:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <UART_SetConfig+0x2d4>)
 8003288:	fba3 2302 	umull	r2, r3, r3, r2
 800328c:	095b      	lsrs	r3, r3, #5
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003294:	441c      	add	r4, r3
 8003296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80032a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80032a8:	4642      	mov	r2, r8
 80032aa:	464b      	mov	r3, r9
 80032ac:	1891      	adds	r1, r2, r2
 80032ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80032b0:	415b      	adcs	r3, r3
 80032b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80032b8:	4641      	mov	r1, r8
 80032ba:	1851      	adds	r1, r2, r1
 80032bc:	6339      	str	r1, [r7, #48]	; 0x30
 80032be:	4649      	mov	r1, r9
 80032c0:	414b      	adcs	r3, r1
 80032c2:	637b      	str	r3, [r7, #52]	; 0x34
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80032d0:	4659      	mov	r1, fp
 80032d2:	00cb      	lsls	r3, r1, #3
 80032d4:	4651      	mov	r1, sl
 80032d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032da:	4651      	mov	r1, sl
 80032dc:	00ca      	lsls	r2, r1, #3
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	4642      	mov	r2, r8
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032ec:	464b      	mov	r3, r9
 80032ee:	460a      	mov	r2, r1
 80032f0:	eb42 0303 	adc.w	r3, r2, r3
 80032f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003304:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003308:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800330c:	460b      	mov	r3, r1
 800330e:	18db      	adds	r3, r3, r3
 8003310:	62bb      	str	r3, [r7, #40]	; 0x28
 8003312:	4613      	mov	r3, r2
 8003314:	eb42 0303 	adc.w	r3, r2, r3
 8003318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800331a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800331e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003322:	f7fc ffad 	bl	8000280 <__aeabi_uldivmod>
 8003326:	4602      	mov	r2, r0
 8003328:	460b      	mov	r3, r1
 800332a:	4b0d      	ldr	r3, [pc, #52]	; (8003360 <UART_SetConfig+0x2d4>)
 800332c:	fba3 1302 	umull	r1, r3, r3, r2
 8003330:	095b      	lsrs	r3, r3, #5
 8003332:	2164      	movs	r1, #100	; 0x64
 8003334:	fb01 f303 	mul.w	r3, r1, r3
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	3332      	adds	r3, #50	; 0x32
 800333e:	4a08      	ldr	r2, [pc, #32]	; (8003360 <UART_SetConfig+0x2d4>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	095b      	lsrs	r3, r3, #5
 8003346:	f003 0207 	and.w	r2, r3, #7
 800334a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4422      	add	r2, r4
 8003352:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003354:	e106      	b.n	8003564 <UART_SetConfig+0x4d8>
 8003356:	bf00      	nop
 8003358:	40011000 	.word	0x40011000
 800335c:	40011400 	.word	0x40011400
 8003360:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003368:	2200      	movs	r2, #0
 800336a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800336e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003372:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003376:	4642      	mov	r2, r8
 8003378:	464b      	mov	r3, r9
 800337a:	1891      	adds	r1, r2, r2
 800337c:	6239      	str	r1, [r7, #32]
 800337e:	415b      	adcs	r3, r3
 8003380:	627b      	str	r3, [r7, #36]	; 0x24
 8003382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003386:	4641      	mov	r1, r8
 8003388:	1854      	adds	r4, r2, r1
 800338a:	4649      	mov	r1, r9
 800338c:	eb43 0501 	adc.w	r5, r3, r1
 8003390:	f04f 0200 	mov.w	r2, #0
 8003394:	f04f 0300 	mov.w	r3, #0
 8003398:	00eb      	lsls	r3, r5, #3
 800339a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800339e:	00e2      	lsls	r2, r4, #3
 80033a0:	4614      	mov	r4, r2
 80033a2:	461d      	mov	r5, r3
 80033a4:	4643      	mov	r3, r8
 80033a6:	18e3      	adds	r3, r4, r3
 80033a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033ac:	464b      	mov	r3, r9
 80033ae:	eb45 0303 	adc.w	r3, r5, r3
 80033b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80033c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80033c6:	f04f 0200 	mov.w	r2, #0
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80033d2:	4629      	mov	r1, r5
 80033d4:	008b      	lsls	r3, r1, #2
 80033d6:	4621      	mov	r1, r4
 80033d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80033dc:	4621      	mov	r1, r4
 80033de:	008a      	lsls	r2, r1, #2
 80033e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80033e4:	f7fc ff4c 	bl	8000280 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4b60      	ldr	r3, [pc, #384]	; (8003570 <UART_SetConfig+0x4e4>)
 80033ee:	fba3 2302 	umull	r2, r3, r3, r2
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	011c      	lsls	r4, r3, #4
 80033f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80033fa:	2200      	movs	r2, #0
 80033fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003400:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003404:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003408:	4642      	mov	r2, r8
 800340a:	464b      	mov	r3, r9
 800340c:	1891      	adds	r1, r2, r2
 800340e:	61b9      	str	r1, [r7, #24]
 8003410:	415b      	adcs	r3, r3
 8003412:	61fb      	str	r3, [r7, #28]
 8003414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003418:	4641      	mov	r1, r8
 800341a:	1851      	adds	r1, r2, r1
 800341c:	6139      	str	r1, [r7, #16]
 800341e:	4649      	mov	r1, r9
 8003420:	414b      	adcs	r3, r1
 8003422:	617b      	str	r3, [r7, #20]
 8003424:	f04f 0200 	mov.w	r2, #0
 8003428:	f04f 0300 	mov.w	r3, #0
 800342c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003430:	4659      	mov	r1, fp
 8003432:	00cb      	lsls	r3, r1, #3
 8003434:	4651      	mov	r1, sl
 8003436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800343a:	4651      	mov	r1, sl
 800343c:	00ca      	lsls	r2, r1, #3
 800343e:	4610      	mov	r0, r2
 8003440:	4619      	mov	r1, r3
 8003442:	4603      	mov	r3, r0
 8003444:	4642      	mov	r2, r8
 8003446:	189b      	adds	r3, r3, r2
 8003448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800344c:	464b      	mov	r3, r9
 800344e:	460a      	mov	r2, r1
 8003450:	eb42 0303 	adc.w	r3, r2, r3
 8003454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	67bb      	str	r3, [r7, #120]	; 0x78
 8003462:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003464:	f04f 0200 	mov.w	r2, #0
 8003468:	f04f 0300 	mov.w	r3, #0
 800346c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003470:	4649      	mov	r1, r9
 8003472:	008b      	lsls	r3, r1, #2
 8003474:	4641      	mov	r1, r8
 8003476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800347a:	4641      	mov	r1, r8
 800347c:	008a      	lsls	r2, r1, #2
 800347e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003482:	f7fc fefd 	bl	8000280 <__aeabi_uldivmod>
 8003486:	4602      	mov	r2, r0
 8003488:	460b      	mov	r3, r1
 800348a:	4611      	mov	r1, r2
 800348c:	4b38      	ldr	r3, [pc, #224]	; (8003570 <UART_SetConfig+0x4e4>)
 800348e:	fba3 2301 	umull	r2, r3, r3, r1
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2264      	movs	r2, #100	; 0x64
 8003496:	fb02 f303 	mul.w	r3, r2, r3
 800349a:	1acb      	subs	r3, r1, r3
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	3332      	adds	r3, #50	; 0x32
 80034a0:	4a33      	ldr	r2, [pc, #204]	; (8003570 <UART_SetConfig+0x4e4>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ac:	441c      	add	r4, r3
 80034ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034b2:	2200      	movs	r2, #0
 80034b4:	673b      	str	r3, [r7, #112]	; 0x70
 80034b6:	677a      	str	r2, [r7, #116]	; 0x74
 80034b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80034bc:	4642      	mov	r2, r8
 80034be:	464b      	mov	r3, r9
 80034c0:	1891      	adds	r1, r2, r2
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	415b      	adcs	r3, r3
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034cc:	4641      	mov	r1, r8
 80034ce:	1851      	adds	r1, r2, r1
 80034d0:	6039      	str	r1, [r7, #0]
 80034d2:	4649      	mov	r1, r9
 80034d4:	414b      	adcs	r3, r1
 80034d6:	607b      	str	r3, [r7, #4]
 80034d8:	f04f 0200 	mov.w	r2, #0
 80034dc:	f04f 0300 	mov.w	r3, #0
 80034e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80034e4:	4659      	mov	r1, fp
 80034e6:	00cb      	lsls	r3, r1, #3
 80034e8:	4651      	mov	r1, sl
 80034ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80034ee:	4651      	mov	r1, sl
 80034f0:	00ca      	lsls	r2, r1, #3
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	4603      	mov	r3, r0
 80034f8:	4642      	mov	r2, r8
 80034fa:	189b      	adds	r3, r3, r2
 80034fc:	66bb      	str	r3, [r7, #104]	; 0x68
 80034fe:	464b      	mov	r3, r9
 8003500:	460a      	mov	r2, r1
 8003502:	eb42 0303 	adc.w	r3, r2, r3
 8003506:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	663b      	str	r3, [r7, #96]	; 0x60
 8003512:	667a      	str	r2, [r7, #100]	; 0x64
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003520:	4649      	mov	r1, r9
 8003522:	008b      	lsls	r3, r1, #2
 8003524:	4641      	mov	r1, r8
 8003526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800352a:	4641      	mov	r1, r8
 800352c:	008a      	lsls	r2, r1, #2
 800352e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003532:	f7fc fea5 	bl	8000280 <__aeabi_uldivmod>
 8003536:	4602      	mov	r2, r0
 8003538:	460b      	mov	r3, r1
 800353a:	4b0d      	ldr	r3, [pc, #52]	; (8003570 <UART_SetConfig+0x4e4>)
 800353c:	fba3 1302 	umull	r1, r3, r3, r2
 8003540:	095b      	lsrs	r3, r3, #5
 8003542:	2164      	movs	r1, #100	; 0x64
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	3332      	adds	r3, #50	; 0x32
 800354e:	4a08      	ldr	r2, [pc, #32]	; (8003570 <UART_SetConfig+0x4e4>)
 8003550:	fba2 2303 	umull	r2, r3, r2, r3
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	f003 020f 	and.w	r2, r3, #15
 800355a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4422      	add	r2, r4
 8003562:	609a      	str	r2, [r3, #8]
}
 8003564:	bf00      	nop
 8003566:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800356a:	46bd      	mov	sp, r7
 800356c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003570:	51eb851f 	.word	0x51eb851f

08003574 <std>:
 8003574:	2300      	movs	r3, #0
 8003576:	b510      	push	{r4, lr}
 8003578:	4604      	mov	r4, r0
 800357a:	e9c0 3300 	strd	r3, r3, [r0]
 800357e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003582:	6083      	str	r3, [r0, #8]
 8003584:	8181      	strh	r1, [r0, #12]
 8003586:	6643      	str	r3, [r0, #100]	; 0x64
 8003588:	81c2      	strh	r2, [r0, #14]
 800358a:	6183      	str	r3, [r0, #24]
 800358c:	4619      	mov	r1, r3
 800358e:	2208      	movs	r2, #8
 8003590:	305c      	adds	r0, #92	; 0x5c
 8003592:	f000 f90d 	bl	80037b0 <memset>
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <std+0x38>)
 8003598:	6263      	str	r3, [r4, #36]	; 0x24
 800359a:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <std+0x3c>)
 800359c:	62a3      	str	r3, [r4, #40]	; 0x28
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <std+0x40>)
 80035a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80035a2:	4b05      	ldr	r3, [pc, #20]	; (80035b8 <std+0x44>)
 80035a4:	6224      	str	r4, [r4, #32]
 80035a6:	6323      	str	r3, [r4, #48]	; 0x30
 80035a8:	bd10      	pop	{r4, pc}
 80035aa:	bf00      	nop
 80035ac:	08004075 	.word	0x08004075
 80035b0:	08004097 	.word	0x08004097
 80035b4:	080040cf 	.word	0x080040cf
 80035b8:	080040f3 	.word	0x080040f3

080035bc <stdio_exit_handler>:
 80035bc:	4a02      	ldr	r2, [pc, #8]	; (80035c8 <stdio_exit_handler+0xc>)
 80035be:	4903      	ldr	r1, [pc, #12]	; (80035cc <stdio_exit_handler+0x10>)
 80035c0:	4803      	ldr	r0, [pc, #12]	; (80035d0 <stdio_exit_handler+0x14>)
 80035c2:	f000 b869 	b.w	8003698 <_fwalk_sglue>
 80035c6:	bf00      	nop
 80035c8:	2000000c 	.word	0x2000000c
 80035cc:	0800400d 	.word	0x0800400d
 80035d0:	20000018 	.word	0x20000018

080035d4 <cleanup_stdio>:
 80035d4:	6841      	ldr	r1, [r0, #4]
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <cleanup_stdio+0x34>)
 80035d8:	4299      	cmp	r1, r3
 80035da:	b510      	push	{r4, lr}
 80035dc:	4604      	mov	r4, r0
 80035de:	d001      	beq.n	80035e4 <cleanup_stdio+0x10>
 80035e0:	f000 fd14 	bl	800400c <_fflush_r>
 80035e4:	68a1      	ldr	r1, [r4, #8]
 80035e6:	4b09      	ldr	r3, [pc, #36]	; (800360c <cleanup_stdio+0x38>)
 80035e8:	4299      	cmp	r1, r3
 80035ea:	d002      	beq.n	80035f2 <cleanup_stdio+0x1e>
 80035ec:	4620      	mov	r0, r4
 80035ee:	f000 fd0d 	bl	800400c <_fflush_r>
 80035f2:	68e1      	ldr	r1, [r4, #12]
 80035f4:	4b06      	ldr	r3, [pc, #24]	; (8003610 <cleanup_stdio+0x3c>)
 80035f6:	4299      	cmp	r1, r3
 80035f8:	d004      	beq.n	8003604 <cleanup_stdio+0x30>
 80035fa:	4620      	mov	r0, r4
 80035fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003600:	f000 bd04 	b.w	800400c <_fflush_r>
 8003604:	bd10      	pop	{r4, pc}
 8003606:	bf00      	nop
 8003608:	20000140 	.word	0x20000140
 800360c:	200001a8 	.word	0x200001a8
 8003610:	20000210 	.word	0x20000210

08003614 <global_stdio_init.part.0>:
 8003614:	b510      	push	{r4, lr}
 8003616:	4b0b      	ldr	r3, [pc, #44]	; (8003644 <global_stdio_init.part.0+0x30>)
 8003618:	4c0b      	ldr	r4, [pc, #44]	; (8003648 <global_stdio_init.part.0+0x34>)
 800361a:	4a0c      	ldr	r2, [pc, #48]	; (800364c <global_stdio_init.part.0+0x38>)
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	4620      	mov	r0, r4
 8003620:	2200      	movs	r2, #0
 8003622:	2104      	movs	r1, #4
 8003624:	f7ff ffa6 	bl	8003574 <std>
 8003628:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800362c:	2201      	movs	r2, #1
 800362e:	2109      	movs	r1, #9
 8003630:	f7ff ffa0 	bl	8003574 <std>
 8003634:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003638:	2202      	movs	r2, #2
 800363a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800363e:	2112      	movs	r1, #18
 8003640:	f7ff bf98 	b.w	8003574 <std>
 8003644:	20000278 	.word	0x20000278
 8003648:	20000140 	.word	0x20000140
 800364c:	080035bd 	.word	0x080035bd

08003650 <__sfp_lock_acquire>:
 8003650:	4801      	ldr	r0, [pc, #4]	; (8003658 <__sfp_lock_acquire+0x8>)
 8003652:	f000 b8df 	b.w	8003814 <__retarget_lock_acquire_recursive>
 8003656:	bf00      	nop
 8003658:	2000027d 	.word	0x2000027d

0800365c <__sfp_lock_release>:
 800365c:	4801      	ldr	r0, [pc, #4]	; (8003664 <__sfp_lock_release+0x8>)
 800365e:	f000 b8da 	b.w	8003816 <__retarget_lock_release_recursive>
 8003662:	bf00      	nop
 8003664:	2000027d 	.word	0x2000027d

08003668 <__sinit>:
 8003668:	b510      	push	{r4, lr}
 800366a:	4604      	mov	r4, r0
 800366c:	f7ff fff0 	bl	8003650 <__sfp_lock_acquire>
 8003670:	6a23      	ldr	r3, [r4, #32]
 8003672:	b11b      	cbz	r3, 800367c <__sinit+0x14>
 8003674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003678:	f7ff bff0 	b.w	800365c <__sfp_lock_release>
 800367c:	4b04      	ldr	r3, [pc, #16]	; (8003690 <__sinit+0x28>)
 800367e:	6223      	str	r3, [r4, #32]
 8003680:	4b04      	ldr	r3, [pc, #16]	; (8003694 <__sinit+0x2c>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f5      	bne.n	8003674 <__sinit+0xc>
 8003688:	f7ff ffc4 	bl	8003614 <global_stdio_init.part.0>
 800368c:	e7f2      	b.n	8003674 <__sinit+0xc>
 800368e:	bf00      	nop
 8003690:	080035d5 	.word	0x080035d5
 8003694:	20000278 	.word	0x20000278

08003698 <_fwalk_sglue>:
 8003698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800369c:	4607      	mov	r7, r0
 800369e:	4688      	mov	r8, r1
 80036a0:	4614      	mov	r4, r2
 80036a2:	2600      	movs	r6, #0
 80036a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80036a8:	f1b9 0901 	subs.w	r9, r9, #1
 80036ac:	d505      	bpl.n	80036ba <_fwalk_sglue+0x22>
 80036ae:	6824      	ldr	r4, [r4, #0]
 80036b0:	2c00      	cmp	r4, #0
 80036b2:	d1f7      	bne.n	80036a4 <_fwalk_sglue+0xc>
 80036b4:	4630      	mov	r0, r6
 80036b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036ba:	89ab      	ldrh	r3, [r5, #12]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d907      	bls.n	80036d0 <_fwalk_sglue+0x38>
 80036c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80036c4:	3301      	adds	r3, #1
 80036c6:	d003      	beq.n	80036d0 <_fwalk_sglue+0x38>
 80036c8:	4629      	mov	r1, r5
 80036ca:	4638      	mov	r0, r7
 80036cc:	47c0      	blx	r8
 80036ce:	4306      	orrs	r6, r0
 80036d0:	3568      	adds	r5, #104	; 0x68
 80036d2:	e7e9      	b.n	80036a8 <_fwalk_sglue+0x10>

080036d4 <iprintf>:
 80036d4:	b40f      	push	{r0, r1, r2, r3}
 80036d6:	b507      	push	{r0, r1, r2, lr}
 80036d8:	4906      	ldr	r1, [pc, #24]	; (80036f4 <iprintf+0x20>)
 80036da:	ab04      	add	r3, sp, #16
 80036dc:	6808      	ldr	r0, [r1, #0]
 80036de:	f853 2b04 	ldr.w	r2, [r3], #4
 80036e2:	6881      	ldr	r1, [r0, #8]
 80036e4:	9301      	str	r3, [sp, #4]
 80036e6:	f000 f8c1 	bl	800386c <_vfiprintf_r>
 80036ea:	b003      	add	sp, #12
 80036ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80036f0:	b004      	add	sp, #16
 80036f2:	4770      	bx	lr
 80036f4:	20000064 	.word	0x20000064

080036f8 <_puts_r>:
 80036f8:	6a03      	ldr	r3, [r0, #32]
 80036fa:	b570      	push	{r4, r5, r6, lr}
 80036fc:	6884      	ldr	r4, [r0, #8]
 80036fe:	4605      	mov	r5, r0
 8003700:	460e      	mov	r6, r1
 8003702:	b90b      	cbnz	r3, 8003708 <_puts_r+0x10>
 8003704:	f7ff ffb0 	bl	8003668 <__sinit>
 8003708:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800370a:	07db      	lsls	r3, r3, #31
 800370c:	d405      	bmi.n	800371a <_puts_r+0x22>
 800370e:	89a3      	ldrh	r3, [r4, #12]
 8003710:	0598      	lsls	r0, r3, #22
 8003712:	d402      	bmi.n	800371a <_puts_r+0x22>
 8003714:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003716:	f000 f87d 	bl	8003814 <__retarget_lock_acquire_recursive>
 800371a:	89a3      	ldrh	r3, [r4, #12]
 800371c:	0719      	lsls	r1, r3, #28
 800371e:	d513      	bpl.n	8003748 <_puts_r+0x50>
 8003720:	6923      	ldr	r3, [r4, #16]
 8003722:	b18b      	cbz	r3, 8003748 <_puts_r+0x50>
 8003724:	3e01      	subs	r6, #1
 8003726:	68a3      	ldr	r3, [r4, #8]
 8003728:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800372c:	3b01      	subs	r3, #1
 800372e:	60a3      	str	r3, [r4, #8]
 8003730:	b9e9      	cbnz	r1, 800376e <_puts_r+0x76>
 8003732:	2b00      	cmp	r3, #0
 8003734:	da2e      	bge.n	8003794 <_puts_r+0x9c>
 8003736:	4622      	mov	r2, r4
 8003738:	210a      	movs	r1, #10
 800373a:	4628      	mov	r0, r5
 800373c:	f000 fcdd 	bl	80040fa <__swbuf_r>
 8003740:	3001      	adds	r0, #1
 8003742:	d007      	beq.n	8003754 <_puts_r+0x5c>
 8003744:	250a      	movs	r5, #10
 8003746:	e007      	b.n	8003758 <_puts_r+0x60>
 8003748:	4621      	mov	r1, r4
 800374a:	4628      	mov	r0, r5
 800374c:	f000 fd12 	bl	8004174 <__swsetup_r>
 8003750:	2800      	cmp	r0, #0
 8003752:	d0e7      	beq.n	8003724 <_puts_r+0x2c>
 8003754:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003758:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800375a:	07da      	lsls	r2, r3, #31
 800375c:	d405      	bmi.n	800376a <_puts_r+0x72>
 800375e:	89a3      	ldrh	r3, [r4, #12]
 8003760:	059b      	lsls	r3, r3, #22
 8003762:	d402      	bmi.n	800376a <_puts_r+0x72>
 8003764:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003766:	f000 f856 	bl	8003816 <__retarget_lock_release_recursive>
 800376a:	4628      	mov	r0, r5
 800376c:	bd70      	pop	{r4, r5, r6, pc}
 800376e:	2b00      	cmp	r3, #0
 8003770:	da04      	bge.n	800377c <_puts_r+0x84>
 8003772:	69a2      	ldr	r2, [r4, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	dc06      	bgt.n	8003786 <_puts_r+0x8e>
 8003778:	290a      	cmp	r1, #10
 800377a:	d004      	beq.n	8003786 <_puts_r+0x8e>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	6022      	str	r2, [r4, #0]
 8003782:	7019      	strb	r1, [r3, #0]
 8003784:	e7cf      	b.n	8003726 <_puts_r+0x2e>
 8003786:	4622      	mov	r2, r4
 8003788:	4628      	mov	r0, r5
 800378a:	f000 fcb6 	bl	80040fa <__swbuf_r>
 800378e:	3001      	adds	r0, #1
 8003790:	d1c9      	bne.n	8003726 <_puts_r+0x2e>
 8003792:	e7df      	b.n	8003754 <_puts_r+0x5c>
 8003794:	6823      	ldr	r3, [r4, #0]
 8003796:	250a      	movs	r5, #10
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	6022      	str	r2, [r4, #0]
 800379c:	701d      	strb	r5, [r3, #0]
 800379e:	e7db      	b.n	8003758 <_puts_r+0x60>

080037a0 <puts>:
 80037a0:	4b02      	ldr	r3, [pc, #8]	; (80037ac <puts+0xc>)
 80037a2:	4601      	mov	r1, r0
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	f7ff bfa7 	b.w	80036f8 <_puts_r>
 80037aa:	bf00      	nop
 80037ac:	20000064 	.word	0x20000064

080037b0 <memset>:
 80037b0:	4402      	add	r2, r0
 80037b2:	4603      	mov	r3, r0
 80037b4:	4293      	cmp	r3, r2
 80037b6:	d100      	bne.n	80037ba <memset+0xa>
 80037b8:	4770      	bx	lr
 80037ba:	f803 1b01 	strb.w	r1, [r3], #1
 80037be:	e7f9      	b.n	80037b4 <memset+0x4>

080037c0 <__errno>:
 80037c0:	4b01      	ldr	r3, [pc, #4]	; (80037c8 <__errno+0x8>)
 80037c2:	6818      	ldr	r0, [r3, #0]
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	20000064 	.word	0x20000064

080037cc <__libc_init_array>:
 80037cc:	b570      	push	{r4, r5, r6, lr}
 80037ce:	4d0d      	ldr	r5, [pc, #52]	; (8003804 <__libc_init_array+0x38>)
 80037d0:	4c0d      	ldr	r4, [pc, #52]	; (8003808 <__libc_init_array+0x3c>)
 80037d2:	1b64      	subs	r4, r4, r5
 80037d4:	10a4      	asrs	r4, r4, #2
 80037d6:	2600      	movs	r6, #0
 80037d8:	42a6      	cmp	r6, r4
 80037da:	d109      	bne.n	80037f0 <__libc_init_array+0x24>
 80037dc:	4d0b      	ldr	r5, [pc, #44]	; (800380c <__libc_init_array+0x40>)
 80037de:	4c0c      	ldr	r4, [pc, #48]	; (8003810 <__libc_init_array+0x44>)
 80037e0:	f000 fe46 	bl	8004470 <_init>
 80037e4:	1b64      	subs	r4, r4, r5
 80037e6:	10a4      	asrs	r4, r4, #2
 80037e8:	2600      	movs	r6, #0
 80037ea:	42a6      	cmp	r6, r4
 80037ec:	d105      	bne.n	80037fa <__libc_init_array+0x2e>
 80037ee:	bd70      	pop	{r4, r5, r6, pc}
 80037f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037f4:	4798      	blx	r3
 80037f6:	3601      	adds	r6, #1
 80037f8:	e7ee      	b.n	80037d8 <__libc_init_array+0xc>
 80037fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80037fe:	4798      	blx	r3
 8003800:	3601      	adds	r6, #1
 8003802:	e7f2      	b.n	80037ea <__libc_init_array+0x1e>
 8003804:	080044f0 	.word	0x080044f0
 8003808:	080044f0 	.word	0x080044f0
 800380c:	080044f0 	.word	0x080044f0
 8003810:	080044f4 	.word	0x080044f4

08003814 <__retarget_lock_acquire_recursive>:
 8003814:	4770      	bx	lr

08003816 <__retarget_lock_release_recursive>:
 8003816:	4770      	bx	lr

08003818 <__sfputc_r>:
 8003818:	6893      	ldr	r3, [r2, #8]
 800381a:	3b01      	subs	r3, #1
 800381c:	2b00      	cmp	r3, #0
 800381e:	b410      	push	{r4}
 8003820:	6093      	str	r3, [r2, #8]
 8003822:	da08      	bge.n	8003836 <__sfputc_r+0x1e>
 8003824:	6994      	ldr	r4, [r2, #24]
 8003826:	42a3      	cmp	r3, r4
 8003828:	db01      	blt.n	800382e <__sfputc_r+0x16>
 800382a:	290a      	cmp	r1, #10
 800382c:	d103      	bne.n	8003836 <__sfputc_r+0x1e>
 800382e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003832:	f000 bc62 	b.w	80040fa <__swbuf_r>
 8003836:	6813      	ldr	r3, [r2, #0]
 8003838:	1c58      	adds	r0, r3, #1
 800383a:	6010      	str	r0, [r2, #0]
 800383c:	7019      	strb	r1, [r3, #0]
 800383e:	4608      	mov	r0, r1
 8003840:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003844:	4770      	bx	lr

08003846 <__sfputs_r>:
 8003846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003848:	4606      	mov	r6, r0
 800384a:	460f      	mov	r7, r1
 800384c:	4614      	mov	r4, r2
 800384e:	18d5      	adds	r5, r2, r3
 8003850:	42ac      	cmp	r4, r5
 8003852:	d101      	bne.n	8003858 <__sfputs_r+0x12>
 8003854:	2000      	movs	r0, #0
 8003856:	e007      	b.n	8003868 <__sfputs_r+0x22>
 8003858:	f814 1b01 	ldrb.w	r1, [r4], #1
 800385c:	463a      	mov	r2, r7
 800385e:	4630      	mov	r0, r6
 8003860:	f7ff ffda 	bl	8003818 <__sfputc_r>
 8003864:	1c43      	adds	r3, r0, #1
 8003866:	d1f3      	bne.n	8003850 <__sfputs_r+0xa>
 8003868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800386c <_vfiprintf_r>:
 800386c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003870:	460d      	mov	r5, r1
 8003872:	b09d      	sub	sp, #116	; 0x74
 8003874:	4614      	mov	r4, r2
 8003876:	4698      	mov	r8, r3
 8003878:	4606      	mov	r6, r0
 800387a:	b118      	cbz	r0, 8003884 <_vfiprintf_r+0x18>
 800387c:	6a03      	ldr	r3, [r0, #32]
 800387e:	b90b      	cbnz	r3, 8003884 <_vfiprintf_r+0x18>
 8003880:	f7ff fef2 	bl	8003668 <__sinit>
 8003884:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003886:	07d9      	lsls	r1, r3, #31
 8003888:	d405      	bmi.n	8003896 <_vfiprintf_r+0x2a>
 800388a:	89ab      	ldrh	r3, [r5, #12]
 800388c:	059a      	lsls	r2, r3, #22
 800388e:	d402      	bmi.n	8003896 <_vfiprintf_r+0x2a>
 8003890:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003892:	f7ff ffbf 	bl	8003814 <__retarget_lock_acquire_recursive>
 8003896:	89ab      	ldrh	r3, [r5, #12]
 8003898:	071b      	lsls	r3, r3, #28
 800389a:	d501      	bpl.n	80038a0 <_vfiprintf_r+0x34>
 800389c:	692b      	ldr	r3, [r5, #16]
 800389e:	b99b      	cbnz	r3, 80038c8 <_vfiprintf_r+0x5c>
 80038a0:	4629      	mov	r1, r5
 80038a2:	4630      	mov	r0, r6
 80038a4:	f000 fc66 	bl	8004174 <__swsetup_r>
 80038a8:	b170      	cbz	r0, 80038c8 <_vfiprintf_r+0x5c>
 80038aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80038ac:	07dc      	lsls	r4, r3, #31
 80038ae:	d504      	bpl.n	80038ba <_vfiprintf_r+0x4e>
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80038b4:	b01d      	add	sp, #116	; 0x74
 80038b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ba:	89ab      	ldrh	r3, [r5, #12]
 80038bc:	0598      	lsls	r0, r3, #22
 80038be:	d4f7      	bmi.n	80038b0 <_vfiprintf_r+0x44>
 80038c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80038c2:	f7ff ffa8 	bl	8003816 <__retarget_lock_release_recursive>
 80038c6:	e7f3      	b.n	80038b0 <_vfiprintf_r+0x44>
 80038c8:	2300      	movs	r3, #0
 80038ca:	9309      	str	r3, [sp, #36]	; 0x24
 80038cc:	2320      	movs	r3, #32
 80038ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80038d6:	2330      	movs	r3, #48	; 0x30
 80038d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8003a8c <_vfiprintf_r+0x220>
 80038dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038e0:	f04f 0901 	mov.w	r9, #1
 80038e4:	4623      	mov	r3, r4
 80038e6:	469a      	mov	sl, r3
 80038e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038ec:	b10a      	cbz	r2, 80038f2 <_vfiprintf_r+0x86>
 80038ee:	2a25      	cmp	r2, #37	; 0x25
 80038f0:	d1f9      	bne.n	80038e6 <_vfiprintf_r+0x7a>
 80038f2:	ebba 0b04 	subs.w	fp, sl, r4
 80038f6:	d00b      	beq.n	8003910 <_vfiprintf_r+0xa4>
 80038f8:	465b      	mov	r3, fp
 80038fa:	4622      	mov	r2, r4
 80038fc:	4629      	mov	r1, r5
 80038fe:	4630      	mov	r0, r6
 8003900:	f7ff ffa1 	bl	8003846 <__sfputs_r>
 8003904:	3001      	adds	r0, #1
 8003906:	f000 80a9 	beq.w	8003a5c <_vfiprintf_r+0x1f0>
 800390a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800390c:	445a      	add	r2, fp
 800390e:	9209      	str	r2, [sp, #36]	; 0x24
 8003910:	f89a 3000 	ldrb.w	r3, [sl]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 80a1 	beq.w	8003a5c <_vfiprintf_r+0x1f0>
 800391a:	2300      	movs	r3, #0
 800391c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003920:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003924:	f10a 0a01 	add.w	sl, sl, #1
 8003928:	9304      	str	r3, [sp, #16]
 800392a:	9307      	str	r3, [sp, #28]
 800392c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003930:	931a      	str	r3, [sp, #104]	; 0x68
 8003932:	4654      	mov	r4, sl
 8003934:	2205      	movs	r2, #5
 8003936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800393a:	4854      	ldr	r0, [pc, #336]	; (8003a8c <_vfiprintf_r+0x220>)
 800393c:	f7fc fc50 	bl	80001e0 <memchr>
 8003940:	9a04      	ldr	r2, [sp, #16]
 8003942:	b9d8      	cbnz	r0, 800397c <_vfiprintf_r+0x110>
 8003944:	06d1      	lsls	r1, r2, #27
 8003946:	bf44      	itt	mi
 8003948:	2320      	movmi	r3, #32
 800394a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800394e:	0713      	lsls	r3, r2, #28
 8003950:	bf44      	itt	mi
 8003952:	232b      	movmi	r3, #43	; 0x2b
 8003954:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003958:	f89a 3000 	ldrb.w	r3, [sl]
 800395c:	2b2a      	cmp	r3, #42	; 0x2a
 800395e:	d015      	beq.n	800398c <_vfiprintf_r+0x120>
 8003960:	9a07      	ldr	r2, [sp, #28]
 8003962:	4654      	mov	r4, sl
 8003964:	2000      	movs	r0, #0
 8003966:	f04f 0c0a 	mov.w	ip, #10
 800396a:	4621      	mov	r1, r4
 800396c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003970:	3b30      	subs	r3, #48	; 0x30
 8003972:	2b09      	cmp	r3, #9
 8003974:	d94d      	bls.n	8003a12 <_vfiprintf_r+0x1a6>
 8003976:	b1b0      	cbz	r0, 80039a6 <_vfiprintf_r+0x13a>
 8003978:	9207      	str	r2, [sp, #28]
 800397a:	e014      	b.n	80039a6 <_vfiprintf_r+0x13a>
 800397c:	eba0 0308 	sub.w	r3, r0, r8
 8003980:	fa09 f303 	lsl.w	r3, r9, r3
 8003984:	4313      	orrs	r3, r2
 8003986:	9304      	str	r3, [sp, #16]
 8003988:	46a2      	mov	sl, r4
 800398a:	e7d2      	b.n	8003932 <_vfiprintf_r+0xc6>
 800398c:	9b03      	ldr	r3, [sp, #12]
 800398e:	1d19      	adds	r1, r3, #4
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	9103      	str	r1, [sp, #12]
 8003994:	2b00      	cmp	r3, #0
 8003996:	bfbb      	ittet	lt
 8003998:	425b      	neglt	r3, r3
 800399a:	f042 0202 	orrlt.w	r2, r2, #2
 800399e:	9307      	strge	r3, [sp, #28]
 80039a0:	9307      	strlt	r3, [sp, #28]
 80039a2:	bfb8      	it	lt
 80039a4:	9204      	strlt	r2, [sp, #16]
 80039a6:	7823      	ldrb	r3, [r4, #0]
 80039a8:	2b2e      	cmp	r3, #46	; 0x2e
 80039aa:	d10c      	bne.n	80039c6 <_vfiprintf_r+0x15a>
 80039ac:	7863      	ldrb	r3, [r4, #1]
 80039ae:	2b2a      	cmp	r3, #42	; 0x2a
 80039b0:	d134      	bne.n	8003a1c <_vfiprintf_r+0x1b0>
 80039b2:	9b03      	ldr	r3, [sp, #12]
 80039b4:	1d1a      	adds	r2, r3, #4
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	9203      	str	r2, [sp, #12]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	bfb8      	it	lt
 80039be:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80039c2:	3402      	adds	r4, #2
 80039c4:	9305      	str	r3, [sp, #20]
 80039c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8003a9c <_vfiprintf_r+0x230>
 80039ca:	7821      	ldrb	r1, [r4, #0]
 80039cc:	2203      	movs	r2, #3
 80039ce:	4650      	mov	r0, sl
 80039d0:	f7fc fc06 	bl	80001e0 <memchr>
 80039d4:	b138      	cbz	r0, 80039e6 <_vfiprintf_r+0x17a>
 80039d6:	9b04      	ldr	r3, [sp, #16]
 80039d8:	eba0 000a 	sub.w	r0, r0, sl
 80039dc:	2240      	movs	r2, #64	; 0x40
 80039de:	4082      	lsls	r2, r0
 80039e0:	4313      	orrs	r3, r2
 80039e2:	3401      	adds	r4, #1
 80039e4:	9304      	str	r3, [sp, #16]
 80039e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80039ea:	4829      	ldr	r0, [pc, #164]	; (8003a90 <_vfiprintf_r+0x224>)
 80039ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80039f0:	2206      	movs	r2, #6
 80039f2:	f7fc fbf5 	bl	80001e0 <memchr>
 80039f6:	2800      	cmp	r0, #0
 80039f8:	d03f      	beq.n	8003a7a <_vfiprintf_r+0x20e>
 80039fa:	4b26      	ldr	r3, [pc, #152]	; (8003a94 <_vfiprintf_r+0x228>)
 80039fc:	bb1b      	cbnz	r3, 8003a46 <_vfiprintf_r+0x1da>
 80039fe:	9b03      	ldr	r3, [sp, #12]
 8003a00:	3307      	adds	r3, #7
 8003a02:	f023 0307 	bic.w	r3, r3, #7
 8003a06:	3308      	adds	r3, #8
 8003a08:	9303      	str	r3, [sp, #12]
 8003a0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a0c:	443b      	add	r3, r7
 8003a0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003a10:	e768      	b.n	80038e4 <_vfiprintf_r+0x78>
 8003a12:	fb0c 3202 	mla	r2, ip, r2, r3
 8003a16:	460c      	mov	r4, r1
 8003a18:	2001      	movs	r0, #1
 8003a1a:	e7a6      	b.n	800396a <_vfiprintf_r+0xfe>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	3401      	adds	r4, #1
 8003a20:	9305      	str	r3, [sp, #20]
 8003a22:	4619      	mov	r1, r3
 8003a24:	f04f 0c0a 	mov.w	ip, #10
 8003a28:	4620      	mov	r0, r4
 8003a2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a2e:	3a30      	subs	r2, #48	; 0x30
 8003a30:	2a09      	cmp	r2, #9
 8003a32:	d903      	bls.n	8003a3c <_vfiprintf_r+0x1d0>
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d0c6      	beq.n	80039c6 <_vfiprintf_r+0x15a>
 8003a38:	9105      	str	r1, [sp, #20]
 8003a3a:	e7c4      	b.n	80039c6 <_vfiprintf_r+0x15a>
 8003a3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003a40:	4604      	mov	r4, r0
 8003a42:	2301      	movs	r3, #1
 8003a44:	e7f0      	b.n	8003a28 <_vfiprintf_r+0x1bc>
 8003a46:	ab03      	add	r3, sp, #12
 8003a48:	9300      	str	r3, [sp, #0]
 8003a4a:	462a      	mov	r2, r5
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <_vfiprintf_r+0x22c>)
 8003a4e:	a904      	add	r1, sp, #16
 8003a50:	4630      	mov	r0, r6
 8003a52:	f3af 8000 	nop.w
 8003a56:	4607      	mov	r7, r0
 8003a58:	1c78      	adds	r0, r7, #1
 8003a5a:	d1d6      	bne.n	8003a0a <_vfiprintf_r+0x19e>
 8003a5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003a5e:	07d9      	lsls	r1, r3, #31
 8003a60:	d405      	bmi.n	8003a6e <_vfiprintf_r+0x202>
 8003a62:	89ab      	ldrh	r3, [r5, #12]
 8003a64:	059a      	lsls	r2, r3, #22
 8003a66:	d402      	bmi.n	8003a6e <_vfiprintf_r+0x202>
 8003a68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003a6a:	f7ff fed4 	bl	8003816 <__retarget_lock_release_recursive>
 8003a6e:	89ab      	ldrh	r3, [r5, #12]
 8003a70:	065b      	lsls	r3, r3, #25
 8003a72:	f53f af1d 	bmi.w	80038b0 <_vfiprintf_r+0x44>
 8003a76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a78:	e71c      	b.n	80038b4 <_vfiprintf_r+0x48>
 8003a7a:	ab03      	add	r3, sp, #12
 8003a7c:	9300      	str	r3, [sp, #0]
 8003a7e:	462a      	mov	r2, r5
 8003a80:	4b05      	ldr	r3, [pc, #20]	; (8003a98 <_vfiprintf_r+0x22c>)
 8003a82:	a904      	add	r1, sp, #16
 8003a84:	4630      	mov	r0, r6
 8003a86:	f000 f919 	bl	8003cbc <_printf_i>
 8003a8a:	e7e4      	b.n	8003a56 <_vfiprintf_r+0x1ea>
 8003a8c:	080044b4 	.word	0x080044b4
 8003a90:	080044be 	.word	0x080044be
 8003a94:	00000000 	.word	0x00000000
 8003a98:	08003847 	.word	0x08003847
 8003a9c:	080044ba 	.word	0x080044ba

08003aa0 <sbrk_aligned>:
 8003aa0:	b570      	push	{r4, r5, r6, lr}
 8003aa2:	4e0e      	ldr	r6, [pc, #56]	; (8003adc <sbrk_aligned+0x3c>)
 8003aa4:	460c      	mov	r4, r1
 8003aa6:	6831      	ldr	r1, [r6, #0]
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	b911      	cbnz	r1, 8003ab2 <sbrk_aligned+0x12>
 8003aac:	f000 fc72 	bl	8004394 <_sbrk_r>
 8003ab0:	6030      	str	r0, [r6, #0]
 8003ab2:	4621      	mov	r1, r4
 8003ab4:	4628      	mov	r0, r5
 8003ab6:	f000 fc6d 	bl	8004394 <_sbrk_r>
 8003aba:	1c43      	adds	r3, r0, #1
 8003abc:	d00a      	beq.n	8003ad4 <sbrk_aligned+0x34>
 8003abe:	1cc4      	adds	r4, r0, #3
 8003ac0:	f024 0403 	bic.w	r4, r4, #3
 8003ac4:	42a0      	cmp	r0, r4
 8003ac6:	d007      	beq.n	8003ad8 <sbrk_aligned+0x38>
 8003ac8:	1a21      	subs	r1, r4, r0
 8003aca:	4628      	mov	r0, r5
 8003acc:	f000 fc62 	bl	8004394 <_sbrk_r>
 8003ad0:	3001      	adds	r0, #1
 8003ad2:	d101      	bne.n	8003ad8 <sbrk_aligned+0x38>
 8003ad4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8003ad8:	4620      	mov	r0, r4
 8003ada:	bd70      	pop	{r4, r5, r6, pc}
 8003adc:	20000284 	.word	0x20000284

08003ae0 <_malloc_r>:
 8003ae0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ae4:	1ccd      	adds	r5, r1, #3
 8003ae6:	f025 0503 	bic.w	r5, r5, #3
 8003aea:	3508      	adds	r5, #8
 8003aec:	2d0c      	cmp	r5, #12
 8003aee:	bf38      	it	cc
 8003af0:	250c      	movcc	r5, #12
 8003af2:	2d00      	cmp	r5, #0
 8003af4:	4607      	mov	r7, r0
 8003af6:	db01      	blt.n	8003afc <_malloc_r+0x1c>
 8003af8:	42a9      	cmp	r1, r5
 8003afa:	d905      	bls.n	8003b08 <_malloc_r+0x28>
 8003afc:	230c      	movs	r3, #12
 8003afe:	603b      	str	r3, [r7, #0]
 8003b00:	2600      	movs	r6, #0
 8003b02:	4630      	mov	r0, r6
 8003b04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003bdc <_malloc_r+0xfc>
 8003b0c:	f000 faa6 	bl	800405c <__malloc_lock>
 8003b10:	f8d8 3000 	ldr.w	r3, [r8]
 8003b14:	461c      	mov	r4, r3
 8003b16:	bb5c      	cbnz	r4, 8003b70 <_malloc_r+0x90>
 8003b18:	4629      	mov	r1, r5
 8003b1a:	4638      	mov	r0, r7
 8003b1c:	f7ff ffc0 	bl	8003aa0 <sbrk_aligned>
 8003b20:	1c43      	adds	r3, r0, #1
 8003b22:	4604      	mov	r4, r0
 8003b24:	d155      	bne.n	8003bd2 <_malloc_r+0xf2>
 8003b26:	f8d8 4000 	ldr.w	r4, [r8]
 8003b2a:	4626      	mov	r6, r4
 8003b2c:	2e00      	cmp	r6, #0
 8003b2e:	d145      	bne.n	8003bbc <_malloc_r+0xdc>
 8003b30:	2c00      	cmp	r4, #0
 8003b32:	d048      	beq.n	8003bc6 <_malloc_r+0xe6>
 8003b34:	6823      	ldr	r3, [r4, #0]
 8003b36:	4631      	mov	r1, r6
 8003b38:	4638      	mov	r0, r7
 8003b3a:	eb04 0903 	add.w	r9, r4, r3
 8003b3e:	f000 fc29 	bl	8004394 <_sbrk_r>
 8003b42:	4581      	cmp	r9, r0
 8003b44:	d13f      	bne.n	8003bc6 <_malloc_r+0xe6>
 8003b46:	6821      	ldr	r1, [r4, #0]
 8003b48:	1a6d      	subs	r5, r5, r1
 8003b4a:	4629      	mov	r1, r5
 8003b4c:	4638      	mov	r0, r7
 8003b4e:	f7ff ffa7 	bl	8003aa0 <sbrk_aligned>
 8003b52:	3001      	adds	r0, #1
 8003b54:	d037      	beq.n	8003bc6 <_malloc_r+0xe6>
 8003b56:	6823      	ldr	r3, [r4, #0]
 8003b58:	442b      	add	r3, r5
 8003b5a:	6023      	str	r3, [r4, #0]
 8003b5c:	f8d8 3000 	ldr.w	r3, [r8]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d038      	beq.n	8003bd6 <_malloc_r+0xf6>
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	42a2      	cmp	r2, r4
 8003b68:	d12b      	bne.n	8003bc2 <_malloc_r+0xe2>
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	e00f      	b.n	8003b90 <_malloc_r+0xb0>
 8003b70:	6822      	ldr	r2, [r4, #0]
 8003b72:	1b52      	subs	r2, r2, r5
 8003b74:	d41f      	bmi.n	8003bb6 <_malloc_r+0xd6>
 8003b76:	2a0b      	cmp	r2, #11
 8003b78:	d917      	bls.n	8003baa <_malloc_r+0xca>
 8003b7a:	1961      	adds	r1, r4, r5
 8003b7c:	42a3      	cmp	r3, r4
 8003b7e:	6025      	str	r5, [r4, #0]
 8003b80:	bf18      	it	ne
 8003b82:	6059      	strne	r1, [r3, #4]
 8003b84:	6863      	ldr	r3, [r4, #4]
 8003b86:	bf08      	it	eq
 8003b88:	f8c8 1000 	streq.w	r1, [r8]
 8003b8c:	5162      	str	r2, [r4, r5]
 8003b8e:	604b      	str	r3, [r1, #4]
 8003b90:	4638      	mov	r0, r7
 8003b92:	f104 060b 	add.w	r6, r4, #11
 8003b96:	f000 fa67 	bl	8004068 <__malloc_unlock>
 8003b9a:	f026 0607 	bic.w	r6, r6, #7
 8003b9e:	1d23      	adds	r3, r4, #4
 8003ba0:	1af2      	subs	r2, r6, r3
 8003ba2:	d0ae      	beq.n	8003b02 <_malloc_r+0x22>
 8003ba4:	1b9b      	subs	r3, r3, r6
 8003ba6:	50a3      	str	r3, [r4, r2]
 8003ba8:	e7ab      	b.n	8003b02 <_malloc_r+0x22>
 8003baa:	42a3      	cmp	r3, r4
 8003bac:	6862      	ldr	r2, [r4, #4]
 8003bae:	d1dd      	bne.n	8003b6c <_malloc_r+0x8c>
 8003bb0:	f8c8 2000 	str.w	r2, [r8]
 8003bb4:	e7ec      	b.n	8003b90 <_malloc_r+0xb0>
 8003bb6:	4623      	mov	r3, r4
 8003bb8:	6864      	ldr	r4, [r4, #4]
 8003bba:	e7ac      	b.n	8003b16 <_malloc_r+0x36>
 8003bbc:	4634      	mov	r4, r6
 8003bbe:	6876      	ldr	r6, [r6, #4]
 8003bc0:	e7b4      	b.n	8003b2c <_malloc_r+0x4c>
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	e7cc      	b.n	8003b60 <_malloc_r+0x80>
 8003bc6:	230c      	movs	r3, #12
 8003bc8:	603b      	str	r3, [r7, #0]
 8003bca:	4638      	mov	r0, r7
 8003bcc:	f000 fa4c 	bl	8004068 <__malloc_unlock>
 8003bd0:	e797      	b.n	8003b02 <_malloc_r+0x22>
 8003bd2:	6025      	str	r5, [r4, #0]
 8003bd4:	e7dc      	b.n	8003b90 <_malloc_r+0xb0>
 8003bd6:	605b      	str	r3, [r3, #4]
 8003bd8:	deff      	udf	#255	; 0xff
 8003bda:	bf00      	nop
 8003bdc:	20000280 	.word	0x20000280

08003be0 <_printf_common>:
 8003be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be4:	4616      	mov	r6, r2
 8003be6:	4699      	mov	r9, r3
 8003be8:	688a      	ldr	r2, [r1, #8]
 8003bea:	690b      	ldr	r3, [r1, #16]
 8003bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	bfb8      	it	lt
 8003bf4:	4613      	movlt	r3, r2
 8003bf6:	6033      	str	r3, [r6, #0]
 8003bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003bfc:	4607      	mov	r7, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	b10a      	cbz	r2, 8003c06 <_printf_common+0x26>
 8003c02:	3301      	adds	r3, #1
 8003c04:	6033      	str	r3, [r6, #0]
 8003c06:	6823      	ldr	r3, [r4, #0]
 8003c08:	0699      	lsls	r1, r3, #26
 8003c0a:	bf42      	ittt	mi
 8003c0c:	6833      	ldrmi	r3, [r6, #0]
 8003c0e:	3302      	addmi	r3, #2
 8003c10:	6033      	strmi	r3, [r6, #0]
 8003c12:	6825      	ldr	r5, [r4, #0]
 8003c14:	f015 0506 	ands.w	r5, r5, #6
 8003c18:	d106      	bne.n	8003c28 <_printf_common+0x48>
 8003c1a:	f104 0a19 	add.w	sl, r4, #25
 8003c1e:	68e3      	ldr	r3, [r4, #12]
 8003c20:	6832      	ldr	r2, [r6, #0]
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	42ab      	cmp	r3, r5
 8003c26:	dc26      	bgt.n	8003c76 <_printf_common+0x96>
 8003c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c2c:	1e13      	subs	r3, r2, #0
 8003c2e:	6822      	ldr	r2, [r4, #0]
 8003c30:	bf18      	it	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	0692      	lsls	r2, r2, #26
 8003c36:	d42b      	bmi.n	8003c90 <_printf_common+0xb0>
 8003c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c3c:	4649      	mov	r1, r9
 8003c3e:	4638      	mov	r0, r7
 8003c40:	47c0      	blx	r8
 8003c42:	3001      	adds	r0, #1
 8003c44:	d01e      	beq.n	8003c84 <_printf_common+0xa4>
 8003c46:	6823      	ldr	r3, [r4, #0]
 8003c48:	6922      	ldr	r2, [r4, #16]
 8003c4a:	f003 0306 	and.w	r3, r3, #6
 8003c4e:	2b04      	cmp	r3, #4
 8003c50:	bf02      	ittt	eq
 8003c52:	68e5      	ldreq	r5, [r4, #12]
 8003c54:	6833      	ldreq	r3, [r6, #0]
 8003c56:	1aed      	subeq	r5, r5, r3
 8003c58:	68a3      	ldr	r3, [r4, #8]
 8003c5a:	bf0c      	ite	eq
 8003c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c60:	2500      	movne	r5, #0
 8003c62:	4293      	cmp	r3, r2
 8003c64:	bfc4      	itt	gt
 8003c66:	1a9b      	subgt	r3, r3, r2
 8003c68:	18ed      	addgt	r5, r5, r3
 8003c6a:	2600      	movs	r6, #0
 8003c6c:	341a      	adds	r4, #26
 8003c6e:	42b5      	cmp	r5, r6
 8003c70:	d11a      	bne.n	8003ca8 <_printf_common+0xc8>
 8003c72:	2000      	movs	r0, #0
 8003c74:	e008      	b.n	8003c88 <_printf_common+0xa8>
 8003c76:	2301      	movs	r3, #1
 8003c78:	4652      	mov	r2, sl
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4638      	mov	r0, r7
 8003c7e:	47c0      	blx	r8
 8003c80:	3001      	adds	r0, #1
 8003c82:	d103      	bne.n	8003c8c <_printf_common+0xac>
 8003c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c8c:	3501      	adds	r5, #1
 8003c8e:	e7c6      	b.n	8003c1e <_printf_common+0x3e>
 8003c90:	18e1      	adds	r1, r4, r3
 8003c92:	1c5a      	adds	r2, r3, #1
 8003c94:	2030      	movs	r0, #48	; 0x30
 8003c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c9a:	4422      	add	r2, r4
 8003c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003ca4:	3302      	adds	r3, #2
 8003ca6:	e7c7      	b.n	8003c38 <_printf_common+0x58>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	4622      	mov	r2, r4
 8003cac:	4649      	mov	r1, r9
 8003cae:	4638      	mov	r0, r7
 8003cb0:	47c0      	blx	r8
 8003cb2:	3001      	adds	r0, #1
 8003cb4:	d0e6      	beq.n	8003c84 <_printf_common+0xa4>
 8003cb6:	3601      	adds	r6, #1
 8003cb8:	e7d9      	b.n	8003c6e <_printf_common+0x8e>
	...

08003cbc <_printf_i>:
 8003cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cc0:	7e0f      	ldrb	r7, [r1, #24]
 8003cc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cc4:	2f78      	cmp	r7, #120	; 0x78
 8003cc6:	4691      	mov	r9, r2
 8003cc8:	4680      	mov	r8, r0
 8003cca:	460c      	mov	r4, r1
 8003ccc:	469a      	mov	sl, r3
 8003cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cd2:	d807      	bhi.n	8003ce4 <_printf_i+0x28>
 8003cd4:	2f62      	cmp	r7, #98	; 0x62
 8003cd6:	d80a      	bhi.n	8003cee <_printf_i+0x32>
 8003cd8:	2f00      	cmp	r7, #0
 8003cda:	f000 80d4 	beq.w	8003e86 <_printf_i+0x1ca>
 8003cde:	2f58      	cmp	r7, #88	; 0x58
 8003ce0:	f000 80c0 	beq.w	8003e64 <_printf_i+0x1a8>
 8003ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cec:	e03a      	b.n	8003d64 <_printf_i+0xa8>
 8003cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cf2:	2b15      	cmp	r3, #21
 8003cf4:	d8f6      	bhi.n	8003ce4 <_printf_i+0x28>
 8003cf6:	a101      	add	r1, pc, #4	; (adr r1, 8003cfc <_printf_i+0x40>)
 8003cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003cfc:	08003d55 	.word	0x08003d55
 8003d00:	08003d69 	.word	0x08003d69
 8003d04:	08003ce5 	.word	0x08003ce5
 8003d08:	08003ce5 	.word	0x08003ce5
 8003d0c:	08003ce5 	.word	0x08003ce5
 8003d10:	08003ce5 	.word	0x08003ce5
 8003d14:	08003d69 	.word	0x08003d69
 8003d18:	08003ce5 	.word	0x08003ce5
 8003d1c:	08003ce5 	.word	0x08003ce5
 8003d20:	08003ce5 	.word	0x08003ce5
 8003d24:	08003ce5 	.word	0x08003ce5
 8003d28:	08003e6d 	.word	0x08003e6d
 8003d2c:	08003d95 	.word	0x08003d95
 8003d30:	08003e27 	.word	0x08003e27
 8003d34:	08003ce5 	.word	0x08003ce5
 8003d38:	08003ce5 	.word	0x08003ce5
 8003d3c:	08003e8f 	.word	0x08003e8f
 8003d40:	08003ce5 	.word	0x08003ce5
 8003d44:	08003d95 	.word	0x08003d95
 8003d48:	08003ce5 	.word	0x08003ce5
 8003d4c:	08003ce5 	.word	0x08003ce5
 8003d50:	08003e2f 	.word	0x08003e2f
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	1d1a      	adds	r2, r3, #4
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	602a      	str	r2, [r5, #0]
 8003d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d64:	2301      	movs	r3, #1
 8003d66:	e09f      	b.n	8003ea8 <_printf_i+0x1ec>
 8003d68:	6820      	ldr	r0, [r4, #0]
 8003d6a:	682b      	ldr	r3, [r5, #0]
 8003d6c:	0607      	lsls	r7, r0, #24
 8003d6e:	f103 0104 	add.w	r1, r3, #4
 8003d72:	6029      	str	r1, [r5, #0]
 8003d74:	d501      	bpl.n	8003d7a <_printf_i+0xbe>
 8003d76:	681e      	ldr	r6, [r3, #0]
 8003d78:	e003      	b.n	8003d82 <_printf_i+0xc6>
 8003d7a:	0646      	lsls	r6, r0, #25
 8003d7c:	d5fb      	bpl.n	8003d76 <_printf_i+0xba>
 8003d7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003d82:	2e00      	cmp	r6, #0
 8003d84:	da03      	bge.n	8003d8e <_printf_i+0xd2>
 8003d86:	232d      	movs	r3, #45	; 0x2d
 8003d88:	4276      	negs	r6, r6
 8003d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d8e:	485a      	ldr	r0, [pc, #360]	; (8003ef8 <_printf_i+0x23c>)
 8003d90:	230a      	movs	r3, #10
 8003d92:	e012      	b.n	8003dba <_printf_i+0xfe>
 8003d94:	682b      	ldr	r3, [r5, #0]
 8003d96:	6820      	ldr	r0, [r4, #0]
 8003d98:	1d19      	adds	r1, r3, #4
 8003d9a:	6029      	str	r1, [r5, #0]
 8003d9c:	0605      	lsls	r5, r0, #24
 8003d9e:	d501      	bpl.n	8003da4 <_printf_i+0xe8>
 8003da0:	681e      	ldr	r6, [r3, #0]
 8003da2:	e002      	b.n	8003daa <_printf_i+0xee>
 8003da4:	0641      	lsls	r1, r0, #25
 8003da6:	d5fb      	bpl.n	8003da0 <_printf_i+0xe4>
 8003da8:	881e      	ldrh	r6, [r3, #0]
 8003daa:	4853      	ldr	r0, [pc, #332]	; (8003ef8 <_printf_i+0x23c>)
 8003dac:	2f6f      	cmp	r7, #111	; 0x6f
 8003dae:	bf0c      	ite	eq
 8003db0:	2308      	moveq	r3, #8
 8003db2:	230a      	movne	r3, #10
 8003db4:	2100      	movs	r1, #0
 8003db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003dba:	6865      	ldr	r5, [r4, #4]
 8003dbc:	60a5      	str	r5, [r4, #8]
 8003dbe:	2d00      	cmp	r5, #0
 8003dc0:	bfa2      	ittt	ge
 8003dc2:	6821      	ldrge	r1, [r4, #0]
 8003dc4:	f021 0104 	bicge.w	r1, r1, #4
 8003dc8:	6021      	strge	r1, [r4, #0]
 8003dca:	b90e      	cbnz	r6, 8003dd0 <_printf_i+0x114>
 8003dcc:	2d00      	cmp	r5, #0
 8003dce:	d04b      	beq.n	8003e68 <_printf_i+0x1ac>
 8003dd0:	4615      	mov	r5, r2
 8003dd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003dd6:	fb03 6711 	mls	r7, r3, r1, r6
 8003dda:	5dc7      	ldrb	r7, [r0, r7]
 8003ddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003de0:	4637      	mov	r7, r6
 8003de2:	42bb      	cmp	r3, r7
 8003de4:	460e      	mov	r6, r1
 8003de6:	d9f4      	bls.n	8003dd2 <_printf_i+0x116>
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d10b      	bne.n	8003e04 <_printf_i+0x148>
 8003dec:	6823      	ldr	r3, [r4, #0]
 8003dee:	07de      	lsls	r6, r3, #31
 8003df0:	d508      	bpl.n	8003e04 <_printf_i+0x148>
 8003df2:	6923      	ldr	r3, [r4, #16]
 8003df4:	6861      	ldr	r1, [r4, #4]
 8003df6:	4299      	cmp	r1, r3
 8003df8:	bfde      	ittt	le
 8003dfa:	2330      	movle	r3, #48	; 0x30
 8003dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003e00:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003e04:	1b52      	subs	r2, r2, r5
 8003e06:	6122      	str	r2, [r4, #16]
 8003e08:	f8cd a000 	str.w	sl, [sp]
 8003e0c:	464b      	mov	r3, r9
 8003e0e:	aa03      	add	r2, sp, #12
 8003e10:	4621      	mov	r1, r4
 8003e12:	4640      	mov	r0, r8
 8003e14:	f7ff fee4 	bl	8003be0 <_printf_common>
 8003e18:	3001      	adds	r0, #1
 8003e1a:	d14a      	bne.n	8003eb2 <_printf_i+0x1f6>
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e20:	b004      	add	sp, #16
 8003e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	f043 0320 	orr.w	r3, r3, #32
 8003e2c:	6023      	str	r3, [r4, #0]
 8003e2e:	4833      	ldr	r0, [pc, #204]	; (8003efc <_printf_i+0x240>)
 8003e30:	2778      	movs	r7, #120	; 0x78
 8003e32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	6829      	ldr	r1, [r5, #0]
 8003e3a:	061f      	lsls	r7, r3, #24
 8003e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e40:	d402      	bmi.n	8003e48 <_printf_i+0x18c>
 8003e42:	065f      	lsls	r7, r3, #25
 8003e44:	bf48      	it	mi
 8003e46:	b2b6      	uxthmi	r6, r6
 8003e48:	07df      	lsls	r7, r3, #31
 8003e4a:	bf48      	it	mi
 8003e4c:	f043 0320 	orrmi.w	r3, r3, #32
 8003e50:	6029      	str	r1, [r5, #0]
 8003e52:	bf48      	it	mi
 8003e54:	6023      	strmi	r3, [r4, #0]
 8003e56:	b91e      	cbnz	r6, 8003e60 <_printf_i+0x1a4>
 8003e58:	6823      	ldr	r3, [r4, #0]
 8003e5a:	f023 0320 	bic.w	r3, r3, #32
 8003e5e:	6023      	str	r3, [r4, #0]
 8003e60:	2310      	movs	r3, #16
 8003e62:	e7a7      	b.n	8003db4 <_printf_i+0xf8>
 8003e64:	4824      	ldr	r0, [pc, #144]	; (8003ef8 <_printf_i+0x23c>)
 8003e66:	e7e4      	b.n	8003e32 <_printf_i+0x176>
 8003e68:	4615      	mov	r5, r2
 8003e6a:	e7bd      	b.n	8003de8 <_printf_i+0x12c>
 8003e6c:	682b      	ldr	r3, [r5, #0]
 8003e6e:	6826      	ldr	r6, [r4, #0]
 8003e70:	6961      	ldr	r1, [r4, #20]
 8003e72:	1d18      	adds	r0, r3, #4
 8003e74:	6028      	str	r0, [r5, #0]
 8003e76:	0635      	lsls	r5, r6, #24
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	d501      	bpl.n	8003e80 <_printf_i+0x1c4>
 8003e7c:	6019      	str	r1, [r3, #0]
 8003e7e:	e002      	b.n	8003e86 <_printf_i+0x1ca>
 8003e80:	0670      	lsls	r0, r6, #25
 8003e82:	d5fb      	bpl.n	8003e7c <_printf_i+0x1c0>
 8003e84:	8019      	strh	r1, [r3, #0]
 8003e86:	2300      	movs	r3, #0
 8003e88:	6123      	str	r3, [r4, #16]
 8003e8a:	4615      	mov	r5, r2
 8003e8c:	e7bc      	b.n	8003e08 <_printf_i+0x14c>
 8003e8e:	682b      	ldr	r3, [r5, #0]
 8003e90:	1d1a      	adds	r2, r3, #4
 8003e92:	602a      	str	r2, [r5, #0]
 8003e94:	681d      	ldr	r5, [r3, #0]
 8003e96:	6862      	ldr	r2, [r4, #4]
 8003e98:	2100      	movs	r1, #0
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f7fc f9a0 	bl	80001e0 <memchr>
 8003ea0:	b108      	cbz	r0, 8003ea6 <_printf_i+0x1ea>
 8003ea2:	1b40      	subs	r0, r0, r5
 8003ea4:	6060      	str	r0, [r4, #4]
 8003ea6:	6863      	ldr	r3, [r4, #4]
 8003ea8:	6123      	str	r3, [r4, #16]
 8003eaa:	2300      	movs	r3, #0
 8003eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003eb0:	e7aa      	b.n	8003e08 <_printf_i+0x14c>
 8003eb2:	6923      	ldr	r3, [r4, #16]
 8003eb4:	462a      	mov	r2, r5
 8003eb6:	4649      	mov	r1, r9
 8003eb8:	4640      	mov	r0, r8
 8003eba:	47d0      	blx	sl
 8003ebc:	3001      	adds	r0, #1
 8003ebe:	d0ad      	beq.n	8003e1c <_printf_i+0x160>
 8003ec0:	6823      	ldr	r3, [r4, #0]
 8003ec2:	079b      	lsls	r3, r3, #30
 8003ec4:	d413      	bmi.n	8003eee <_printf_i+0x232>
 8003ec6:	68e0      	ldr	r0, [r4, #12]
 8003ec8:	9b03      	ldr	r3, [sp, #12]
 8003eca:	4298      	cmp	r0, r3
 8003ecc:	bfb8      	it	lt
 8003ece:	4618      	movlt	r0, r3
 8003ed0:	e7a6      	b.n	8003e20 <_printf_i+0x164>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	4632      	mov	r2, r6
 8003ed6:	4649      	mov	r1, r9
 8003ed8:	4640      	mov	r0, r8
 8003eda:	47d0      	blx	sl
 8003edc:	3001      	adds	r0, #1
 8003ede:	d09d      	beq.n	8003e1c <_printf_i+0x160>
 8003ee0:	3501      	adds	r5, #1
 8003ee2:	68e3      	ldr	r3, [r4, #12]
 8003ee4:	9903      	ldr	r1, [sp, #12]
 8003ee6:	1a5b      	subs	r3, r3, r1
 8003ee8:	42ab      	cmp	r3, r5
 8003eea:	dcf2      	bgt.n	8003ed2 <_printf_i+0x216>
 8003eec:	e7eb      	b.n	8003ec6 <_printf_i+0x20a>
 8003eee:	2500      	movs	r5, #0
 8003ef0:	f104 0619 	add.w	r6, r4, #25
 8003ef4:	e7f5      	b.n	8003ee2 <_printf_i+0x226>
 8003ef6:	bf00      	nop
 8003ef8:	080044c5 	.word	0x080044c5
 8003efc:	080044d6 	.word	0x080044d6

08003f00 <__sflush_r>:
 8003f00:	898a      	ldrh	r2, [r1, #12]
 8003f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f06:	4605      	mov	r5, r0
 8003f08:	0710      	lsls	r0, r2, #28
 8003f0a:	460c      	mov	r4, r1
 8003f0c:	d458      	bmi.n	8003fc0 <__sflush_r+0xc0>
 8003f0e:	684b      	ldr	r3, [r1, #4]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	dc05      	bgt.n	8003f20 <__sflush_r+0x20>
 8003f14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	dc02      	bgt.n	8003f20 <__sflush_r+0x20>
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f22:	2e00      	cmp	r6, #0
 8003f24:	d0f9      	beq.n	8003f1a <__sflush_r+0x1a>
 8003f26:	2300      	movs	r3, #0
 8003f28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f2c:	682f      	ldr	r7, [r5, #0]
 8003f2e:	6a21      	ldr	r1, [r4, #32]
 8003f30:	602b      	str	r3, [r5, #0]
 8003f32:	d032      	beq.n	8003f9a <__sflush_r+0x9a>
 8003f34:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f36:	89a3      	ldrh	r3, [r4, #12]
 8003f38:	075a      	lsls	r2, r3, #29
 8003f3a:	d505      	bpl.n	8003f48 <__sflush_r+0x48>
 8003f3c:	6863      	ldr	r3, [r4, #4]
 8003f3e:	1ac0      	subs	r0, r0, r3
 8003f40:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f42:	b10b      	cbz	r3, 8003f48 <__sflush_r+0x48>
 8003f44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f46:	1ac0      	subs	r0, r0, r3
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f4e:	6a21      	ldr	r1, [r4, #32]
 8003f50:	4628      	mov	r0, r5
 8003f52:	47b0      	blx	r6
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	89a3      	ldrh	r3, [r4, #12]
 8003f58:	d106      	bne.n	8003f68 <__sflush_r+0x68>
 8003f5a:	6829      	ldr	r1, [r5, #0]
 8003f5c:	291d      	cmp	r1, #29
 8003f5e:	d82b      	bhi.n	8003fb8 <__sflush_r+0xb8>
 8003f60:	4a29      	ldr	r2, [pc, #164]	; (8004008 <__sflush_r+0x108>)
 8003f62:	410a      	asrs	r2, r1
 8003f64:	07d6      	lsls	r6, r2, #31
 8003f66:	d427      	bmi.n	8003fb8 <__sflush_r+0xb8>
 8003f68:	2200      	movs	r2, #0
 8003f6a:	6062      	str	r2, [r4, #4]
 8003f6c:	04d9      	lsls	r1, r3, #19
 8003f6e:	6922      	ldr	r2, [r4, #16]
 8003f70:	6022      	str	r2, [r4, #0]
 8003f72:	d504      	bpl.n	8003f7e <__sflush_r+0x7e>
 8003f74:	1c42      	adds	r2, r0, #1
 8003f76:	d101      	bne.n	8003f7c <__sflush_r+0x7c>
 8003f78:	682b      	ldr	r3, [r5, #0]
 8003f7a:	b903      	cbnz	r3, 8003f7e <__sflush_r+0x7e>
 8003f7c:	6560      	str	r0, [r4, #84]	; 0x54
 8003f7e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f80:	602f      	str	r7, [r5, #0]
 8003f82:	2900      	cmp	r1, #0
 8003f84:	d0c9      	beq.n	8003f1a <__sflush_r+0x1a>
 8003f86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003f8a:	4299      	cmp	r1, r3
 8003f8c:	d002      	beq.n	8003f94 <__sflush_r+0x94>
 8003f8e:	4628      	mov	r0, r5
 8003f90:	f000 fa22 	bl	80043d8 <_free_r>
 8003f94:	2000      	movs	r0, #0
 8003f96:	6360      	str	r0, [r4, #52]	; 0x34
 8003f98:	e7c0      	b.n	8003f1c <__sflush_r+0x1c>
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	47b0      	blx	r6
 8003fa0:	1c41      	adds	r1, r0, #1
 8003fa2:	d1c8      	bne.n	8003f36 <__sflush_r+0x36>
 8003fa4:	682b      	ldr	r3, [r5, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d0c5      	beq.n	8003f36 <__sflush_r+0x36>
 8003faa:	2b1d      	cmp	r3, #29
 8003fac:	d001      	beq.n	8003fb2 <__sflush_r+0xb2>
 8003fae:	2b16      	cmp	r3, #22
 8003fb0:	d101      	bne.n	8003fb6 <__sflush_r+0xb6>
 8003fb2:	602f      	str	r7, [r5, #0]
 8003fb4:	e7b1      	b.n	8003f1a <__sflush_r+0x1a>
 8003fb6:	89a3      	ldrh	r3, [r4, #12]
 8003fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fbc:	81a3      	strh	r3, [r4, #12]
 8003fbe:	e7ad      	b.n	8003f1c <__sflush_r+0x1c>
 8003fc0:	690f      	ldr	r7, [r1, #16]
 8003fc2:	2f00      	cmp	r7, #0
 8003fc4:	d0a9      	beq.n	8003f1a <__sflush_r+0x1a>
 8003fc6:	0793      	lsls	r3, r2, #30
 8003fc8:	680e      	ldr	r6, [r1, #0]
 8003fca:	bf08      	it	eq
 8003fcc:	694b      	ldreq	r3, [r1, #20]
 8003fce:	600f      	str	r7, [r1, #0]
 8003fd0:	bf18      	it	ne
 8003fd2:	2300      	movne	r3, #0
 8003fd4:	eba6 0807 	sub.w	r8, r6, r7
 8003fd8:	608b      	str	r3, [r1, #8]
 8003fda:	f1b8 0f00 	cmp.w	r8, #0
 8003fde:	dd9c      	ble.n	8003f1a <__sflush_r+0x1a>
 8003fe0:	6a21      	ldr	r1, [r4, #32]
 8003fe2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003fe4:	4643      	mov	r3, r8
 8003fe6:	463a      	mov	r2, r7
 8003fe8:	4628      	mov	r0, r5
 8003fea:	47b0      	blx	r6
 8003fec:	2800      	cmp	r0, #0
 8003fee:	dc06      	bgt.n	8003ffe <__sflush_r+0xfe>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff6:	81a3      	strh	r3, [r4, #12]
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ffc:	e78e      	b.n	8003f1c <__sflush_r+0x1c>
 8003ffe:	4407      	add	r7, r0
 8004000:	eba8 0800 	sub.w	r8, r8, r0
 8004004:	e7e9      	b.n	8003fda <__sflush_r+0xda>
 8004006:	bf00      	nop
 8004008:	dfbffffe 	.word	0xdfbffffe

0800400c <_fflush_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	690b      	ldr	r3, [r1, #16]
 8004010:	4605      	mov	r5, r0
 8004012:	460c      	mov	r4, r1
 8004014:	b913      	cbnz	r3, 800401c <_fflush_r+0x10>
 8004016:	2500      	movs	r5, #0
 8004018:	4628      	mov	r0, r5
 800401a:	bd38      	pop	{r3, r4, r5, pc}
 800401c:	b118      	cbz	r0, 8004026 <_fflush_r+0x1a>
 800401e:	6a03      	ldr	r3, [r0, #32]
 8004020:	b90b      	cbnz	r3, 8004026 <_fflush_r+0x1a>
 8004022:	f7ff fb21 	bl	8003668 <__sinit>
 8004026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d0f3      	beq.n	8004016 <_fflush_r+0xa>
 800402e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004030:	07d0      	lsls	r0, r2, #31
 8004032:	d404      	bmi.n	800403e <_fflush_r+0x32>
 8004034:	0599      	lsls	r1, r3, #22
 8004036:	d402      	bmi.n	800403e <_fflush_r+0x32>
 8004038:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800403a:	f7ff fbeb 	bl	8003814 <__retarget_lock_acquire_recursive>
 800403e:	4628      	mov	r0, r5
 8004040:	4621      	mov	r1, r4
 8004042:	f7ff ff5d 	bl	8003f00 <__sflush_r>
 8004046:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004048:	07da      	lsls	r2, r3, #31
 800404a:	4605      	mov	r5, r0
 800404c:	d4e4      	bmi.n	8004018 <_fflush_r+0xc>
 800404e:	89a3      	ldrh	r3, [r4, #12]
 8004050:	059b      	lsls	r3, r3, #22
 8004052:	d4e1      	bmi.n	8004018 <_fflush_r+0xc>
 8004054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004056:	f7ff fbde 	bl	8003816 <__retarget_lock_release_recursive>
 800405a:	e7dd      	b.n	8004018 <_fflush_r+0xc>

0800405c <__malloc_lock>:
 800405c:	4801      	ldr	r0, [pc, #4]	; (8004064 <__malloc_lock+0x8>)
 800405e:	f7ff bbd9 	b.w	8003814 <__retarget_lock_acquire_recursive>
 8004062:	bf00      	nop
 8004064:	2000027c 	.word	0x2000027c

08004068 <__malloc_unlock>:
 8004068:	4801      	ldr	r0, [pc, #4]	; (8004070 <__malloc_unlock+0x8>)
 800406a:	f7ff bbd4 	b.w	8003816 <__retarget_lock_release_recursive>
 800406e:	bf00      	nop
 8004070:	2000027c 	.word	0x2000027c

08004074 <__sread>:
 8004074:	b510      	push	{r4, lr}
 8004076:	460c      	mov	r4, r1
 8004078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800407c:	f000 f978 	bl	8004370 <_read_r>
 8004080:	2800      	cmp	r0, #0
 8004082:	bfab      	itete	ge
 8004084:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004086:	89a3      	ldrhlt	r3, [r4, #12]
 8004088:	181b      	addge	r3, r3, r0
 800408a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800408e:	bfac      	ite	ge
 8004090:	6563      	strge	r3, [r4, #84]	; 0x54
 8004092:	81a3      	strhlt	r3, [r4, #12]
 8004094:	bd10      	pop	{r4, pc}

08004096 <__swrite>:
 8004096:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800409a:	461f      	mov	r7, r3
 800409c:	898b      	ldrh	r3, [r1, #12]
 800409e:	05db      	lsls	r3, r3, #23
 80040a0:	4605      	mov	r5, r0
 80040a2:	460c      	mov	r4, r1
 80040a4:	4616      	mov	r6, r2
 80040a6:	d505      	bpl.n	80040b4 <__swrite+0x1e>
 80040a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040ac:	2302      	movs	r3, #2
 80040ae:	2200      	movs	r2, #0
 80040b0:	f000 f94c 	bl	800434c <_lseek_r>
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80040ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80040be:	81a3      	strh	r3, [r4, #12]
 80040c0:	4632      	mov	r2, r6
 80040c2:	463b      	mov	r3, r7
 80040c4:	4628      	mov	r0, r5
 80040c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040ca:	f000 b973 	b.w	80043b4 <_write_r>

080040ce <__sseek>:
 80040ce:	b510      	push	{r4, lr}
 80040d0:	460c      	mov	r4, r1
 80040d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040d6:	f000 f939 	bl	800434c <_lseek_r>
 80040da:	1c43      	adds	r3, r0, #1
 80040dc:	89a3      	ldrh	r3, [r4, #12]
 80040de:	bf15      	itete	ne
 80040e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80040e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80040e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80040ea:	81a3      	strheq	r3, [r4, #12]
 80040ec:	bf18      	it	ne
 80040ee:	81a3      	strhne	r3, [r4, #12]
 80040f0:	bd10      	pop	{r4, pc}

080040f2 <__sclose>:
 80040f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80040f6:	f000 b8f7 	b.w	80042e8 <_close_r>

080040fa <__swbuf_r>:
 80040fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fc:	460e      	mov	r6, r1
 80040fe:	4614      	mov	r4, r2
 8004100:	4605      	mov	r5, r0
 8004102:	b118      	cbz	r0, 800410c <__swbuf_r+0x12>
 8004104:	6a03      	ldr	r3, [r0, #32]
 8004106:	b90b      	cbnz	r3, 800410c <__swbuf_r+0x12>
 8004108:	f7ff faae 	bl	8003668 <__sinit>
 800410c:	69a3      	ldr	r3, [r4, #24]
 800410e:	60a3      	str	r3, [r4, #8]
 8004110:	89a3      	ldrh	r3, [r4, #12]
 8004112:	071a      	lsls	r2, r3, #28
 8004114:	d525      	bpl.n	8004162 <__swbuf_r+0x68>
 8004116:	6923      	ldr	r3, [r4, #16]
 8004118:	b31b      	cbz	r3, 8004162 <__swbuf_r+0x68>
 800411a:	6823      	ldr	r3, [r4, #0]
 800411c:	6922      	ldr	r2, [r4, #16]
 800411e:	1a98      	subs	r0, r3, r2
 8004120:	6963      	ldr	r3, [r4, #20]
 8004122:	b2f6      	uxtb	r6, r6
 8004124:	4283      	cmp	r3, r0
 8004126:	4637      	mov	r7, r6
 8004128:	dc04      	bgt.n	8004134 <__swbuf_r+0x3a>
 800412a:	4621      	mov	r1, r4
 800412c:	4628      	mov	r0, r5
 800412e:	f7ff ff6d 	bl	800400c <_fflush_r>
 8004132:	b9e0      	cbnz	r0, 800416e <__swbuf_r+0x74>
 8004134:	68a3      	ldr	r3, [r4, #8]
 8004136:	3b01      	subs	r3, #1
 8004138:	60a3      	str	r3, [r4, #8]
 800413a:	6823      	ldr	r3, [r4, #0]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	6022      	str	r2, [r4, #0]
 8004140:	701e      	strb	r6, [r3, #0]
 8004142:	6962      	ldr	r2, [r4, #20]
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	429a      	cmp	r2, r3
 8004148:	d004      	beq.n	8004154 <__swbuf_r+0x5a>
 800414a:	89a3      	ldrh	r3, [r4, #12]
 800414c:	07db      	lsls	r3, r3, #31
 800414e:	d506      	bpl.n	800415e <__swbuf_r+0x64>
 8004150:	2e0a      	cmp	r6, #10
 8004152:	d104      	bne.n	800415e <__swbuf_r+0x64>
 8004154:	4621      	mov	r1, r4
 8004156:	4628      	mov	r0, r5
 8004158:	f7ff ff58 	bl	800400c <_fflush_r>
 800415c:	b938      	cbnz	r0, 800416e <__swbuf_r+0x74>
 800415e:	4638      	mov	r0, r7
 8004160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004162:	4621      	mov	r1, r4
 8004164:	4628      	mov	r0, r5
 8004166:	f000 f805 	bl	8004174 <__swsetup_r>
 800416a:	2800      	cmp	r0, #0
 800416c:	d0d5      	beq.n	800411a <__swbuf_r+0x20>
 800416e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004172:	e7f4      	b.n	800415e <__swbuf_r+0x64>

08004174 <__swsetup_r>:
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	4b2a      	ldr	r3, [pc, #168]	; (8004220 <__swsetup_r+0xac>)
 8004178:	4605      	mov	r5, r0
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	460c      	mov	r4, r1
 800417e:	b118      	cbz	r0, 8004188 <__swsetup_r+0x14>
 8004180:	6a03      	ldr	r3, [r0, #32]
 8004182:	b90b      	cbnz	r3, 8004188 <__swsetup_r+0x14>
 8004184:	f7ff fa70 	bl	8003668 <__sinit>
 8004188:	89a3      	ldrh	r3, [r4, #12]
 800418a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800418e:	0718      	lsls	r0, r3, #28
 8004190:	d422      	bmi.n	80041d8 <__swsetup_r+0x64>
 8004192:	06d9      	lsls	r1, r3, #27
 8004194:	d407      	bmi.n	80041a6 <__swsetup_r+0x32>
 8004196:	2309      	movs	r3, #9
 8004198:	602b      	str	r3, [r5, #0]
 800419a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800419e:	81a3      	strh	r3, [r4, #12]
 80041a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80041a4:	e034      	b.n	8004210 <__swsetup_r+0x9c>
 80041a6:	0758      	lsls	r0, r3, #29
 80041a8:	d512      	bpl.n	80041d0 <__swsetup_r+0x5c>
 80041aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041ac:	b141      	cbz	r1, 80041c0 <__swsetup_r+0x4c>
 80041ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041b2:	4299      	cmp	r1, r3
 80041b4:	d002      	beq.n	80041bc <__swsetup_r+0x48>
 80041b6:	4628      	mov	r0, r5
 80041b8:	f000 f90e 	bl	80043d8 <_free_r>
 80041bc:	2300      	movs	r3, #0
 80041be:	6363      	str	r3, [r4, #52]	; 0x34
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80041c6:	81a3      	strh	r3, [r4, #12]
 80041c8:	2300      	movs	r3, #0
 80041ca:	6063      	str	r3, [r4, #4]
 80041cc:	6923      	ldr	r3, [r4, #16]
 80041ce:	6023      	str	r3, [r4, #0]
 80041d0:	89a3      	ldrh	r3, [r4, #12]
 80041d2:	f043 0308 	orr.w	r3, r3, #8
 80041d6:	81a3      	strh	r3, [r4, #12]
 80041d8:	6923      	ldr	r3, [r4, #16]
 80041da:	b94b      	cbnz	r3, 80041f0 <__swsetup_r+0x7c>
 80041dc:	89a3      	ldrh	r3, [r4, #12]
 80041de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e6:	d003      	beq.n	80041f0 <__swsetup_r+0x7c>
 80041e8:	4621      	mov	r1, r4
 80041ea:	4628      	mov	r0, r5
 80041ec:	f000 f840 	bl	8004270 <__smakebuf_r>
 80041f0:	89a0      	ldrh	r0, [r4, #12]
 80041f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80041f6:	f010 0301 	ands.w	r3, r0, #1
 80041fa:	d00a      	beq.n	8004212 <__swsetup_r+0x9e>
 80041fc:	2300      	movs	r3, #0
 80041fe:	60a3      	str	r3, [r4, #8]
 8004200:	6963      	ldr	r3, [r4, #20]
 8004202:	425b      	negs	r3, r3
 8004204:	61a3      	str	r3, [r4, #24]
 8004206:	6923      	ldr	r3, [r4, #16]
 8004208:	b943      	cbnz	r3, 800421c <__swsetup_r+0xa8>
 800420a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800420e:	d1c4      	bne.n	800419a <__swsetup_r+0x26>
 8004210:	bd38      	pop	{r3, r4, r5, pc}
 8004212:	0781      	lsls	r1, r0, #30
 8004214:	bf58      	it	pl
 8004216:	6963      	ldrpl	r3, [r4, #20]
 8004218:	60a3      	str	r3, [r4, #8]
 800421a:	e7f4      	b.n	8004206 <__swsetup_r+0x92>
 800421c:	2000      	movs	r0, #0
 800421e:	e7f7      	b.n	8004210 <__swsetup_r+0x9c>
 8004220:	20000064 	.word	0x20000064

08004224 <__swhatbuf_r>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	460c      	mov	r4, r1
 8004228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800422c:	2900      	cmp	r1, #0
 800422e:	b096      	sub	sp, #88	; 0x58
 8004230:	4615      	mov	r5, r2
 8004232:	461e      	mov	r6, r3
 8004234:	da0d      	bge.n	8004252 <__swhatbuf_r+0x2e>
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	f013 0f80 	tst.w	r3, #128	; 0x80
 800423c:	f04f 0100 	mov.w	r1, #0
 8004240:	bf0c      	ite	eq
 8004242:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8004246:	2340      	movne	r3, #64	; 0x40
 8004248:	2000      	movs	r0, #0
 800424a:	6031      	str	r1, [r6, #0]
 800424c:	602b      	str	r3, [r5, #0]
 800424e:	b016      	add	sp, #88	; 0x58
 8004250:	bd70      	pop	{r4, r5, r6, pc}
 8004252:	466a      	mov	r2, sp
 8004254:	f000 f858 	bl	8004308 <_fstat_r>
 8004258:	2800      	cmp	r0, #0
 800425a:	dbec      	blt.n	8004236 <__swhatbuf_r+0x12>
 800425c:	9901      	ldr	r1, [sp, #4]
 800425e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004262:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8004266:	4259      	negs	r1, r3
 8004268:	4159      	adcs	r1, r3
 800426a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800426e:	e7eb      	b.n	8004248 <__swhatbuf_r+0x24>

08004270 <__smakebuf_r>:
 8004270:	898b      	ldrh	r3, [r1, #12]
 8004272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004274:	079d      	lsls	r5, r3, #30
 8004276:	4606      	mov	r6, r0
 8004278:	460c      	mov	r4, r1
 800427a:	d507      	bpl.n	800428c <__smakebuf_r+0x1c>
 800427c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004280:	6023      	str	r3, [r4, #0]
 8004282:	6123      	str	r3, [r4, #16]
 8004284:	2301      	movs	r3, #1
 8004286:	6163      	str	r3, [r4, #20]
 8004288:	b002      	add	sp, #8
 800428a:	bd70      	pop	{r4, r5, r6, pc}
 800428c:	ab01      	add	r3, sp, #4
 800428e:	466a      	mov	r2, sp
 8004290:	f7ff ffc8 	bl	8004224 <__swhatbuf_r>
 8004294:	9900      	ldr	r1, [sp, #0]
 8004296:	4605      	mov	r5, r0
 8004298:	4630      	mov	r0, r6
 800429a:	f7ff fc21 	bl	8003ae0 <_malloc_r>
 800429e:	b948      	cbnz	r0, 80042b4 <__smakebuf_r+0x44>
 80042a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042a4:	059a      	lsls	r2, r3, #22
 80042a6:	d4ef      	bmi.n	8004288 <__smakebuf_r+0x18>
 80042a8:	f023 0303 	bic.w	r3, r3, #3
 80042ac:	f043 0302 	orr.w	r3, r3, #2
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	e7e3      	b.n	800427c <__smakebuf_r+0xc>
 80042b4:	89a3      	ldrh	r3, [r4, #12]
 80042b6:	6020      	str	r0, [r4, #0]
 80042b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042bc:	81a3      	strh	r3, [r4, #12]
 80042be:	9b00      	ldr	r3, [sp, #0]
 80042c0:	6163      	str	r3, [r4, #20]
 80042c2:	9b01      	ldr	r3, [sp, #4]
 80042c4:	6120      	str	r0, [r4, #16]
 80042c6:	b15b      	cbz	r3, 80042e0 <__smakebuf_r+0x70>
 80042c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80042cc:	4630      	mov	r0, r6
 80042ce:	f000 f82d 	bl	800432c <_isatty_r>
 80042d2:	b128      	cbz	r0, 80042e0 <__smakebuf_r+0x70>
 80042d4:	89a3      	ldrh	r3, [r4, #12]
 80042d6:	f023 0303 	bic.w	r3, r3, #3
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	81a3      	strh	r3, [r4, #12]
 80042e0:	89a3      	ldrh	r3, [r4, #12]
 80042e2:	431d      	orrs	r5, r3
 80042e4:	81a5      	strh	r5, [r4, #12]
 80042e6:	e7cf      	b.n	8004288 <__smakebuf_r+0x18>

080042e8 <_close_r>:
 80042e8:	b538      	push	{r3, r4, r5, lr}
 80042ea:	4d06      	ldr	r5, [pc, #24]	; (8004304 <_close_r+0x1c>)
 80042ec:	2300      	movs	r3, #0
 80042ee:	4604      	mov	r4, r0
 80042f0:	4608      	mov	r0, r1
 80042f2:	602b      	str	r3, [r5, #0]
 80042f4:	f7fc ff3f 	bl	8001176 <_close>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d102      	bne.n	8004302 <_close_r+0x1a>
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	b103      	cbz	r3, 8004302 <_close_r+0x1a>
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	bd38      	pop	{r3, r4, r5, pc}
 8004304:	20000288 	.word	0x20000288

08004308 <_fstat_r>:
 8004308:	b538      	push	{r3, r4, r5, lr}
 800430a:	4d07      	ldr	r5, [pc, #28]	; (8004328 <_fstat_r+0x20>)
 800430c:	2300      	movs	r3, #0
 800430e:	4604      	mov	r4, r0
 8004310:	4608      	mov	r0, r1
 8004312:	4611      	mov	r1, r2
 8004314:	602b      	str	r3, [r5, #0]
 8004316:	f7fc ff3a 	bl	800118e <_fstat>
 800431a:	1c43      	adds	r3, r0, #1
 800431c:	d102      	bne.n	8004324 <_fstat_r+0x1c>
 800431e:	682b      	ldr	r3, [r5, #0]
 8004320:	b103      	cbz	r3, 8004324 <_fstat_r+0x1c>
 8004322:	6023      	str	r3, [r4, #0]
 8004324:	bd38      	pop	{r3, r4, r5, pc}
 8004326:	bf00      	nop
 8004328:	20000288 	.word	0x20000288

0800432c <_isatty_r>:
 800432c:	b538      	push	{r3, r4, r5, lr}
 800432e:	4d06      	ldr	r5, [pc, #24]	; (8004348 <_isatty_r+0x1c>)
 8004330:	2300      	movs	r3, #0
 8004332:	4604      	mov	r4, r0
 8004334:	4608      	mov	r0, r1
 8004336:	602b      	str	r3, [r5, #0]
 8004338:	f7fc ff39 	bl	80011ae <_isatty>
 800433c:	1c43      	adds	r3, r0, #1
 800433e:	d102      	bne.n	8004346 <_isatty_r+0x1a>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	b103      	cbz	r3, 8004346 <_isatty_r+0x1a>
 8004344:	6023      	str	r3, [r4, #0]
 8004346:	bd38      	pop	{r3, r4, r5, pc}
 8004348:	20000288 	.word	0x20000288

0800434c <_lseek_r>:
 800434c:	b538      	push	{r3, r4, r5, lr}
 800434e:	4d07      	ldr	r5, [pc, #28]	; (800436c <_lseek_r+0x20>)
 8004350:	4604      	mov	r4, r0
 8004352:	4608      	mov	r0, r1
 8004354:	4611      	mov	r1, r2
 8004356:	2200      	movs	r2, #0
 8004358:	602a      	str	r2, [r5, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	f7fc ff32 	bl	80011c4 <_lseek>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_lseek_r+0x1e>
 8004364:	682b      	ldr	r3, [r5, #0]
 8004366:	b103      	cbz	r3, 800436a <_lseek_r+0x1e>
 8004368:	6023      	str	r3, [r4, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	20000288 	.word	0x20000288

08004370 <_read_r>:
 8004370:	b538      	push	{r3, r4, r5, lr}
 8004372:	4d07      	ldr	r5, [pc, #28]	; (8004390 <_read_r+0x20>)
 8004374:	4604      	mov	r4, r0
 8004376:	4608      	mov	r0, r1
 8004378:	4611      	mov	r1, r2
 800437a:	2200      	movs	r2, #0
 800437c:	602a      	str	r2, [r5, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	f7fc fec0 	bl	8001104 <_read>
 8004384:	1c43      	adds	r3, r0, #1
 8004386:	d102      	bne.n	800438e <_read_r+0x1e>
 8004388:	682b      	ldr	r3, [r5, #0]
 800438a:	b103      	cbz	r3, 800438e <_read_r+0x1e>
 800438c:	6023      	str	r3, [r4, #0]
 800438e:	bd38      	pop	{r3, r4, r5, pc}
 8004390:	20000288 	.word	0x20000288

08004394 <_sbrk_r>:
 8004394:	b538      	push	{r3, r4, r5, lr}
 8004396:	4d06      	ldr	r5, [pc, #24]	; (80043b0 <_sbrk_r+0x1c>)
 8004398:	2300      	movs	r3, #0
 800439a:	4604      	mov	r4, r0
 800439c:	4608      	mov	r0, r1
 800439e:	602b      	str	r3, [r5, #0]
 80043a0:	f7fc ff1e 	bl	80011e0 <_sbrk>
 80043a4:	1c43      	adds	r3, r0, #1
 80043a6:	d102      	bne.n	80043ae <_sbrk_r+0x1a>
 80043a8:	682b      	ldr	r3, [r5, #0]
 80043aa:	b103      	cbz	r3, 80043ae <_sbrk_r+0x1a>
 80043ac:	6023      	str	r3, [r4, #0]
 80043ae:	bd38      	pop	{r3, r4, r5, pc}
 80043b0:	20000288 	.word	0x20000288

080043b4 <_write_r>:
 80043b4:	b538      	push	{r3, r4, r5, lr}
 80043b6:	4d07      	ldr	r5, [pc, #28]	; (80043d4 <_write_r+0x20>)
 80043b8:	4604      	mov	r4, r0
 80043ba:	4608      	mov	r0, r1
 80043bc:	4611      	mov	r1, r2
 80043be:	2200      	movs	r2, #0
 80043c0:	602a      	str	r2, [r5, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	f7fc febb 	bl	800113e <_write>
 80043c8:	1c43      	adds	r3, r0, #1
 80043ca:	d102      	bne.n	80043d2 <_write_r+0x1e>
 80043cc:	682b      	ldr	r3, [r5, #0]
 80043ce:	b103      	cbz	r3, 80043d2 <_write_r+0x1e>
 80043d0:	6023      	str	r3, [r4, #0]
 80043d2:	bd38      	pop	{r3, r4, r5, pc}
 80043d4:	20000288 	.word	0x20000288

080043d8 <_free_r>:
 80043d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043da:	2900      	cmp	r1, #0
 80043dc:	d044      	beq.n	8004468 <_free_r+0x90>
 80043de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043e2:	9001      	str	r0, [sp, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f1a1 0404 	sub.w	r4, r1, #4
 80043ea:	bfb8      	it	lt
 80043ec:	18e4      	addlt	r4, r4, r3
 80043ee:	f7ff fe35 	bl	800405c <__malloc_lock>
 80043f2:	4a1e      	ldr	r2, [pc, #120]	; (800446c <_free_r+0x94>)
 80043f4:	9801      	ldr	r0, [sp, #4]
 80043f6:	6813      	ldr	r3, [r2, #0]
 80043f8:	b933      	cbnz	r3, 8004408 <_free_r+0x30>
 80043fa:	6063      	str	r3, [r4, #4]
 80043fc:	6014      	str	r4, [r2, #0]
 80043fe:	b003      	add	sp, #12
 8004400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004404:	f7ff be30 	b.w	8004068 <__malloc_unlock>
 8004408:	42a3      	cmp	r3, r4
 800440a:	d908      	bls.n	800441e <_free_r+0x46>
 800440c:	6825      	ldr	r5, [r4, #0]
 800440e:	1961      	adds	r1, r4, r5
 8004410:	428b      	cmp	r3, r1
 8004412:	bf01      	itttt	eq
 8004414:	6819      	ldreq	r1, [r3, #0]
 8004416:	685b      	ldreq	r3, [r3, #4]
 8004418:	1949      	addeq	r1, r1, r5
 800441a:	6021      	streq	r1, [r4, #0]
 800441c:	e7ed      	b.n	80043fa <_free_r+0x22>
 800441e:	461a      	mov	r2, r3
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	b10b      	cbz	r3, 8004428 <_free_r+0x50>
 8004424:	42a3      	cmp	r3, r4
 8004426:	d9fa      	bls.n	800441e <_free_r+0x46>
 8004428:	6811      	ldr	r1, [r2, #0]
 800442a:	1855      	adds	r5, r2, r1
 800442c:	42a5      	cmp	r5, r4
 800442e:	d10b      	bne.n	8004448 <_free_r+0x70>
 8004430:	6824      	ldr	r4, [r4, #0]
 8004432:	4421      	add	r1, r4
 8004434:	1854      	adds	r4, r2, r1
 8004436:	42a3      	cmp	r3, r4
 8004438:	6011      	str	r1, [r2, #0]
 800443a:	d1e0      	bne.n	80043fe <_free_r+0x26>
 800443c:	681c      	ldr	r4, [r3, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	6053      	str	r3, [r2, #4]
 8004442:	440c      	add	r4, r1
 8004444:	6014      	str	r4, [r2, #0]
 8004446:	e7da      	b.n	80043fe <_free_r+0x26>
 8004448:	d902      	bls.n	8004450 <_free_r+0x78>
 800444a:	230c      	movs	r3, #12
 800444c:	6003      	str	r3, [r0, #0]
 800444e:	e7d6      	b.n	80043fe <_free_r+0x26>
 8004450:	6825      	ldr	r5, [r4, #0]
 8004452:	1961      	adds	r1, r4, r5
 8004454:	428b      	cmp	r3, r1
 8004456:	bf04      	itt	eq
 8004458:	6819      	ldreq	r1, [r3, #0]
 800445a:	685b      	ldreq	r3, [r3, #4]
 800445c:	6063      	str	r3, [r4, #4]
 800445e:	bf04      	itt	eq
 8004460:	1949      	addeq	r1, r1, r5
 8004462:	6021      	streq	r1, [r4, #0]
 8004464:	6054      	str	r4, [r2, #4]
 8004466:	e7ca      	b.n	80043fe <_free_r+0x26>
 8004468:	b003      	add	sp, #12
 800446a:	bd30      	pop	{r4, r5, pc}
 800446c:	20000280 	.word	0x20000280

08004470 <_init>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	bf00      	nop
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr

0800447c <_fini>:
 800447c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447e:	bf00      	nop
 8004480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004482:	bc08      	pop	{r3}
 8004484:	469e      	mov	lr, r3
 8004486:	4770      	bx	lr
