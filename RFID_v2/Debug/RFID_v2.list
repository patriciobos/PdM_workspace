
RFID_v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000309c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003230  08003230  00013230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003240  08003240  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  08003240  08003240  00013240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003248  08003248  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003248  08003248  00013248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800324c  0800324c  0001324c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  08003250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000148  20000144  08003394  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000028c  08003394  0002028c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c782  00000000  00000000  000201b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000256e  00000000  00000000  0002c939  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  0002eea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a73  00000000  00000000  0002fc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017378  00000000  00000000  000306cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f727  00000000  00000000  00047a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f218  00000000  00000000  0005716a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000376c  00000000  00000000  000e6384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000e9af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000144 	.word	0x20000144
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003218 	.word	0x08003218

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000148 	.word	0x20000148
 80001d0:	08003218 	.word	0x08003218

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f001 f907 	bl	80016e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f829 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f893 	bl	8000608 <MX_GPIO_Init>

  /* USER CODE BEGIN 2 */
  KEYBOAD_Init();
 80004e2:	f000 ff9b 	bl	800141c <KEYBOAD_Init>
  SPI_Init();
 80004e6:	f000 fe71 	bl	80011cc <SPI_Init>
  MFRC522_Init();
 80004ea:	f000 fd15 	bl	8000f18 <MFRC522_Init>
  USERS_DATA_INIT();
 80004ee:	f001 f815 	bl	800151c <USERS_DATA_INIT>
  LED_Init();
 80004f2:	f000 fb2f 	bl	8000b54 <LED_Init>
  TIMERS_Init();
 80004f6:	f000 ff09 	bl	800130c <TIMERS_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  eventos evento;
	  p2state=FSM_GetInitState();
 80004fa:	f000 fa11 	bl	8000920 <FSM_GetInitState>
 80004fe:	4603      	mov	r3, r0
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <main+0x5c>)
 8000502:	6013      	str	r3, [r2, #0]

	  while((evento = get_event())!= FIN_ARCHIVO)
 8000504:	e009      	b.n	800051a <main+0x4a>
		  	 p2state=fsm(p2state,evento); //Invocamosalinterpretedelamaquinadeestados
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <main+0x5c>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	79fa      	ldrb	r2, [r7, #7]
 800050c:	4611      	mov	r1, r2
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fa14 	bl	800093c <fsm>
 8000514:	4603      	mov	r3, r0
 8000516:	4a05      	ldr	r2, [pc, #20]	; (800052c <main+0x5c>)
 8000518:	6013      	str	r3, [r2, #0]
	  while((evento = get_event())!= FIN_ARCHIVO)
 800051a:	f000 fa2d 	bl	8000978 <get_event>
 800051e:	4603      	mov	r3, r0
 8000520:	71fb      	strb	r3, [r7, #7]
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2bff      	cmp	r3, #255	; 0xff
 8000526:	d1ee      	bne.n	8000506 <main+0x36>
  {
 8000528:	e7e7      	b.n	80004fa <main+0x2a>
 800052a:	bf00      	nop
 800052c:	20000160 	.word	0x20000160

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f002 fe3e 	bl	80031c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b29      	ldr	r3, [pc, #164]	; (8000600 <SystemClock_Config+0xd0>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a28      	ldr	r2, [pc, #160]	; (8000600 <SystemClock_Config+0xd0>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b26      	ldr	r3, [pc, #152]	; (8000600 <SystemClock_Config+0xd0>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b23      	ldr	r3, [pc, #140]	; (8000604 <SystemClock_Config+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800057c:	4a21      	ldr	r2, [pc, #132]	; (8000604 <SystemClock_Config+0xd4>)
 800057e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <SystemClock_Config+0xd4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005a4:	2310      	movs	r3, #16
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ae:	2304      	movs	r3, #4
 80005b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b2:	2307      	movs	r3, #7
 80005b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0320 	add.w	r3, r7, #32
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fc30 	bl	8001e20 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005c6:	f000 f895 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2302      	movs	r3, #2
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2102      	movs	r1, #2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fe92 	bl	8002310 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005f2:	f000 f87f 	bl	80006f4 <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	; 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	4b30      	ldr	r3, [pc, #192]	; (80006e4 <MX_GPIO_Init+0xdc>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a2f      	ldr	r2, [pc, #188]	; (80006e4 <MX_GPIO_Init+0xdc>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b2d      	ldr	r3, [pc, #180]	; (80006e4 <MX_GPIO_Init+0xdc>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	4b29      	ldr	r3, [pc, #164]	; (80006e4 <MX_GPIO_Init+0xdc>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a28      	ldr	r2, [pc, #160]	; (80006e4 <MX_GPIO_Init+0xdc>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <MX_GPIO_Init+0xdc>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <MX_GPIO_Init+0xdc>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <MX_GPIO_Init+0xdc>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <MX_GPIO_Init+0xdc>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_GPIO_Init+0xdc>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a1a      	ldr	r2, [pc, #104]	; (80006e4 <MX_GPIO_Init+0xdc>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_GPIO_Init+0xdc>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_DOOR_STATUS_Pin|LED_USER_FEEDBACK_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	210c      	movs	r1, #12
 8000692:	4815      	ldr	r0, [pc, #84]	; (80006e8 <MX_GPIO_Init+0xe0>)
 8000694:	f001 fb6c 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SDA_GPIO_GPIO_Port, SPI_SDA_GPIO_Pin, GPIO_PIN_RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2110      	movs	r1, #16
 800069c:	4813      	ldr	r0, [pc, #76]	; (80006ec <MX_GPIO_Init+0xe4>)
 800069e:	f001 fb67 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RFC_RST_GPIO_Pin|KEYBOARD_CLK_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f240 4101 	movw	r1, #1025	; 0x401
 80006a8:	4811      	ldr	r0, [pc, #68]	; (80006f0 <MX_GPIO_Init+0xe8>)
 80006aa:	f001 fb61 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_SDA_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI_SDA_GPIO_Pin;
 80006ae:	2310      	movs	r3, #16
 80006b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	2301      	movs	r3, #1
 80006b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	2300      	movs	r3, #0
 80006b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ba:	2300      	movs	r3, #0
 80006bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_SDA_GPIO_GPIO_Port, &GPIO_InitStruct);
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	4619      	mov	r1, r3
 80006c4:	4809      	ldr	r0, [pc, #36]	; (80006ec <MX_GPIO_Init+0xe4>)
 80006c6:	f001 f9b7 	bl	8001a38 <HAL_GPIO_Init>


  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2100      	movs	r1, #0
 80006ce:	2028      	movs	r0, #40	; 0x28
 80006d0:	f001 f97b 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006d4:	2028      	movs	r0, #40	; 0x28
 80006d6:	f001 f994 	bl	8001a02 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	bf00      	nop
 80006dc:	3728      	adds	r7, #40	; 0x28
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40023800 	.word	0x40023800
 80006e8:	40020800 	.word	0x40020800
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40020400 	.word	0x40020400

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <HAL_MspInit+0x4c>)
 800070c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070e:	4a0f      	ldr	r2, [pc, #60]	; (800074c <HAL_MspInit+0x4c>)
 8000710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000714:	6453      	str	r3, [r2, #68]	; 0x44
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <HAL_MspInit+0x4c>)
 8000718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800071a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	603b      	str	r3, [r7, #0]
 8000726:	4b09      	ldr	r3, [pc, #36]	; (800074c <HAL_MspInit+0x4c>)
 8000728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800072a:	4a08      	ldr	r2, [pc, #32]	; (800074c <HAL_MspInit+0x4c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6413      	str	r3, [r2, #64]	; 0x40
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <HAL_MspInit+0x4c>)
 8000734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800073e:	2007      	movs	r0, #7
 8000740:	f001 f938 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000744:	bf00      	nop
 8000746:	3708      	adds	r7, #8
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	40023800 	.word	0x40023800

08000750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b08a      	sub	sp, #40	; 0x28
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	f107 0314 	add.w	r3, r7, #20
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
 8000766:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	4a19      	ldr	r2, [pc, #100]	; (80007d4 <HAL_SPI_MspInit+0x84>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d12b      	bne.n	80007ca <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	613b      	str	r3, [r7, #16]
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <HAL_SPI_MspInit+0x88>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <HAL_SPI_MspInit+0x88>)
 800077c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <HAL_SPI_MspInit+0x88>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800078a:	613b      	str	r3, [r7, #16]
 800078c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	4b11      	ldr	r3, [pc, #68]	; (80007d8 <HAL_SPI_MspInit+0x88>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a10      	ldr	r2, [pc, #64]	; (80007d8 <HAL_SPI_MspInit+0x88>)
 8000798:	f043 0301 	orr.w	r3, r3, #1
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <HAL_SPI_MspInit+0x88>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0301 	and.w	r3, r3, #1
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80007aa:	23e0      	movs	r3, #224	; 0xe0
 80007ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ae:	2302      	movs	r3, #2
 80007b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b6:	2303      	movs	r3, #3
 80007b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80007ba:	2305      	movs	r3, #5
 80007bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <HAL_SPI_MspInit+0x8c>)
 80007c6:	f001 f937 	bl	8001a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40013000 	.word	0x40013000
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a0e      	ldr	r2, [pc, #56]	; (8000828 <HAL_TIM_Base_MspInit+0x48>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d115      	bne.n	800081e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <HAL_TIM_Base_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	4a0c      	ldr	r2, [pc, #48]	; (800082c <HAL_TIM_Base_MspInit+0x4c>)
 80007fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000800:	6453      	str	r3, [r2, #68]	; 0x44
 8000802:	4b0a      	ldr	r3, [pc, #40]	; (800082c <HAL_TIM_Base_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
    /* TIM10 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2019      	movs	r0, #25
 8000814:	f001 f8d9 	bl	80019ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000818:	2019      	movs	r0, #25
 800081a:	f001 f8f2 	bl	8001a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800081e:	bf00      	nop
 8000820:	3710      	adds	r7, #16
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40014400 	.word	0x40014400
 800082c:	40023800 	.word	0x40023800

08000830 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <NMI_Handler+0x4>

08000836 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800083a:	e7fe      	b.n	800083a <HardFault_Handler+0x4>

0800083c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler+0x4>

08000842 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000842:	b480      	push	{r7}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000846:	e7fe      	b.n	8000846 <BusFault_Handler+0x4>

08000848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800084c:	e7fe      	b.n	800084c <UsageFault_Handler+0x4>

0800084e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800084e:	b480      	push	{r7}
 8000850:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000852:	bf00      	nop
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr

0800086a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr

08000878 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800087c:	f000 ff86 	bl	800178c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800088a:	f002 fad5 	bl	8002e38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200001e4 	.word	0x200001e4

08000898 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800089c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008a0:	f001 fa9a 	bl	8001dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008ac:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <SystemInit+0x20>)
 80008ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008b2:	4a05      	ldr	r2, [pc, #20]	; (80008c8 <SystemInit+0x20>)
 80008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	e000ed00 	.word	0xe000ed00

080008cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80008cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000904 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008d2:	490e      	ldr	r1, [pc, #56]	; (800090c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008d4:	4a0e      	ldr	r2, [pc, #56]	; (8000910 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008d8:	e002      	b.n	80008e0 <LoopCopyDataInit>

080008da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008de:	3304      	adds	r3, #4

080008e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e4:	d3f9      	bcc.n	80008da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008e6:	4a0b      	ldr	r2, [pc, #44]	; (8000914 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008e8:	4c0b      	ldr	r4, [pc, #44]	; (8000918 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008ec:	e001      	b.n	80008f2 <LoopFillZerobss>

080008ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f0:	3204      	adds	r2, #4

080008f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f4:	d3fb      	bcc.n	80008ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008f6:	f7ff ffd7 	bl	80008a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008fa:	f002 fc69 	bl	80031d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008fe:	f7ff fde7 	bl	80004d0 <main>
  bx  lr    
 8000902:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000904:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000908:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800090c:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000910:	08003250 	.word	0x08003250
  ldr r2, =_sbss
 8000914:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000918:	2000028c 	.word	0x2000028c

0800091c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800091c:	e7fe      	b.n	800091c <ADC_IRQHandler>
	...

08000920 <FSM_GetInitState>:
int tarjetavalida=0;
uint8_t NumeroPulsado = -1;
uint8_t KevPressed = 0;
int pinValido = 0;

STATE* FSM_GetInitState(void){
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0

	STATE* initialState = estado_puerta_cerrada;
 8000926:	4b04      	ldr	r3, [pc, #16]	; (8000938 <FSM_GetInitState+0x18>)
 8000928:	607b      	str	r3, [r7, #4]
	return initialState; //El sistema comienza con la puerta cerrada
 800092a:	687b      	ldr	r3, [r7, #4]

}
 800092c:	4618      	mov	r0, r3
 800092e:	370c      	adds	r7, #12
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	20000004 	.word	0x20000004

0800093c <fsm>:

/*Interprete de la maquina de estados*/
STATE* fsm( STATE *p_tabla_estado , eventos evento_actual){		// Puntero al estado actual , Evento recibido
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	460b      	mov	r3, r1
 8000946:	70fb      	strb	r3, [r7, #3]
	// 1-Recorremos las tabla de estado ( Ej estado_0) hasta encontrar el arco que contenga el evento actual
	while (p_tabla_estado -> evento != evento_actual && p_tabla_estado -> evento !=FIN_TABLA) ++p_tabla_estado;
 8000948:	e002      	b.n	8000950 <fsm+0x14>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	330c      	adds	r3, #12
 800094e:	607b      	str	r3, [r7, #4]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	78fa      	ldrb	r2, [r7, #3]
 8000956:	429a      	cmp	r2, r3
 8000958:	d003      	beq.n	8000962 <fsm+0x26>
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	2b08      	cmp	r3, #8
 8000960:	d1f3      	bne.n	800094a <fsm+0xe>

	(*p_tabla_estado -> p_rutina_accion)(); /*2- Ejecuta Rutina de accion corresondiente*/
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	4798      	blx	r3

	p_tabla_estado=p_tabla_estado -> proximo_estado; /*3-Encuentro próximo estado*/
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	685b      	ldr	r3, [r3, #4]
 800096c:	607b      	str	r3, [r7, #4]

	return(p_tabla_estado);
 800096e:	687b      	ldr	r3, [r7, #4]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3708      	adds	r7, #8
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}

08000978 <get_event>:

eventos get_event(void){
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0

	if(get_RFID_event_ocurrence()){
 800097e:	f000 fa0d 	bl	8000d9c <get_RFID_event_ocurrence>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <get_event+0x14>
		return LECTURA_TARJETA;
 8000988:	2300      	movs	r3, #0
 800098a:	e049      	b.n	8000a20 <get_event+0xa8>
	}

	if (NumeroPulsado==0){
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <get_event+0xb0>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d111      	bne.n	80009b8 <get_event+0x40>
	uint8_t pulsedNumber = KEYBOARD_ReadData();
 8000994:	f000 fd72 	bl	800147c <KEYBOARD_ReadData>
 8000998:	4603      	mov	r3, r0
 800099a:	71fb      	strb	r3, [r7, #7]
	if (pulsedNumber>0){
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d00a      	beq.n	80009b8 <get_event+0x40>
			LED_KeyboardPress();
 80009a2:	f000 f945 	bl	8000c30 <LED_KeyboardPress>
			HAL_Delay(500);
 80009a6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009aa:	f000 ff0f 	bl	80017cc <HAL_Delay>
			NumeroPulsado = pulsedNumber;
 80009ae:	4a1e      	ldr	r2, [pc, #120]	; (8000a28 <get_event+0xb0>)
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	7013      	strb	r3, [r2, #0]
			return LECTURA_NUMERO_TECLADO;
 80009b4:	2303      	movs	r3, #3
 80009b6:	e033      	b.n	8000a20 <get_event+0xa8>
		}
	}


	if(tarjetavalida >0){
 80009b8:	4b1c      	ldr	r3, [pc, #112]	; (8000a2c <get_event+0xb4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	dd06      	ble.n	80009ce <get_event+0x56>
		LED_Card_Blink();
 80009c0:	f000 f94a 	bl	8000c58 <LED_Card_Blink>
		tarjetavalida = 0;
 80009c4:	4b19      	ldr	r3, [pc, #100]	; (8000a2c <get_event+0xb4>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
		return TARJETA_VALIDA;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e028      	b.n	8000a20 <get_event+0xa8>
	}
	if(tarjetavalida <0){
 80009ce:	4b17      	ldr	r3, [pc, #92]	; (8000a2c <get_event+0xb4>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	da04      	bge.n	80009e0 <get_event+0x68>
			tarjetavalida = 0;
 80009d6:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <get_event+0xb4>)
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
			return TARJETA_INVALIDA;
 80009dc:	2302      	movs	r3, #2
 80009de:	e01f      	b.n	8000a20 <get_event+0xa8>
	}
	if(pinValido >0){
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <get_event+0xb8>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	dd04      	ble.n	80009f2 <get_event+0x7a>
		pinValido = 0;
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <get_event+0xb8>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
			return PIN_VALIDO;
 80009ee:	2304      	movs	r3, #4
 80009f0:	e016      	b.n	8000a20 <get_event+0xa8>
		}
	if(pinValido <0){
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <get_event+0xb8>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	da06      	bge.n	8000a08 <get_event+0x90>
		LED_Wrong_Pin_Blink();
 80009fa:	f000 f979 	bl	8000cf0 <LED_Wrong_Pin_Blink>
		pinValido = 0;
 80009fe:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <get_event+0xb8>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
			return PIN_INVALIDO;
 8000a04:	2305      	movs	r3, #5
 8000a06:	e00b      	b.n	8000a20 <get_event+0xa8>
		}

	if (TIME_GetTimeStatus(TIMER_TIMEOUT)){
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f000 fc85 	bl	8001318 <TIME_GetTimeStatus>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d004      	beq.n	8000a1e <get_event+0xa6>
		TIME_ResetTimeStatus(TIMER_TIMEOUT);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f000 fc95 	bl	8001344 <TIME_ResetTimeStatus>
		return TIMEOUT_DEFAULT;
 8000a1a:	2306      	movs	r3, #6
 8000a1c:	e000      	b.n	8000a20 <get_event+0xa8>
	}
	return FIN_TABLA;
 8000a1e:	2308      	movs	r3, #8

}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000130 	.word	0x20000130
 8000a2c:	20000164 	.word	0x20000164
 8000a30:	20000168 	.word	0x20000168

08000a34 <no_operation>:

//Rutinas de accion

//No hacer nada
void no_operation(void){
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0

}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <validar_id_tarjeta>:


void validar_id_tarjeta(void){
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	TIMER_Start(TIMER_TIMEOUT);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f000 fc91 	bl	8001370 <TIMER_Start>
	if (USERS_DATA_VALIDATE_KEYCARD(GetKeyRead())){
 8000a4e:	f000 f9cd 	bl	8000dec <GetKeyRead>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fd95 	bl	8001584 <USERS_DATA_VALIDATE_KEYCARD>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d006      	beq.n	8000a6e <validar_id_tarjeta+0x2a>
		tarjetavalida = 1;
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <validar_id_tarjeta+0x38>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]
		NumeroPulsado=0; //permito eventos de teclado
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <validar_id_tarjeta+0x3c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	701a      	strb	r2, [r3, #0]
	}
	else {
		tarjetavalida = -1;
	}
}
 8000a6c:	e003      	b.n	8000a76 <validar_id_tarjeta+0x32>
		tarjetavalida = -1;
 8000a6e:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <validar_id_tarjeta+0x38>)
 8000a70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000164 	.word	0x20000164
 8000a80:	20000130 	.word	0x20000130

08000a84 <lectura_primer_numero>:

void lectura_primer_numero(void){
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
	TIMER_Start(TIMER_TIMEOUT);
 8000a88:	2000      	movs	r0, #0
 8000a8a:	f000 fc71 	bl	8001370 <TIMER_Start>
	USERS_DATA_COLLECT_FIRST_NUMBER( &NumeroPulsado);
 8000a8e:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <lectura_primer_numero+0x20>)
 8000a90:	f000 fdc0 	bl	8001614 <USERS_DATA_COLLECT_FIRST_NUMBER>
	NumeroPulsado=0;
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <lectura_primer_numero+0x20>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
	LED_KeyboardPress();
 8000a9a:	f000 f8c9 	bl	8000c30 <LED_KeyboardPress>
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000130 	.word	0x20000130

08000aa8 <lectura_segundo_numero>:
void lectura_segundo_numero(void){
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
	TIMER_Start(TIMER_TIMEOUT);
 8000aac:	2000      	movs	r0, #0
 8000aae:	f000 fc5f 	bl	8001370 <TIMER_Start>
	USERS_DATA_COLLECT_SECOND_NUMBER( &NumeroPulsado);
 8000ab2:	4805      	ldr	r0, [pc, #20]	; (8000ac8 <lectura_segundo_numero+0x20>)
 8000ab4:	f000 fdbe 	bl	8001634 <USERS_DATA_COLLECT_SECOND_NUMBER>
	NumeroPulsado=0;
 8000ab8:	4b03      	ldr	r3, [pc, #12]	; (8000ac8 <lectura_segundo_numero+0x20>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
	LED_KeyboardPress();
 8000abe:	f000 f8b7 	bl	8000c30 <LED_KeyboardPress>

}
 8000ac2:	bf00      	nop
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20000130 	.word	0x20000130

08000acc <lectura_tercer_numero>:
void lectura_tercer_numero(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	TIMER_Start(TIMER_TIMEOUT);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 fc4d 	bl	8001370 <TIMER_Start>
	USERS_DATA_COLLECT_THIRD_NUMBER( &NumeroPulsado);
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <lectura_tercer_numero+0x20>)
 8000ad8:	f000 fdbc 	bl	8001654 <USERS_DATA_COLLECT_THIRD_NUMBER>
	NumeroPulsado=0;
 8000adc:	4b03      	ldr	r3, [pc, #12]	; (8000aec <lectura_tercer_numero+0x20>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
	LED_KeyboardPress();
 8000ae2:	f000 f8a5 	bl	8000c30 <LED_KeyboardPress>
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	20000130 	.word	0x20000130

08000af0 <lectura_cuarto_numero>:
void lectura_cuarto_numero(void){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	TIMER_Start(TIMER_TIMEOUT);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f000 fc3b 	bl	8001370 <TIMER_Start>
	USERS_DATA_COLLECT_FOURTH_NUMBER( &NumeroPulsado);
 8000afa:	480b      	ldr	r0, [pc, #44]	; (8000b28 <lectura_cuarto_numero+0x38>)
 8000afc:	f000 fdba 	bl	8001674 <USERS_DATA_COLLECT_FOURTH_NUMBER>
	NumeroPulsado=0;
 8000b00:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <lectura_cuarto_numero+0x38>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	701a      	strb	r2, [r3, #0]
	LED_KeyboardPress();
 8000b06:	f000 f893 	bl	8000c30 <LED_KeyboardPress>
	if ( USERS_DATA_VALIDATE_PIN()){
 8000b0a:	f000 fdc3 	bl	8001694 <USERS_DATA_VALIDATE_PIN>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d003      	beq.n	8000b1c <lectura_cuarto_numero+0x2c>
		pinValido=1;
 8000b14:	4b05      	ldr	r3, [pc, #20]	; (8000b2c <lectura_cuarto_numero+0x3c>)
 8000b16:	2201      	movs	r2, #1
 8000b18:	601a      	str	r2, [r3, #0]
	}else {
		pinValido = -1;
	}
}
 8000b1a:	e003      	b.n	8000b24 <lectura_cuarto_numero+0x34>
		pinValido = -1;
 8000b1c:	4b03      	ldr	r3, [pc, #12]	; (8000b2c <lectura_cuarto_numero+0x3c>)
 8000b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b22:	601a      	str	r2, [r3, #0]
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20000130 	.word	0x20000130
 8000b2c:	20000168 	.word	0x20000168

08000b30 <abrir_puerta>:
void validar_pin_numerico(void){

}
void abrir_puerta(void){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	LED_OPEN_DOOR();
 8000b34:	f000 f886 	bl	8000c44 <LED_OPEN_DOOR>
	NumeroPulsado = -1;
 8000b38:	4b02      	ldr	r3, [pc, #8]	; (8000b44 <abrir_puerta+0x14>)
 8000b3a:	22ff      	movs	r2, #255	; 0xff
 8000b3c:	701a      	strb	r2, [r3, #0]

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000130 	.word	0x20000130

08000b48 <cerrar_puerta>:
void cerrar_puerta(void){
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0

	LED_OPEN_DOOR();
 8000b4c:	f000 f87a 	bl	8000c44 <LED_OPEN_DOOR>
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <LED_Init>:
 *      Author: santiagobualo
 */

#include "LED.h"

void LED_Init(void){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0

	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]
	  /*Configure GPIO pin : B1_Pin */
	  GPIO_InitStruct.Pin = B1_Pin;
 8000b68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b6c:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b6e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b72:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b78:	1d3b      	adds	r3, r7, #4
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	4809      	ldr	r0, [pc, #36]	; (8000ba4 <LED_Init+0x50>)
 8000b7e:	f000 ff5b 	bl	8001a38 <HAL_GPIO_Init>

	  /*Configure GPIO pins : LED_DOOR_STATUS_Pin LED_USER_FEEDBACK_Pin */
	  GPIO_InitStruct.Pin = LED_DOOR_STATUS_Pin|LED_USER_FEEDBACK_Pin;
 8000b82:	230c      	movs	r3, #12
 8000b84:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b86:	2301      	movs	r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	4619      	mov	r1, r3
 8000b96:	4803      	ldr	r0, [pc, #12]	; (8000ba4 <LED_Init+0x50>)
 8000b98:	f000 ff4e 	bl	8001a38 <HAL_GPIO_Init>

}
 8000b9c:	bf00      	nop
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	40020800 	.word	0x40020800

08000ba8 <LED_Timeout_Blink>:

void LED_Timeout_Blink(void){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin, TURN_LED_ON);
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_ON);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2108      	movs	r1, #8
 8000bb0:	4813      	ldr	r0, [pc, #76]	; (8000c00 <LED_Timeout_Blink+0x58>)
 8000bb2:	f001 f8dd 	bl	8001d70 <HAL_GPIO_WritePin>
	//HAL_Delay(125); //no puedo usar esto pq se llama desde la interrupcion
	LED_delay();
 8000bb6:	f000 f825 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_OFF);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	2108      	movs	r1, #8
 8000bbe:	4810      	ldr	r0, [pc, #64]	; (8000c00 <LED_Timeout_Blink+0x58>)
 8000bc0:	f001 f8d6 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000bc4:	f000 f81e 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_ON);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2108      	movs	r1, #8
 8000bcc:	480c      	ldr	r0, [pc, #48]	; (8000c00 <LED_Timeout_Blink+0x58>)
 8000bce:	f001 f8cf 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000bd2:	f000 f817 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_OFF);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2108      	movs	r1, #8
 8000bda:	4809      	ldr	r0, [pc, #36]	; (8000c00 <LED_Timeout_Blink+0x58>)
 8000bdc:	f001 f8c8 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000be0:	f000 f810 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_ON);
 8000be4:	2201      	movs	r2, #1
 8000be6:	2108      	movs	r1, #8
 8000be8:	4805      	ldr	r0, [pc, #20]	; (8000c00 <LED_Timeout_Blink+0x58>)
 8000bea:	f001 f8c1 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000bee:	f000 f809 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_OFF);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	4802      	ldr	r0, [pc, #8]	; (8000c00 <LED_Timeout_Blink+0x58>)
 8000bf8:	f001 f8ba 	bl	8001d70 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40020800 	.word	0x40020800

08000c04 <LED_delay>:

void LED_delay(void){
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0

	int i=0;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
	while (i<1000000){
 8000c0e:	e002      	b.n	8000c16 <LED_delay+0x12>
		i++;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	3301      	adds	r3, #1
 8000c14:	607b      	str	r3, [r7, #4]
	while (i<1000000){
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <LED_delay+0x28>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	ddf8      	ble.n	8000c10 <LED_delay+0xc>
	}
}
 8000c1e:	bf00      	nop
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	000f423f 	.word	0x000f423f

08000c30 <LED_KeyboardPress>:



void LED_KeyboardPress(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
    	HAL_GPIO_TogglePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin); // Toggle The Output (LED) Pin
 8000c34:	2108      	movs	r1, #8
 8000c36:	4802      	ldr	r0, [pc, #8]	; (8000c40 <LED_KeyboardPress+0x10>)
 8000c38:	f001 f8b3 	bl	8001da2 <HAL_GPIO_TogglePin>

}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40020800 	.word	0x40020800

08000c44 <LED_OPEN_DOOR>:


void LED_OPEN_DOOR(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    	HAL_GPIO_TogglePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin); // Toggle The Output (LED) Pin
 8000c48:	2104      	movs	r1, #4
 8000c4a:	4802      	ldr	r0, [pc, #8]	; (8000c54 <LED_OPEN_DOOR+0x10>)
 8000c4c:	f001 f8a9 	bl	8001da2 <HAL_GPIO_TogglePin>

}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40020800 	.word	0x40020800

08000c58 <LED_Card_Blink>:

void LED_Card_Blink(void){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_ON);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	2108      	movs	r1, #8
 8000c60:	4822      	ldr	r0, [pc, #136]	; (8000cec <LED_Card_Blink+0x94>)
 8000c62:	f001 f885 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_ON);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2104      	movs	r1, #4
 8000c6a:	4820      	ldr	r0, [pc, #128]	; (8000cec <LED_Card_Blink+0x94>)
 8000c6c:	f001 f880 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000c70:	f7ff ffc8 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_OFF);
 8000c74:	2200      	movs	r2, #0
 8000c76:	2108      	movs	r1, #8
 8000c78:	481c      	ldr	r0, [pc, #112]	; (8000cec <LED_Card_Blink+0x94>)
 8000c7a:	f001 f879 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_OFF);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2104      	movs	r1, #4
 8000c82:	481a      	ldr	r0, [pc, #104]	; (8000cec <LED_Card_Blink+0x94>)
 8000c84:	f001 f874 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000c88:	f7ff ffbc 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_ON);
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	2108      	movs	r1, #8
 8000c90:	4816      	ldr	r0, [pc, #88]	; (8000cec <LED_Card_Blink+0x94>)
 8000c92:	f001 f86d 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_ON);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4814      	ldr	r0, [pc, #80]	; (8000cec <LED_Card_Blink+0x94>)
 8000c9c:	f001 f868 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000ca0:	f7ff ffb0 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_OFF);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	2108      	movs	r1, #8
 8000ca8:	4810      	ldr	r0, [pc, #64]	; (8000cec <LED_Card_Blink+0x94>)
 8000caa:	f001 f861 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_OFF);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2104      	movs	r1, #4
 8000cb2:	480e      	ldr	r0, [pc, #56]	; (8000cec <LED_Card_Blink+0x94>)
 8000cb4:	f001 f85c 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000cb8:	f7ff ffa4 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_ON);
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	2108      	movs	r1, #8
 8000cc0:	480a      	ldr	r0, [pc, #40]	; (8000cec <LED_Card_Blink+0x94>)
 8000cc2:	f001 f855 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_ON);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2104      	movs	r1, #4
 8000cca:	4808      	ldr	r0, [pc, #32]	; (8000cec <LED_Card_Blink+0x94>)
 8000ccc:	f001 f850 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000cd0:	f7ff ff98 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_OFF);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <LED_Card_Blink+0x94>)
 8000cda:	f001 f849 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_OFF);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2104      	movs	r1, #4
 8000ce2:	4802      	ldr	r0, [pc, #8]	; (8000cec <LED_Card_Blink+0x94>)
 8000ce4:	f001 f844 	bl	8001d70 <HAL_GPIO_WritePin>

}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40020800 	.word	0x40020800

08000cf0 <LED_Wrong_Pin_Blink>:

void LED_Wrong_Pin_Blink(void){
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_ON);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	4827      	ldr	r0, [pc, #156]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000cfa:	f001 f839 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_ON);
 8000cfe:	2201      	movs	r2, #1
 8000d00:	2104      	movs	r1, #4
 8000d02:	4825      	ldr	r0, [pc, #148]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d04:	f001 f834 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000d08:	f7ff ff7c 	bl	8000c04 <LED_delay>
	LED_delay();
 8000d0c:	f7ff ff7a 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_OFF);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2108      	movs	r1, #8
 8000d14:	4820      	ldr	r0, [pc, #128]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d16:	f001 f82b 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_OFF);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2104      	movs	r1, #4
 8000d1e:	481e      	ldr	r0, [pc, #120]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d20:	f001 f826 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000d24:	f7ff ff6e 	bl	8000c04 <LED_delay>
	LED_delay();
 8000d28:	f7ff ff6c 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_ON);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	2108      	movs	r1, #8
 8000d30:	4819      	ldr	r0, [pc, #100]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d32:	f001 f81d 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_ON);
 8000d36:	2201      	movs	r2, #1
 8000d38:	2104      	movs	r1, #4
 8000d3a:	4817      	ldr	r0, [pc, #92]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d3c:	f001 f818 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000d40:	f7ff ff60 	bl	8000c04 <LED_delay>
	LED_delay();
 8000d44:	f7ff ff5e 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_OFF);
 8000d48:	2200      	movs	r2, #0
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	4812      	ldr	r0, [pc, #72]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d4e:	f001 f80f 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_OFF);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2104      	movs	r1, #4
 8000d56:	4810      	ldr	r0, [pc, #64]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d58:	f001 f80a 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000d5c:	f7ff ff52 	bl	8000c04 <LED_delay>
	LED_delay();
 8000d60:	f7ff ff50 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_ON);
 8000d64:	2201      	movs	r2, #1
 8000d66:	2108      	movs	r1, #8
 8000d68:	480b      	ldr	r0, [pc, #44]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d6a:	f001 f801 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_ON);
 8000d6e:	2201      	movs	r2, #1
 8000d70:	2104      	movs	r1, #4
 8000d72:	4809      	ldr	r0, [pc, #36]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d74:	f000 fffc 	bl	8001d70 <HAL_GPIO_WritePin>
	LED_delay();
 8000d78:	f7ff ff44 	bl	8000c04 <LED_delay>
	LED_delay();
 8000d7c:	f7ff ff42 	bl	8000c04 <LED_delay>
	HAL_GPIO_WritePin(LED_USER_FEEDBACK_GPIO_Port, LED_USER_FEEDBACK_Pin,TURN_LED_OFF);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2108      	movs	r1, #8
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d86:	f000 fff3 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_DOOR_STATUS_GPIO_Port, LED_DOOR_STATUS_Pin,TURN_LED_OFF);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2104      	movs	r1, #4
 8000d8e:	4802      	ldr	r0, [pc, #8]	; (8000d98 <LED_Wrong_Pin_Blink+0xa8>)
 8000d90:	f000 ffee 	bl	8001d70 <HAL_GPIO_WritePin>

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40020800 	.word	0x40020800

08000d9c <get_RFID_event_ocurrence>:
uint8_t R[16];

/* USER CODE END PV */


bool get_RFID_event_ocurrence(void){
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
	  //Estas 3 lineas se usan para leer tarjetas
	status = MFRC522_Request(PICC_REQIDL, str);	//MFRC522_Request(0x26, str)
 8000da0:	490f      	ldr	r1, [pc, #60]	; (8000de0 <get_RFID_event_ocurrence+0x44>)
 8000da2:	2026      	movs	r0, #38	; 0x26
 8000da4:	f000 f9af 	bl	8001106 <MFRC522_Request>
 8000da8:	4603      	mov	r3, r0
 8000daa:	461a      	mov	r2, r3
 8000dac:	4b0d      	ldr	r3, [pc, #52]	; (8000de4 <get_RFID_event_ocurrence+0x48>)
 8000dae:	701a      	strb	r2, [r3, #0]
	status = MFRC522_Anticoll(str);//Take a collision, look up 5 bytes
 8000db0:	480b      	ldr	r0, [pc, #44]	; (8000de0 <get_RFID_event_ocurrence+0x44>)
 8000db2:	f000 f9cd 	bl	8001150 <MFRC522_Anticoll>
 8000db6:	4603      	mov	r3, r0
 8000db8:	461a      	mov	r2, r3
 8000dba:	4b0a      	ldr	r3, [pc, #40]	; (8000de4 <get_RFID_event_ocurrence+0x48>)
 8000dbc:	701a      	strb	r2, [r3, #0]
	memcpy(serNum, str, 5);//function for c language:(para1:that place save data,para2:the the source of data,para3:size)
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <get_RFID_event_ocurrence+0x4c>)
 8000dc0:	4a07      	ldr	r2, [pc, #28]	; (8000de0 <get_RFID_event_ocurrence+0x44>)
 8000dc2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000dc6:	6018      	str	r0, [r3, #0]
 8000dc8:	3304      	adds	r3, #4
 8000dca:	7019      	strb	r1, [r3, #0]

	if (status == MI_OK)
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <get_RFID_event_ocurrence+0x48>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d101      	bne.n	8000dd8 <get_RFID_event_ocurrence+0x3c>
	{

		return true;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <get_RFID_event_ocurrence+0x3e>
//		}


	}

	return false;
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000170 	.word	0x20000170
 8000de4:	2000016c 	.word	0x2000016c
 8000de8:	20000180 	.word	0x20000180

08000dec <GetKeyRead>:

uint8_t * GetKeyRead(void){
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

	return str;
 8000df0:	4b02      	ldr	r3, [pc, #8]	; (8000dfc <GetKeyRead+0x10>)
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	20000170 	.word	0x20000170

08000e00 <Write_MFRC522>:
 * Note: wait 1 byte is stored in register MFRC522
 * Input: addr-> DIa write only, val-> Value to write
 * Check: No
 */
void Write_MFRC522(uint8_t addr, uint8_t val)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	460a      	mov	r2, r1
 8000e0a:	71fb      	strb	r3, [r7, #7]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	71bb      	strb	r3, [r7, #6]

//	//The address is located:0XXXXXX0
	SPI_TransmitReceiveBlocking((addr<<1)&0x7E,1,SPI_CONTINUE_COM);
 8000e10:	79fb      	ldrb	r3, [r7, #7]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2101      	movs	r1, #1
 8000e20:	4618      	mov	r0, r3
 8000e22:	f000 fa3b 	bl	800129c <SPI_TransmitReceiveBlocking>
	SPI_TransmitReceiveBlocking(val,1,SPI_END_COM);
 8000e26:	79bb      	ldrb	r3, [r7, #6]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f000 fa35 	bl	800129c <SPI_TransmitReceiveBlocking>

}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <Read_MFRC522>:
 * Note: A 1-byte doc is stored from a register MFRC522
 * Input: addr-> address doc
 * Look up: Value in the read register
 */
uint8_t Read_MFRC522(uint8_t addr)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	4603      	mov	r3, r0
 8000e42:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	//The address is located:1XXXXXX0
	SPI_TransmitReceiveBlocking(((addr<<1)&0x7E) | 0x80,1,SPI_CONTINUE_COM);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	b25b      	sxtb	r3, r3
 8000e4a:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8000e4e:	b25b      	sxtb	r3, r3
 8000e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e54:	b25b      	sxtb	r3, r3
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2200      	movs	r2, #0
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f000 fa1d 	bl	800129c <SPI_TransmitReceiveBlocking>
	val = SPI_TransmitReceiveBlocking(0x00,1,SPI_END_COM);
 8000e62:	2201      	movs	r2, #1
 8000e64:	2101      	movs	r1, #1
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 fa18 	bl	800129c <SPI_TransmitReceiveBlocking>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	73fb      	strb	r3, [r7, #15]

	return val;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]

}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <SetBitMask>:
 * Note: Set bits in an MFRC522 register
 * Input: reg - Registers settings; mask - value set
 * Check: No
 */
void SetBitMask(uint8_t reg, uint8_t mask)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	460a      	mov	r2, r1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	4613      	mov	r3, r2
 8000e88:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ffd4 	bl	8000e3a <Read_MFRC522>
 8000e92:	4603      	mov	r3, r0
 8000e94:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000e96:	7bfa      	ldrb	r2, [r7, #15]
 8000e98:	79bb      	ldrb	r3, [r7, #6]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	79fb      	ldrb	r3, [r7, #7]
 8000ea0:	4611      	mov	r1, r2
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff ffac 	bl	8000e00 <Write_MFRC522>
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <ClearBitMask>:
 * Note: Reset bit in register MFRC522
 * Input: reg - Dia register; mask - Value bit can clear
 * Check: No
 */
void ClearBitMask(uint8_t reg, uint8_t mask)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	460a      	mov	r2, r1
 8000eba:	71fb      	strb	r3, [r7, #7]
 8000ebc:	4613      	mov	r3, r2
 8000ebe:	71bb      	strb	r3, [r7, #6]
    uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ffb9 	bl	8000e3a <Read_MFRC522>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000ecc:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	b25a      	sxtb	r2, r3
 8000ed4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	b25b      	sxtb	r3, r3
 8000edc:	b2da      	uxtb	r2, r3
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	4611      	mov	r1, r2
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff8c 	bl	8000e00 <Write_MFRC522>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <AntennaOn>:
 * Chuc Nang: Mo antenna, should have at least 1 ms
 * Input: no
 * Check: no
 */
void AntennaOn(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0


Read_MFRC522(TxControlReg);
 8000ef4:	2014      	movs	r0, #20
 8000ef6:	f7ff ffa0 	bl	8000e3a <Read_MFRC522>
//	if (!(temp & 0x03))
//	{
//		SetBitMask(TxControlReg, 0x03);
//	}
	SetBitMask(TxControlReg, 0x03);
 8000efa:	2103      	movs	r1, #3
 8000efc:	2014      	movs	r0, #20
 8000efe:	f7ff ffbc 	bl	8000e7a <SetBitMask>
}
 8000f02:	bf00      	nop
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <MFRC522_Reset>:
 * Look: Restart RC522
 * Input: No.
 * Return: No.
 */
void MFRC522_Reset(void)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	2001      	movs	r0, #1
 8000f0e:	f7ff ff77 	bl	8000e00 <Write_MFRC522>
}
 8000f12:	bf00      	nop
 8000f14:	bd80      	pop	{r7, pc}
	...

08000f18 <MFRC522_Init>:
 * Start RC522
 * Input:  No.
 * Look up:  No.
 */
void MFRC522_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0

	//GPIO_SetBits(MFRC522_CS_GPIO,MFRC522_CS_PIN);						// Activate the RFID reader
	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_4,GPIO_PIN_SET);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	2110      	movs	r1, #16
 8000f20:	4812      	ldr	r0, [pc, #72]	; (8000f6c <MFRC522_Init+0x54>)
 8000f22:	f000 ff25 	bl	8001d70 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 8000f26:	2201      	movs	r2, #1
 8000f28:	2101      	movs	r1, #1
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <MFRC522_Init+0x58>)
 8000f2c:	f000 ff20 	bl	8001d70 <HAL_GPIO_WritePin>
	//GPIO_SetBits(MFRC522_RST_GPIO,MFRC522_RST_PIN);					// not reset

		// spi config
	//MFRC522_SPI_Init();

	MFRC522_Reset();
 8000f30:	f7ff ffe9 	bl	8000f06 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//auto=1; f(Timer) = 6.78MHz/TPreScaler
 8000f34:	218d      	movs	r1, #141	; 0x8d
 8000f36:	202a      	movs	r0, #42	; 0x2a
 8000f38:	f7ff ff62 	bl	8000e00 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000f3c:	213e      	movs	r1, #62	; 0x3e
 8000f3e:	202b      	movs	r0, #43	; 0x2b
 8000f40:	f7ff ff5e 	bl	8000e00 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 8000f44:	211e      	movs	r1, #30
 8000f46:	202d      	movs	r0, #45	; 0x2d
 8000f48:	f7ff ff5a 	bl	8000e00 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	202c      	movs	r0, #44	; 0x2c
 8000f50:	f7ff ff56 	bl	8000e00 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		//100%ASK
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	2015      	movs	r0, #21
 8000f58:	f7ff ff52 	bl	8000e00 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		//CRC Original value 0x6363	???
 8000f5c:	213d      	movs	r1, #61	; 0x3d
 8000f5e:	2011      	movs	r0, #17
 8000f60:	f7ff ff4e 	bl	8000e00 <Write_MFRC522>

	//ClearBitMask(Status2Reg, 0x08);		//MFCrypto1On=0
	//Write_MFRC522(RxSelReg, 0x86);		//RxWait = RxSelReg[5..0]
	//Write_MFRC522(RFCfgReg, 0x7F);   		//RxGain = 48dB

	AntennaOn();		//Mo Anten
 8000f64:	f7ff ffc4 	bl	8000ef0 <AntennaOn>
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40020000 	.word	0x40020000
 8000f70:	40020400 	.word	0x40020400

08000f74 <MFRC522_ToCard>:
 *			 backData - BackData is returned
 *			 backLen - Retrieve the data number
 * Check: MI_OK if successful
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint *backLen)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b089      	sub	sp, #36	; 0x24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	4603      	mov	r3, r0
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	4613      	mov	r3, r2
 8000f84:	73bb      	strb	r3, [r7, #14]
    uint8_t status = MI_ERR;
 8000f86:	2302      	movs	r3, #2
 8000f88:	77fb      	strb	r3, [r7, #31]
    uint8_t irqEn = 0x00;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	77bb      	strb	r3, [r7, #30]
    uint8_t waitIRq = 0x00;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	777b      	strb	r3, [r7, #29]
    uint8_t lastBits;
    uint8_t n;
    uint i;

    switch (command)
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
 8000f94:	2b0c      	cmp	r3, #12
 8000f96:	d006      	beq.n	8000fa6 <MFRC522_ToCard+0x32>
 8000f98:	2b0e      	cmp	r3, #14
 8000f9a:	d109      	bne.n	8000fb0 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		//Acknowledging the liver
		{
			irqEn = 0x12;
 8000f9c:	2312      	movs	r3, #18
 8000f9e:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000fa0:	2310      	movs	r3, #16
 8000fa2:	777b      	strb	r3, [r7, #29]
			break;
 8000fa4:	e005      	b.n	8000fb2 <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// FIFO data collection
		{
			irqEn = 0x77;
 8000fa6:	2377      	movs	r3, #119	; 0x77
 8000fa8:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000faa:	2330      	movs	r3, #48	; 0x30
 8000fac:	777b      	strb	r3, [r7, #29]
			break;
 8000fae:	e000      	b.n	8000fb2 <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000fb0:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	//Yeu cau ngat
 8000fb2:	7fbb      	ldrb	r3, [r7, #30]
 8000fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	4619      	mov	r1, r3
 8000fbc:	2002      	movs	r0, #2
 8000fbe:	f7ff ff1f 	bl	8000e00 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			//Clear all the bits
 8000fc2:	2180      	movs	r1, #128	; 0x80
 8000fc4:	2004      	movs	r0, #4
 8000fc6:	f7ff ff73 	bl	8000eb0 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			//FlushBuffer=1, FIFO
 8000fca:	2180      	movs	r1, #128	; 0x80
 8000fcc:	200a      	movs	r0, #10
 8000fce:	f7ff ff54 	bl	8000e7a <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	//NO action; Huy bo lenh hien hanh	???
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	2001      	movs	r0, #1
 8000fd6:	f7ff ff13 	bl	8000e00 <Write_MFRC522>

	// Record in FIFO
    for (i=0; i<sendLen; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	e00a      	b.n	8000ff6 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	69bb      	ldr	r3, [r7, #24]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	4619      	mov	r1, r3
 8000fea:	2009      	movs	r0, #9
 8000fec:	f7ff ff08 	bl	8000e00 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	61bb      	str	r3, [r7, #24]
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d3f0      	bcc.n	8000fe0 <MFRC522_ToCard+0x6c>
	}

	//chay
	Write_MFRC522(CommandReg, command);
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4619      	mov	r1, r3
 8001002:	2001      	movs	r0, #1
 8001004:	f7ff fefc 	bl	8000e00 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d103      	bne.n	8001016 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		//StartSend=1,transmission of data starts
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	200d      	movs	r0, #13
 8001012:	f7ff ff32 	bl	8000e7a <SetBitMask>
	}

	//The team is allowed to be stored
	i = 2000;	//i tuy thuoc tan so thach anh, thoi gian toi da cho the M1 la 25ms
 8001016:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800101a:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 800101c:	2004      	movs	r0, #4
 800101e:	f7ff ff0c 	bl	8000e3a <Read_MFRC522>
 8001022:	4603      	mov	r3, r0
 8001024:	773b      	strb	r3, [r7, #28]
        i--;
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	3b01      	subs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800102c:	69bb      	ldr	r3, [r7, #24]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d00a      	beq.n	8001048 <MFRC522_ToCard+0xd4>
 8001032:	7f3b      	ldrb	r3, [r7, #28]
 8001034:	f003 0301 	and.w	r3, r3, #1
 8001038:	2b00      	cmp	r3, #0
 800103a:	d105      	bne.n	8001048 <MFRC522_ToCard+0xd4>
 800103c:	7f3a      	ldrb	r2, [r7, #28]
 800103e:	7f7b      	ldrb	r3, [r7, #29]
 8001040:	4013      	ands	r3, r2
 8001042:	b2db      	uxtb	r3, r3
 8001044:	2b00      	cmp	r3, #0
 8001046:	d0e9      	beq.n	800101c <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001048:	2180      	movs	r1, #128	; 0x80
 800104a:	200d      	movs	r0, #13
 800104c:	f7ff ff30 	bl	8000eb0 <ClearBitMask>

    if (i != 0)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d052      	beq.n	80010fc <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8001056:	2006      	movs	r0, #6
 8001058:	f7ff feef 	bl	8000e3a <Read_MFRC522>
 800105c:	4603      	mov	r3, r0
 800105e:	f003 031b 	and.w	r3, r3, #27
 8001062:	2b00      	cmp	r3, #0
 8001064:	d148      	bne.n	80010f8 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8001066:	2300      	movs	r3, #0
 8001068:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 800106a:	7f3a      	ldrb	r2, [r7, #28]
 800106c:	7fbb      	ldrb	r3, [r7, #30]
 800106e:	4013      	ands	r3, r2
 8001070:	b2db      	uxtb	r3, r3
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;			//??
 800107a:	2301      	movs	r3, #1
 800107c:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	2b0c      	cmp	r3, #12
 8001082:	d13b      	bne.n	80010fc <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8001084:	200a      	movs	r0, #10
 8001086:	f7ff fed8 	bl	8000e3a <Read_MFRC522>
 800108a:	4603      	mov	r3, r0
 800108c:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 800108e:	200c      	movs	r0, #12
 8001090:	f7ff fed3 	bl	8000e3a <Read_MFRC522>
 8001094:	4603      	mov	r3, r0
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d008      	beq.n	80010b4 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 80010a2:	7f3b      	ldrb	r3, [r7, #28]
 80010a4:	3b01      	subs	r3, #1
 80010a6:	00da      	lsls	r2, r3, #3
 80010a8:	7dfb      	ldrb	r3, [r7, #23]
 80010aa:	4413      	add	r3, r2
 80010ac:	461a      	mov	r2, r3
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e004      	b.n	80010be <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 80010b4:	7f3b      	ldrb	r3, [r7, #28]
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	461a      	mov	r2, r3
 80010ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010bc:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80010be:	7f3b      	ldrb	r3, [r7, #28]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d101      	bne.n	80010c8 <MFRC522_ToCard+0x154>
                {
					n = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80010c8:	7f3b      	ldrb	r3, [r7, #28]
 80010ca:	2b10      	cmp	r3, #16
 80010cc:	d901      	bls.n	80010d2 <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 80010ce:	2310      	movs	r3, #16
 80010d0:	773b      	strb	r3, [r7, #28]
				}

				//FIFO doc in the received data
                for (i=0; i<n; i++)
 80010d2:	2300      	movs	r3, #0
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	e00a      	b.n	80010ee <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	18d4      	adds	r4, r2, r3
 80010de:	2009      	movs	r0, #9
 80010e0:	f7ff feab 	bl	8000e3a <Read_MFRC522>
 80010e4:	4603      	mov	r3, r0
 80010e6:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	3301      	adds	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
 80010ee:	7f3b      	ldrb	r3, [r7, #28]
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3f0      	bcc.n	80010d8 <MFRC522_ToCard+0x164>
 80010f6:	e001      	b.n	80010fc <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 80010f8:	2302      	movs	r3, #2
 80010fa:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 80010fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3724      	adds	r7, #36	; 0x24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}

08001106 <MFRC522_Request>:
 *				0x0800 = Mifare_Pro(X)
 *				0x4403 = Mifare_DESFire
 * Return: MI_OK if the bar is curved
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8001106:	b580      	push	{r7, lr}
 8001108:	b086      	sub	sp, #24
 800110a:	af02      	add	r7, sp, #8
 800110c:	4603      	mov	r3, r0
 800110e:	6039      	str	r1, [r7, #0]
 8001110:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint backBits;			//The bits are manipulated

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]	???
 8001112:	2107      	movs	r1, #7
 8001114:	200d      	movs	r0, #13
 8001116:	f7ff fe73 	bl	8000e00 <Write_MFRC522>

	TagType[0] = reqMode;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	79fa      	ldrb	r2, [r7, #7]
 800111e:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	2201      	movs	r2, #1
 800112a:	6839      	ldr	r1, [r7, #0]
 800112c:	200c      	movs	r0, #12
 800112e:	f7ff ff21 	bl	8000f74 <MFRC522_ToCard>
 8001132:	4603      	mov	r3, r0
 8001134:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <MFRC522_Request+0x3c>
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	2b10      	cmp	r3, #16
 8001140:	d001      	beq.n	8001146 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8001142:	2302      	movs	r3, #2
 8001144:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8001146:	7bfb      	ldrb	r3, [r7, #15]
}
 8001148:	4618      	mov	r0, r3
 800114a:	3710      	adds	r7, #16
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <MFRC522_Anticoll>:
 * Detect the collision, select and read the serial number
 * Input: serNum - Look up the serial the 4 byte, byte 5 is the ma checksum
 * Check: MI_OK if successful
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af02      	add	r7, sp, #8
 8001156:	6078      	str	r0, [r7, #4]
    uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
 8001158:	2300      	movs	r3, #0
 800115a:	737b      	strb	r3, [r7, #13]
    uint unLen;


    //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
    //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 800115c:	2100      	movs	r1, #0
 800115e:	200d      	movs	r0, #13
 8001160:	f7ff fe4e 	bl	8000e00 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2293      	movs	r2, #147	; 0x93
 8001168:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	3301      	adds	r3, #1
 800116e:	2220      	movs	r2, #32
 8001170:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001172:	f107 0308 	add.w	r3, r7, #8
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2202      	movs	r2, #2
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	200c      	movs	r0, #12
 8001180:	f7ff fef8 	bl	8000f74 <MFRC522_ToCard>
 8001184:	4603      	mov	r3, r0
 8001186:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001188:	7bfb      	ldrb	r3, [r7, #15]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d118      	bne.n	80011c0 <MFRC522_Anticoll+0x70>
	{
		//Check the serial number
		for (i=0; i<4; i++)
 800118e:	2300      	movs	r3, #0
 8001190:	73bb      	strb	r3, [r7, #14]
 8001192:	e009      	b.n	80011a8 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8001194:	7bbb      	ldrb	r3, [r7, #14]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4413      	add	r3, r2
 800119a:	781a      	ldrb	r2, [r3, #0]
 800119c:	7b7b      	ldrb	r3, [r7, #13]
 800119e:	4053      	eors	r3, r2
 80011a0:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80011a2:	7bbb      	ldrb	r3, [r7, #14]
 80011a4:	3301      	adds	r3, #1
 80011a6:	73bb      	strb	r3, [r7, #14]
 80011a8:	7bbb      	ldrb	r3, [r7, #14]
 80011aa:	2b03      	cmp	r3, #3
 80011ac:	d9f2      	bls.n	8001194 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80011ae:	7bbb      	ldrb	r3, [r7, #14]
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4413      	add	r3, r2
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	7b7a      	ldrb	r2, [r7, #13]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d001      	beq.n	80011c0 <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 80011bc:	2302      	movs	r3, #2
 80011be:	73fb      	strb	r3, [r7, #15]
		}
    }

    //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

    return status;
 80011c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <SPI_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void SPI_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d2:	1d3b      	adds	r3, r7, #4
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_SDA_GPIO_GPIO_Port, SPI_SDA_GPIO_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2110      	movs	r1, #16
 80011e4:	4829      	ldr	r0, [pc, #164]	; (800128c <SPI_Init+0xc0>)
 80011e6:	f000 fdc3 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RFC_RST_GPIO_GPIO_Port, RFC_RST_GPIO_Pin, GPIO_PIN_RESET);
 80011ea:	2200      	movs	r2, #0
 80011ec:	2101      	movs	r1, #1
 80011ee:	4828      	ldr	r0, [pc, #160]	; (8001290 <SPI_Init+0xc4>)
 80011f0:	f000 fdbe 	bl	8001d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI_SDA_GPIO_Pin */
  GPIO_InitStruct.Pin = SPI_SDA_GPIO_Pin;
 80011f4:	2310      	movs	r3, #16
 80011f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001200:	2300      	movs	r3, #0
 8001202:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SPI_SDA_GPIO_GPIO_Port, &GPIO_InitStruct);
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4619      	mov	r1, r3
 8001208:	4820      	ldr	r0, [pc, #128]	; (800128c <SPI_Init+0xc0>)
 800120a:	f000 fc15 	bl	8001a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : RFC_RST_GPIO_Pin */
  GPIO_InitStruct.Pin = RFC_RST_GPIO_Pin;
 800120e:	2301      	movs	r3, #1
 8001210:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RFC_RST_GPIO_GPIO_Port, &GPIO_InitStruct);
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	481b      	ldr	r0, [pc, #108]	; (8001290 <SPI_Init+0xc4>)
 8001224:	f000 fc08 	bl	8001a38 <HAL_GPIO_Init>


  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <SPI_Init+0xc8>)
 800122a:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <SPI_Init+0xcc>)
 800122c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <SPI_Init+0xc8>)
 8001230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <SPI_Init+0xc8>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <SPI_Init+0xc8>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <SPI_Init+0xc8>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <SPI_Init+0xc8>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <SPI_Init+0xc8>)
 8001250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <SPI_Init+0xc8>)
 8001258:	2210      	movs	r2, #16
 800125a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <SPI_Init+0xc8>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <SPI_Init+0xc8>)
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <SPI_Init+0xc8>)
 800126a:	2200      	movs	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <SPI_Init+0xc8>)
 8001270:	220a      	movs	r2, #10
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <SPI_Init+0xc8>)
 8001276:	f001 fa37 	bl	80026e8 <HAL_SPI_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <SPI_Init+0xb8>
  {
    Error_Handler();
 8001280:	f7ff fa38 	bl	80006f4 <Error_Handler>
  }

}
 8001284:	bf00      	nop
 8001286:	3718      	adds	r7, #24
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	40020000 	.word	0x40020000
 8001290:	40020400 	.word	0x40020400
 8001294:	20000188 	.word	0x20000188
 8001298:	40013000 	.word	0x40013000

0800129c <SPI_TransmitReceiveBlocking>:


uint8_t SPI_TransmitReceiveBlocking(uint8_t data,uint8_t size,bool_t endOfCom)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af02      	add	r7, sp, #8
 80012a2:	4603      	mov	r3, r0
 80012a4:	71fb      	strb	r3, [r7, #7]
 80012a6:	460b      	mov	r3, r1
 80012a8:	71bb      	strb	r3, [r7, #6]
 80012aa:	4613      	mov	r3, r2
 80012ac:	717b      	strb	r3, [r7, #5]
	uint8_t rx_data;
	//Selecciono el SS
	if (!SPI_is_running){
 80012ae:	4b14      	ldr	r3, [pc, #80]	; (8001300 <SPI_TransmitReceiveBlocking+0x64>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	f083 0301 	eor.w	r3, r3, #1
 80012b6:	b2db      	uxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d007      	beq.n	80012cc <SPI_TransmitReceiveBlocking+0x30>
		HAL_GPIO_WritePin(SPI_SDA_GPIO_GPIO_Port,SPI_SDA_GPIO_Pin,SPI_ENABLE_CS);
 80012bc:	2200      	movs	r2, #0
 80012be:	2110      	movs	r1, #16
 80012c0:	4810      	ldr	r0, [pc, #64]	; (8001304 <SPI_TransmitReceiveBlocking+0x68>)
 80012c2:	f000 fd55 	bl	8001d70 <HAL_GPIO_WritePin>
		SPI_is_running = true;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <SPI_TransmitReceiveBlocking+0x64>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
	}
	HAL_SPI_TransmitReceive(&hspi1,&data,&rx_data,1,SPI_TIMEOUT);
 80012cc:	f107 020f 	add.w	r2, r7, #15
 80012d0:	1df9      	adds	r1, r7, #7
 80012d2:	2364      	movs	r3, #100	; 0x64
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	2301      	movs	r3, #1
 80012d8:	480b      	ldr	r0, [pc, #44]	; (8001308 <SPI_TransmitReceiveBlocking+0x6c>)
 80012da:	f001 fa8e 	bl	80027fa <HAL_SPI_TransmitReceive>

	if (endOfCom) {
 80012de:	797b      	ldrb	r3, [r7, #5]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d007      	beq.n	80012f4 <SPI_TransmitReceiveBlocking+0x58>
		HAL_GPIO_WritePin(SPI_SDA_GPIO_GPIO_Port,SPI_SDA_GPIO_Pin,SPI_DISABLE_CS);
 80012e4:	2201      	movs	r2, #1
 80012e6:	2110      	movs	r1, #16
 80012e8:	4806      	ldr	r0, [pc, #24]	; (8001304 <SPI_TransmitReceiveBlocking+0x68>)
 80012ea:	f000 fd41 	bl	8001d70 <HAL_GPIO_WritePin>
		SPI_is_running = false;
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <SPI_TransmitReceiveBlocking+0x64>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]
	}
	return rx_data;
 80012f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f6:	4618      	mov	r0, r3
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001e0 	.word	0x200001e0
 8001304:	40020000 	.word	0x40020000
 8001308:	20000188 	.word	0x20000188

0800130c <TIMERS_Init>:

TIM_HandleTypeDef htim10;
uint8_t TimeIsDone=0;


void TIMERS_Init(void){
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
	TIM10_Init();
 8001310:	f000 f842 	bl	8001398 <TIM10_Init>

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}

08001318 <TIME_GetTimeStatus>:

uint8_t TIME_GetTimeStatus(TIMERS myTimer){
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	4603      	mov	r3, r0
 8001320:	71fb      	strb	r3, [r7, #7]

	uint8_t TimeStatus=0;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
	switch (myTimer){
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d102      	bne.n	8001332 <TIME_GetTimeStatus+0x1a>
			case TIMER_TIMEOUT :{

				TimeStatus=TimeIsDone;
 800132c:	4b04      	ldr	r3, [pc, #16]	; (8001340 <TIME_GetTimeStatus+0x28>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	73fb      	strb	r3, [r7, #15]

			}
		}

return TimeStatus;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	2000022c 	.word	0x2000022c

08001344 <TIME_ResetTimeStatus>:

void TIME_ResetTimeStatus(TIMERS myTimer){
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]

	switch (myTimer){
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d102      	bne.n	800135a <TIME_ResetTimeStatus+0x16>
				case TIMER_TIMEOUT :{

					TimeIsDone=0;
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <TIME_ResetTimeStatus+0x28>)
 8001356:	2200      	movs	r2, #0
 8001358:	701a      	strb	r2, [r3, #0]

				}
			}

	TIMER_Start(myTimer);
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f000 f807 	bl	8001370 <TIMER_Start>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000022c 	.word	0x2000022c

08001370 <TIMER_Start>:

void TIMER_Start(TIMERS myTimer){
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]

	switch (myTimer){
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d103      	bne.n	8001388 <TIMER_Start+0x18>
		case TIMER_TIMEOUT :{

				__HAL_TIM_SetCounter(&htim10, 0); //resetea el contador
 8001380:	4b04      	ldr	r3, [pc, #16]	; (8001394 <TIMER_Start+0x24>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2200      	movs	r2, #0
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

		}
	}

}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	200001e4 	.word	0x200001e4

08001398 <TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
void TIM10_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <TIM10_Init+0x50>)
 800139e:	4a13      	ldr	r2, [pc, #76]	; (80013ec <TIM10_Init+0x54>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 17200-1;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <TIM10_Init+0x50>)
 80013a4:	f244 322f 	movw	r2, #17199	; 0x432f
 80013a8:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b0f      	ldr	r3, [pc, #60]	; (80013e8 <TIM10_Init+0x50>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	; (80013e8 <TIM10_Init+0x50>)
 80013b2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80013b6:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013b8:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <TIM10_Init+0x50>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013be:	4b0a      	ldr	r3, [pc, #40]	; (80013e8 <TIM10_Init+0x50>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013c4:	4808      	ldr	r0, [pc, #32]	; (80013e8 <TIM10_Init+0x50>)
 80013c6:	f001 fc85 	bl	8002cd4 <HAL_TIM_Base_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <TIM10_Init+0x3c>
  {
    Error_Handler();
 80013d0:	f7ff f990 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15 ,0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	210f      	movs	r1, #15
 80013d8:	2019      	movs	r0, #25
 80013da:	f000 faf6 	bl	80019ca <HAL_NVIC_SetPriority>
  HAL_TIM_Base_Start_IT(&htim10);
 80013de:	4802      	ldr	r0, [pc, #8]	; (80013e8 <TIM10_Init+0x50>)
 80013e0:	f001 fcc8 	bl	8002d74 <HAL_TIM_Base_Start_IT>
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200001e4 	.word	0x200001e4
 80013ec:	40014400 	.word	0x40014400

080013f0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
	if (htim == &htim10){
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	4a06      	ldr	r2, [pc, #24]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d104      	bne.n	800140a <HAL_TIM_PeriodElapsedCallback+0x1a>
		TimeIsDone = 1;
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
		LED_Timeout_Blink();
 8001406:	f7ff fbcf 	bl	8000ba8 <LED_Timeout_Blink>
	}
}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200001e4 	.word	0x200001e4
 8001418:	2000022c 	.word	0x2000022c

0800141c <KEYBOAD_Init>:
 */


#include "TTP229.h"

void KEYBOAD_Init(void){
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0

	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001422:	1d3b      	adds	r3, r7, #4
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
	 /*Configure GPIO pins : RFC_RST_GPIO_Pin KEYBOARD_CLK_Pin */
	  GPIO_InitStruct.Pin = RFC_RST_GPIO_Pin|KEYBOARD_CLK_Pin;
 8001430:	f240 4301 	movw	r3, #1025	; 0x401
 8001434:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001436:	2301      	movs	r3, #1
 8001438:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001442:	1d3b      	adds	r3, r7, #4
 8001444:	4619      	mov	r1, r3
 8001446:	480b      	ldr	r0, [pc, #44]	; (8001474 <KEYBOAD_Init+0x58>)
 8001448:	f000 faf6 	bl	8001a38 <HAL_GPIO_Init>
//	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//	  GPIO_InitStruct.Pull = GPIO_MODE_IT_RISING_FALLING;
//	  HAL_GPIO_Init(KEYBOARD_DATA_GPIO_Port, &GPIO_InitStruct);
//
	  /*Configure GPIO pin : KEYBOARD_DATA_Pin */
	  GPIO_InitStruct.Pin = KEYBOARD_DATA_Pin;
 800144c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001450:	607b      	str	r3, [r7, #4]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001452:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8001456:	60bb      	str	r3, [r7, #8]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
	  HAL_GPIO_Init(KEYBOARD_DATA_GPIO_Port, &GPIO_InitStruct);
 800145c:	1d3b      	adds	r3, r7, #4
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <KEYBOAD_Init+0x5c>)
 8001462:	f000 fae9 	bl	8001a38 <HAL_GPIO_Init>

	  KEYBOARD_Write_CLK(HIGH);
 8001466:	2001      	movs	r0, #1
 8001468:	f000 f834 	bl	80014d4 <KEYBOARD_Write_CLK>

}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40020400 	.word	0x40020400
 8001478:	40020000 	.word	0x40020000

0800147c <KEYBOARD_ReadData>:


uint8_t KEYBOARD_ReadData(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
	uint8_t Count;
	uint8_t Key_State = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	71bb      	strb	r3, [r7, #6]

/* Pulse the clock pin 16 times (one for each key of the keypad)
and read the state of the data pin on each pulse */
	for(Count = 1; Count <= 16; Count++)
 8001486:	2301      	movs	r3, #1
 8001488:	71fb      	strb	r3, [r7, #7]
 800148a:	e018      	b.n	80014be <KEYBOARD_ReadData+0x42>
	{
		KEYBOARD_Write_CLK(LOW);
 800148c:	2000      	movs	r0, #0
 800148e:	f000 f821 	bl	80014d4 <KEYBOARD_Write_CLK>
	/* If the data pin is low (active low mode) then store the
	current key number */
		for (int i=0;i<25;i++){
 8001492:	2300      	movs	r3, #0
 8001494:	603b      	str	r3, [r7, #0]
 8001496:	e009      	b.n	80014ac <KEYBOARD_ReadData+0x30>
		if (!KEYBOARD_Read_DATA()){
 8001498:	f000 f82e 	bl	80014f8 <KEYBOARD_Read_DATA>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d101      	bne.n	80014a6 <KEYBOARD_ReadData+0x2a>
			Key_State = Count;
 80014a2:	79fb      	ldrb	r3, [r7, #7]
 80014a4:	71bb      	strb	r3, [r7, #6]
		for (int i=0;i<25;i++){
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	603b      	str	r3, [r7, #0]
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	2b18      	cmp	r3, #24
 80014b0:	ddf2      	ble.n	8001498 <KEYBOARD_ReadData+0x1c>
		}
		}
		KEYBOARD_Write_CLK(HIGH);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f000 f80e 	bl	80014d4 <KEYBOARD_Write_CLK>
	for(Count = 1; Count <= 16; Count++)
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	3301      	adds	r3, #1
 80014bc:	71fb      	strb	r3, [r7, #7]
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b10      	cmp	r3, #16
 80014c2:	d9e3      	bls.n	800148c <KEYBOARD_ReadData+0x10>
	}
	HAL_Delay(100);
 80014c4:	2064      	movs	r0, #100	; 0x64
 80014c6:	f000 f981 	bl	80017cc <HAL_Delay>
	return Key_State;
 80014ca:	79bb      	ldrb	r3, [r7, #6]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <KEYBOARD_Write_CLK>:


void KEYBOARD_Write_CLK(GPIO_PinState value){
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(KEYBOARD_CLK_GPIO_Port,KEYBOARD_CLK_Pin,value);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	461a      	mov	r2, r3
 80014e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014e6:	4803      	ldr	r0, [pc, #12]	; (80014f4 <KEYBOARD_Write_CLK+0x20>)
 80014e8:	f000 fc42 	bl	8001d70 <HAL_GPIO_WritePin>

}
 80014ec:	bf00      	nop
 80014ee:	3708      	adds	r7, #8
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40020400 	.word	0x40020400

080014f8 <KEYBOARD_Read_DATA>:

GPIO_PinState KEYBOARD_Read_DATA(){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0

	GPIO_PinState value = HAL_GPIO_ReadPin(KEYBOARD_DATA_GPIO_Port,KEYBOARD_DATA_Pin);
 80014fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <KEYBOARD_Read_DATA+0x20>)
 8001504:	f000 fc1c 	bl	8001d40 <HAL_GPIO_ReadPin>
 8001508:	4603      	mov	r3, r0
 800150a:	71fb      	strb	r3, [r7, #7]
	return value;
 800150c:	79fb      	ldrb	r3, [r7, #7]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40020000 	.word	0x40020000

0800151c <USERS_DATA_INIT>:

uint8_t ReadKeyCard[4]={0,0,0,0};
uint8_t ReadPIN[4]={0,0,0,0};


void USERS_DATA_INIT(void){
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
	for (int i=0;i<4;i++){
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	e015      	b.n	8001554 <USERS_DATA_INIT+0x38>
		ArrayOfUsers[0].UserKeyCard[i] = AdminKey_Card[i];
 8001528:	4a12      	ldr	r2, [pc, #72]	; (8001574 <USERS_DATA_INIT+0x58>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4413      	add	r3, r2
 800152e:	7819      	ldrb	r1, [r3, #0]
 8001530:	4a11      	ldr	r2, [pc, #68]	; (8001578 <USERS_DATA_INIT+0x5c>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	460a      	mov	r2, r1
 8001538:	701a      	strb	r2, [r3, #0]
		ArrayOfUsers[0].UserPin[i] = AdminPIN[i];
 800153a:	4a10      	ldr	r2, [pc, #64]	; (800157c <USERS_DATA_INIT+0x60>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4413      	add	r3, r2
 8001540:	7819      	ldrb	r1, [r3, #0]
 8001542:	4a0d      	ldr	r2, [pc, #52]	; (8001578 <USERS_DATA_INIT+0x5c>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4413      	add	r3, r2
 8001548:	3304      	adds	r3, #4
 800154a:	460a      	mov	r2, r1
 800154c:	701a      	strb	r2, [r3, #0]
	for (int i=0;i<4;i++){
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3301      	adds	r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b03      	cmp	r3, #3
 8001558:	dde6      	ble.n	8001528 <USERS_DATA_INIT+0xc>
	}
	CurrentMaxUserNumbers++;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <USERS_DATA_INIT+0x64>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	3301      	adds	r3, #1
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4b07      	ldr	r3, [pc, #28]	; (8001580 <USERS_DATA_INIT+0x64>)
 8001564:	701a      	strb	r2, [r3, #0]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	20000134 	.word	0x20000134
 8001578:	20000230 	.word	0x20000230
 800157c:	20000138 	.word	0x20000138
 8001580:	20000280 	.word	0x20000280

08001584 <USERS_DATA_VALIDATE_KEYCARD>:

bool USERS_DATA_VALIDATE_KEYCARD(uint8_t * KeyCardReaded){
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

	for (uint8_t j=0;j<CurrentMaxUserNumbers;j++){
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
 8001590:	e02d      	b.n	80015ee <USERS_DATA_VALIDATE_KEYCARD+0x6a>
		if((KeyCardReaded[0]==ArrayOfUsers[j].UserKeyCard[0]) || (KeyCardReaded[1]==ArrayOfUsers[j].UserKeyCard[1]) || (KeyCardReaded[2]==ArrayOfUsers[j].UserKeyCard[2]) || (KeyCardReaded[3]==ArrayOfUsers[j].UserKeyCard[3]) ){
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	781a      	ldrb	r2, [r3, #0]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	491b      	ldr	r1, [pc, #108]	; (8001608 <USERS_DATA_VALIDATE_KEYCARD+0x84>)
 800159a:	f811 3033 	ldrb.w	r3, [r1, r3, lsl #3]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d01d      	beq.n	80015de <USERS_DATA_VALIDATE_KEYCARD+0x5a>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	3301      	adds	r3, #1
 80015a6:	781a      	ldrb	r2, [r3, #0]
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	4917      	ldr	r1, [pc, #92]	; (8001608 <USERS_DATA_VALIDATE_KEYCARD+0x84>)
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	785b      	ldrb	r3, [r3, #1]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d013      	beq.n	80015de <USERS_DATA_VALIDATE_KEYCARD+0x5a>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3302      	adds	r3, #2
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	7bfb      	ldrb	r3, [r7, #15]
 80015be:	4912      	ldr	r1, [pc, #72]	; (8001608 <USERS_DATA_VALIDATE_KEYCARD+0x84>)
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	440b      	add	r3, r1
 80015c4:	789b      	ldrb	r3, [r3, #2]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d009      	beq.n	80015de <USERS_DATA_VALIDATE_KEYCARD+0x5a>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	3303      	adds	r3, #3
 80015ce:	781a      	ldrb	r2, [r3, #0]
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	490d      	ldr	r1, [pc, #52]	; (8001608 <USERS_DATA_VALIDATE_KEYCARD+0x84>)
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	78db      	ldrb	r3, [r3, #3]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d104      	bne.n	80015e8 <USERS_DATA_VALIDATE_KEYCARD+0x64>
			WhoIsThis = j;
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <USERS_DATA_VALIDATE_KEYCARD+0x88>)
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
 80015e2:	7013      	strb	r3, [r2, #0]
			return true;
 80015e4:	2301      	movs	r3, #1
 80015e6:	e008      	b.n	80015fa <USERS_DATA_VALIDATE_KEYCARD+0x76>
	for (uint8_t j=0;j<CurrentMaxUserNumbers;j++){
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	3301      	adds	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <USERS_DATA_VALIDATE_KEYCARD+0x8c>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	7bfa      	ldrb	r2, [r7, #15]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d3cc      	bcc.n	8001592 <USERS_DATA_VALIDATE_KEYCARD+0xe>
		}
	}
return false;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000230 	.word	0x20000230
 800160c:	20000281 	.word	0x20000281
 8001610:	20000280 	.word	0x20000280

08001614 <USERS_DATA_COLLECT_FIRST_NUMBER>:

void USERS_DATA_COLLECT_FIRST_NUMBER(uint8_t * PIN_FirstNumber){
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]

	ReadPIN[0]=*PIN_FirstNumber;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	781a      	ldrb	r2, [r3, #0]
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <USERS_DATA_COLLECT_FIRST_NUMBER+0x1c>)
 8001622:	701a      	strb	r2, [r3, #0]

}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	20000284 	.word	0x20000284

08001634 <USERS_DATA_COLLECT_SECOND_NUMBER>:

void USERS_DATA_COLLECT_SECOND_NUMBER(uint8_t * PIN_SecondNumber){
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	ReadPIN[1]=*PIN_SecondNumber;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	781a      	ldrb	r2, [r3, #0]
 8001640:	4b03      	ldr	r3, [pc, #12]	; (8001650 <USERS_DATA_COLLECT_SECOND_NUMBER+0x1c>)
 8001642:	705a      	strb	r2, [r3, #1]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	20000284 	.word	0x20000284

08001654 <USERS_DATA_COLLECT_THIRD_NUMBER>:
void USERS_DATA_COLLECT_THIRD_NUMBER(uint8_t * PIN_ThirdNumber){
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
	ReadPIN[2]=*PIN_ThirdNumber;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	781a      	ldrb	r2, [r3, #0]
 8001660:	4b03      	ldr	r3, [pc, #12]	; (8001670 <USERS_DATA_COLLECT_THIRD_NUMBER+0x1c>)
 8001662:	709a      	strb	r2, [r3, #2]
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	20000284 	.word	0x20000284

08001674 <USERS_DATA_COLLECT_FOURTH_NUMBER>:
void USERS_DATA_COLLECT_FOURTH_NUMBER(uint8_t * PIN_FourtNumber){
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	ReadPIN[3]=*PIN_FourtNumber;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	781a      	ldrb	r2, [r3, #0]
 8001680:	4b03      	ldr	r3, [pc, #12]	; (8001690 <USERS_DATA_COLLECT_FOURTH_NUMBER+0x1c>)
 8001682:	70da      	strb	r2, [r3, #3]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	20000284 	.word	0x20000284

08001694 <USERS_DATA_VALIDATE_PIN>:

bool USERS_DATA_VALIDATE_PIN(void){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0

	for (int i=0;i<4;i++){
 800169a:	2300      	movs	r3, #0
 800169c:	607b      	str	r3, [r7, #4]
 800169e:	e013      	b.n	80016c8 <USERS_DATA_VALIDATE_PIN+0x34>
		if (ReadPIN[i] != ArrayOfUsers[WhoIsThis].UserPin[i]){
 80016a0:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <USERS_DATA_VALIDATE_PIN+0x48>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	781a      	ldrb	r2, [r3, #0]
 80016a8:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <USERS_DATA_VALIDATE_PIN+0x4c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	490d      	ldr	r1, [pc, #52]	; (80016e4 <USERS_DATA_VALIDATE_PIN+0x50>)
 80016ae:	00db      	lsls	r3, r3, #3
 80016b0:	4419      	add	r1, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	440b      	add	r3, r1
 80016b6:	3304      	adds	r3, #4
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d001      	beq.n	80016c2 <USERS_DATA_VALIDATE_PIN+0x2e>
			return false;
 80016be:	2300      	movs	r3, #0
 80016c0:	e006      	b.n	80016d0 <USERS_DATA_VALIDATE_PIN+0x3c>
	for (int i=0;i<4;i++){
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3301      	adds	r3, #1
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b03      	cmp	r3, #3
 80016cc:	dde8      	ble.n	80016a0 <USERS_DATA_VALIDATE_PIN+0xc>
		}
	}
return true;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	20000284 	.word	0x20000284
 80016e0:	20000281 	.word	0x20000281
 80016e4:	20000230 	.word	0x20000230

080016e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <HAL_Init+0x40>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <HAL_Init+0x40>)
 80016f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f8:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <HAL_Init+0x40>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <HAL_Init+0x40>)
 80016fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001702:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_Init+0x40>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_Init+0x40>)
 800170a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 f94f 	bl	80019b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001716:	2000      	movs	r0, #0
 8001718:	f000 f808 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171c:	f7fe fff0 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f967 	bl	8001a1e <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001768:	f000 f92f 	bl	80019ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000000 	.word	0x20000000
 8001784:	20000140 	.word	0x20000140
 8001788:	2000013c 	.word	0x2000013c

0800178c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x20>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	461a      	mov	r2, r3
 8001796:	4b06      	ldr	r3, [pc, #24]	; (80017b0 <HAL_IncTick+0x24>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4413      	add	r3, r2
 800179c:	4a04      	ldr	r2, [pc, #16]	; (80017b0 <HAL_IncTick+0x24>)
 800179e:	6013      	str	r3, [r2, #0]
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	20000140 	.word	0x20000140
 80017b0:	20000288 	.word	0x20000288

080017b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return uwTick;
 80017b8:	4b03      	ldr	r3, [pc, #12]	; (80017c8 <HAL_GetTick+0x14>)
 80017ba:	681b      	ldr	r3, [r3, #0]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	20000288 	.word	0x20000288

080017cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff ffee 	bl	80017b4 <HAL_GetTick>
 80017d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017e4:	d005      	beq.n	80017f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017e6:	4b0a      	ldr	r3, [pc, #40]	; (8001810 <HAL_Delay+0x44>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	461a      	mov	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4413      	add	r3, r2
 80017f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017f2:	bf00      	nop
 80017f4:	f7ff ffde 	bl	80017b4 <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	429a      	cmp	r2, r3
 8001802:	d8f7      	bhi.n	80017f4 <HAL_Delay+0x28>
  {
  }
}
 8001804:	bf00      	nop
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	20000140 	.word	0x20000140

08001814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182a:	68ba      	ldr	r2, [r7, #8]
 800182c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001830:	4013      	ands	r3, r2
 8001832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001838:	68bb      	ldr	r3, [r7, #8]
 800183a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800183c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x44>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00

0800185c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001860:	4b04      	ldr	r3, [pc, #16]	; (8001874 <__NVIC_GetPriorityGrouping+0x18>)
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	0a1b      	lsrs	r3, r3, #8
 8001866:	f003 0307 	and.w	r3, r3, #7
}
 800186a:	4618      	mov	r0, r3
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	2b00      	cmp	r3, #0
 8001888:	db0b      	blt.n	80018a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	f003 021f 	and.w	r2, r3, #31
 8001890:	4907      	ldr	r1, [pc, #28]	; (80018b0 <__NVIC_EnableIRQ+0x38>)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	095b      	lsrs	r3, r3, #5
 8001898:	2001      	movs	r0, #1
 800189a:	fa00 f202 	lsl.w	r2, r0, r2
 800189e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000e100 	.word	0xe000e100

080018b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	4603      	mov	r3, r0
 80018bc:	6039      	str	r1, [r7, #0]
 80018be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	db0a      	blt.n	80018de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	b2da      	uxtb	r2, r3
 80018cc:	490c      	ldr	r1, [pc, #48]	; (8001900 <__NVIC_SetPriority+0x4c>)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	0112      	lsls	r2, r2, #4
 80018d4:	b2d2      	uxtb	r2, r2
 80018d6:	440b      	add	r3, r1
 80018d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018dc:	e00a      	b.n	80018f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <__NVIC_SetPriority+0x50>)
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f003 030f 	and.w	r3, r3, #15
 80018ea:	3b04      	subs	r3, #4
 80018ec:	0112      	lsls	r2, r2, #4
 80018ee:	b2d2      	uxtb	r2, r2
 80018f0:	440b      	add	r3, r1
 80018f2:	761a      	strb	r2, [r3, #24]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	e000e100 	.word	0xe000e100
 8001904:	e000ed00 	.word	0xe000ed00

08001908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001908:	b480      	push	{r7}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f003 0307 	and.w	r3, r3, #7
 800191a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	f1c3 0307 	rsb	r3, r3, #7
 8001922:	2b04      	cmp	r3, #4
 8001924:	bf28      	it	cs
 8001926:	2304      	movcs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3304      	adds	r3, #4
 800192e:	2b06      	cmp	r3, #6
 8001930:	d902      	bls.n	8001938 <NVIC_EncodePriority+0x30>
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3b03      	subs	r3, #3
 8001936:	e000      	b.n	800193a <NVIC_EncodePriority+0x32>
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800193c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43da      	mvns	r2, r3
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	401a      	ands	r2, r3
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001950:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	fa01 f303 	lsl.w	r3, r1, r3
 800195a:	43d9      	mvns	r1, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001960:	4313      	orrs	r3, r2
         );
}
 8001962:	4618      	mov	r0, r3
 8001964:	3724      	adds	r7, #36	; 0x24
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3b01      	subs	r3, #1
 800197c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001980:	d301      	bcc.n	8001986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001982:	2301      	movs	r3, #1
 8001984:	e00f      	b.n	80019a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001986:	4a0a      	ldr	r2, [pc, #40]	; (80019b0 <SysTick_Config+0x40>)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	3b01      	subs	r3, #1
 800198c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800198e:	210f      	movs	r1, #15
 8001990:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001994:	f7ff ff8e 	bl	80018b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001998:	4b05      	ldr	r3, [pc, #20]	; (80019b0 <SysTick_Config+0x40>)
 800199a:	2200      	movs	r2, #0
 800199c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800199e:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <SysTick_Config+0x40>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff ff29 	bl	8001814 <__NVIC_SetPriorityGrouping>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b086      	sub	sp, #24
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	60b9      	str	r1, [r7, #8]
 80019d4:	607a      	str	r2, [r7, #4]
 80019d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019dc:	f7ff ff3e 	bl	800185c <__NVIC_GetPriorityGrouping>
 80019e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	68b9      	ldr	r1, [r7, #8]
 80019e6:	6978      	ldr	r0, [r7, #20]
 80019e8:	f7ff ff8e 	bl	8001908 <NVIC_EncodePriority>
 80019ec:	4602      	mov	r2, r0
 80019ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff ff5d 	bl	80018b4 <__NVIC_SetPriority>
}
 80019fa:	bf00      	nop
 80019fc:	3718      	adds	r7, #24
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}

08001a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a02:	b580      	push	{r7, lr}
 8001a04:	b082      	sub	sp, #8
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	4603      	mov	r3, r0
 8001a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff31 	bl	8001878 <__NVIC_EnableIRQ>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a26:	6878      	ldr	r0, [r7, #4]
 8001a28:	f7ff ffa2 	bl	8001970 <SysTick_Config>
 8001a2c:	4603      	mov	r3, r0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b089      	sub	sp, #36	; 0x24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
 8001a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a42:	2300      	movs	r3, #0
 8001a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61fb      	str	r3, [r7, #28]
 8001a52:	e159      	b.n	8001d08 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a54:	2201      	movs	r2, #1
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	697a      	ldr	r2, [r7, #20]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a68:	693a      	ldr	r2, [r7, #16]
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	f040 8148 	bne.w	8001d02 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d005      	beq.n	8001a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d130      	bne.n	8001aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	2203      	movs	r2, #3
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	68da      	ldr	r2, [r3, #12]
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8001aae:	69ba      	ldr	r2, [r7, #24]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 0201 	and.w	r2, r3, #1
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	69ba      	ldr	r2, [r7, #24]
 8001aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0303 	and.w	r3, r3, #3
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	d017      	beq.n	8001b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	2203      	movs	r2, #3
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d123      	bne.n	8001b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	08da      	lsrs	r2, r3, #3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	3208      	adds	r2, #8
 8001b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	220f      	movs	r2, #15
 8001b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	691a      	ldr	r2, [r3, #16]
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	f003 0307 	and.w	r3, r3, #7
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	69b9      	ldr	r1, [r7, #24]
 8001b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	4013      	ands	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0203 	and.w	r2, r3, #3
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	f000 80a2 	beq.w	8001d02 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b57      	ldr	r3, [pc, #348]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc6:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bce:	4b54      	ldr	r3, [pc, #336]	; (8001d20 <HAL_GPIO_Init+0x2e8>)
 8001bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bda:	4a52      	ldr	r2, [pc, #328]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	089b      	lsrs	r3, r3, #2
 8001be0:	3302      	adds	r3, #2
 8001be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	220f      	movs	r2, #15
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43db      	mvns	r3, r3
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a49      	ldr	r2, [pc, #292]	; (8001d28 <HAL_GPIO_Init+0x2f0>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_GPIO_Init+0x202>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a48      	ldr	r2, [pc, #288]	; (8001d2c <HAL_GPIO_Init+0x2f4>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x1fe>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a47      	ldr	r2, [pc, #284]	; (8001d30 <HAL_GPIO_Init+0x2f8>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x1fa>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a46      	ldr	r2, [pc, #280]	; (8001d34 <HAL_GPIO_Init+0x2fc>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x1f6>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a45      	ldr	r2, [pc, #276]	; (8001d38 <HAL_GPIO_Init+0x300>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x1f2>
 8001c26:	2304      	movs	r3, #4
 8001c28:	e008      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e006      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e004      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c32:	2302      	movs	r3, #2
 8001c34:	e002      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c36:	2301      	movs	r3, #1
 8001c38:	e000      	b.n	8001c3c <HAL_GPIO_Init+0x204>
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	69fa      	ldr	r2, [r7, #28]
 8001c3e:	f002 0203 	and.w	r2, r2, #3
 8001c42:	0092      	lsls	r2, r2, #2
 8001c44:	4093      	lsls	r3, r2
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4c:	4935      	ldr	r1, [pc, #212]	; (8001d24 <HAL_GPIO_Init+0x2ec>)
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c5a:	4b38      	ldr	r3, [pc, #224]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c7e:	4a2f      	ldr	r2, [pc, #188]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c84:	4b2d      	ldr	r3, [pc, #180]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ca8:	4a24      	ldr	r2, [pc, #144]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cae:	4b23      	ldr	r3, [pc, #140]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	43db      	mvns	r3, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cd2:	4a1a      	ldr	r2, [pc, #104]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d003      	beq.n	8001cfc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001cfc:	4a0f      	ldr	r2, [pc, #60]	; (8001d3c <HAL_GPIO_Init+0x304>)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3301      	adds	r3, #1
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	2b0f      	cmp	r3, #15
 8001d0c:	f67f aea2 	bls.w	8001a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d10:	bf00      	nop
 8001d12:	bf00      	nop
 8001d14:	3724      	adds	r7, #36	; 0x24
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	40023800 	.word	0x40023800
 8001d24:	40013800 	.word	0x40013800
 8001d28:	40020000 	.word	0x40020000
 8001d2c:	40020400 	.word	0x40020400
 8001d30:	40020800 	.word	0x40020800
 8001d34:	40020c00 	.word	0x40020c00
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40013c00 	.word	0x40013c00

08001d40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b085      	sub	sp, #20
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	460b      	mov	r3, r1
 8001d4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	887b      	ldrh	r3, [r7, #2]
 8001d52:	4013      	ands	r3, r2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d002      	beq.n	8001d5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	73fb      	strb	r3, [r7, #15]
 8001d5c:	e001      	b.n	8001d62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3714      	adds	r7, #20
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	807b      	strh	r3, [r7, #2]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d80:	787b      	ldrb	r3, [r7, #1]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d86:	887a      	ldrh	r2, [r7, #2]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d8c:	e003      	b.n	8001d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d8e:	887b      	ldrh	r3, [r7, #2]
 8001d90:	041a      	lsls	r2, r3, #16
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	619a      	str	r2, [r3, #24]
}
 8001d96:	bf00      	nop
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b085      	sub	sp, #20
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	460b      	mov	r3, r1
 8001dac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	695b      	ldr	r3, [r3, #20]
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001db4:	887a      	ldrh	r2, [r7, #2]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	4013      	ands	r3, r2
 8001dba:	041a      	lsls	r2, r3, #16
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	887b      	ldrh	r3, [r7, #2]
 8001dc2:	400b      	ands	r3, r1
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	619a      	str	r2, [r3, #24]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
	...

08001dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001df0:	88fb      	ldrh	r3, [r7, #6]
 8001df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f000 f806 	bl	8001e08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40013c00 	.word	0x40013c00

08001e08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e267      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d075      	beq.n	8001f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e3e:	4b88      	ldr	r3, [pc, #544]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d00c      	beq.n	8001e64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e4a:	4b85      	ldr	r3, [pc, #532]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d112      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001e56:	4b82      	ldr	r3, [pc, #520]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001e62:	d10b      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	4b7e      	ldr	r3, [pc, #504]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d05b      	beq.n	8001f28 <HAL_RCC_OscConfig+0x108>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d157      	bne.n	8001f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e242      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	d106      	bne.n	8001e94 <HAL_RCC_OscConfig+0x74>
 8001e86:	4b76      	ldr	r3, [pc, #472]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a75      	ldr	r2, [pc, #468]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xb0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x98>
 8001e9e:	4b70      	ldr	r3, [pc, #448]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a6f      	ldr	r2, [pc, #444]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b6d      	ldr	r3, [pc, #436]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6c      	ldr	r2, [pc, #432]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xb0>
 8001eb8:	4b69      	ldr	r3, [pc, #420]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a68      	ldr	r2, [pc, #416]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b66      	ldr	r3, [pc, #408]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a65      	ldr	r2, [pc, #404]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fc6c 	bl	80017b4 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fc68 	bl	80017b4 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e207      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xc0>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f00:	f7ff fc58 	bl	80017b4 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fc54 	bl	80017b4 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e1f3      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	4b51      	ldr	r3, [pc, #324]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0xe8>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d063      	beq.n	8001ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f36:	4b4a      	ldr	r3, [pc, #296]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f42:	4b47      	ldr	r3, [pc, #284]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f4a:	2b08      	cmp	r3, #8
 8001f4c:	d11c      	bne.n	8001f88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001f4e:	4b44      	ldr	r3, [pc, #272]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d116      	bne.n	8001f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f5a:	4b41      	ldr	r3, [pc, #260]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_RCC_OscConfig+0x152>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e1c7      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f72:	4b3b      	ldr	r3, [pc, #236]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4937      	ldr	r1, [pc, #220]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f86:	e03a      	b.n	8001ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d020      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f90:	4b34      	ldr	r3, [pc, #208]	; (8002064 <HAL_RCC_OscConfig+0x244>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7ff fc0d 	bl	80017b4 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fc09 	bl	80017b4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1a8      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	4b2b      	ldr	r3, [pc, #172]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d0f0      	beq.n	8001f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fbc:	4b28      	ldr	r3, [pc, #160]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	00db      	lsls	r3, r3, #3
 8001fca:	4925      	ldr	r1, [pc, #148]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <HAL_RCC_OscConfig+0x244>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd8:	f7ff fbec 	bl	80017b4 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fbe8 	bl	80017b4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e187      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	4b1b      	ldr	r3, [pc, #108]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d1f0      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d036      	beq.n	8002078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d016      	beq.n	8002040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002012:	4b15      	ldr	r3, [pc, #84]	; (8002068 <HAL_RCC_OscConfig+0x248>)
 8002014:	2201      	movs	r2, #1
 8002016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002018:	f7ff fbcc 	bl	80017b4 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002020:	f7ff fbc8 	bl	80017b4 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e167      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	4b0b      	ldr	r3, [pc, #44]	; (8002060 <HAL_RCC_OscConfig+0x240>)
 8002034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002036:	f003 0302 	and.w	r3, r3, #2
 800203a:	2b00      	cmp	r3, #0
 800203c:	d0f0      	beq.n	8002020 <HAL_RCC_OscConfig+0x200>
 800203e:	e01b      	b.n	8002078 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_OscConfig+0x248>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002046:	f7ff fbb5 	bl	80017b4 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800204c:	e00e      	b.n	800206c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800204e:	f7ff fbb1 	bl	80017b4 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d907      	bls.n	800206c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e150      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
 8002060:	40023800 	.word	0x40023800
 8002064:	42470000 	.word	0x42470000
 8002068:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800206c:	4b88      	ldr	r3, [pc, #544]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800206e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002070:	f003 0302 	and.w	r3, r3, #2
 8002074:	2b00      	cmp	r3, #0
 8002076:	d1ea      	bne.n	800204e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b00      	cmp	r3, #0
 8002082:	f000 8097 	beq.w	80021b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002086:	2300      	movs	r3, #0
 8002088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800208a:	4b81      	ldr	r3, [pc, #516]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d10f      	bne.n	80020b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	4b7d      	ldr	r3, [pc, #500]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a7c      	ldr	r2, [pc, #496]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80020a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b7a      	ldr	r3, [pc, #488]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	60bb      	str	r3, [r7, #8]
 80020b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020b2:	2301      	movs	r3, #1
 80020b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b6:	4b77      	ldr	r3, [pc, #476]	; (8002294 <HAL_RCC_OscConfig+0x474>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d118      	bne.n	80020f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020c2:	4b74      	ldr	r3, [pc, #464]	; (8002294 <HAL_RCC_OscConfig+0x474>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a73      	ldr	r2, [pc, #460]	; (8002294 <HAL_RCC_OscConfig+0x474>)
 80020c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ce:	f7ff fb71 	bl	80017b4 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d4:	e008      	b.n	80020e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d6:	f7ff fb6d 	bl	80017b4 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e10c      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020e8:	4b6a      	ldr	r3, [pc, #424]	; (8002294 <HAL_RCC_OscConfig+0x474>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f0      	beq.n	80020d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <HAL_RCC_OscConfig+0x2ea>
 80020fc:	4b64      	ldr	r3, [pc, #400]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80020fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002100:	4a63      	ldr	r2, [pc, #396]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6713      	str	r3, [r2, #112]	; 0x70
 8002108:	e01c      	b.n	8002144 <HAL_RCC_OscConfig+0x324>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	2b05      	cmp	r3, #5
 8002110:	d10c      	bne.n	800212c <HAL_RCC_OscConfig+0x30c>
 8002112:	4b5f      	ldr	r3, [pc, #380]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002116:	4a5e      	ldr	r2, [pc, #376]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6713      	str	r3, [r2, #112]	; 0x70
 800211e:	4b5c      	ldr	r3, [pc, #368]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002122:	4a5b      	ldr	r2, [pc, #364]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002124:	f043 0301 	orr.w	r3, r3, #1
 8002128:	6713      	str	r3, [r2, #112]	; 0x70
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0x324>
 800212c:	4b58      	ldr	r3, [pc, #352]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	4a57      	ldr	r2, [pc, #348]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002132:	f023 0301 	bic.w	r3, r3, #1
 8002136:	6713      	str	r3, [r2, #112]	; 0x70
 8002138:	4b55      	ldr	r3, [pc, #340]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	4a54      	ldr	r2, [pc, #336]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800213e:	f023 0304 	bic.w	r3, r3, #4
 8002142:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d015      	beq.n	8002178 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7ff fb32 	bl	80017b4 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002152:	e00a      	b.n	800216a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002154:	f7ff fb2e 	bl	80017b4 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0cb      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800216a:	4b49      	ldr	r3, [pc, #292]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800216c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0ee      	beq.n	8002154 <HAL_RCC_OscConfig+0x334>
 8002176:	e014      	b.n	80021a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7ff fb1c 	bl	80017b4 <HAL_GetTick>
 800217c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217e:	e00a      	b.n	8002196 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002180:	f7ff fb18 	bl	80017b4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	f241 3288 	movw	r2, #5000	; 0x1388
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0b5      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002196:	4b3e      	ldr	r3, [pc, #248]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1ee      	bne.n	8002180 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021a2:	7dfb      	ldrb	r3, [r7, #23]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d105      	bne.n	80021b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021a8:	4b39      	ldr	r3, [pc, #228]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80021aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ac:	4a38      	ldr	r2, [pc, #224]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80021ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80a1 	beq.w	8002300 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021be:	4b34      	ldr	r3, [pc, #208]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f003 030c 	and.w	r3, r3, #12
 80021c6:	2b08      	cmp	r3, #8
 80021c8:	d05c      	beq.n	8002284 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d141      	bne.n	8002256 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d2:	4b31      	ldr	r3, [pc, #196]	; (8002298 <HAL_RCC_OscConfig+0x478>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d8:	f7ff faec 	bl	80017b4 <HAL_GetTick>
 80021dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021de:	e008      	b.n	80021f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e0:	f7ff fae8 	bl	80017b4 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e087      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f2:	4b27      	ldr	r3, [pc, #156]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69da      	ldr	r2, [r3, #28]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	431a      	orrs	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800220c:	019b      	lsls	r3, r3, #6
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	3b01      	subs	r3, #1
 8002218:	041b      	lsls	r3, r3, #16
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	061b      	lsls	r3, r3, #24
 8002222:	491b      	ldr	r1, [pc, #108]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002224:	4313      	orrs	r3, r2
 8002226:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002228:	4b1b      	ldr	r3, [pc, #108]	; (8002298 <HAL_RCC_OscConfig+0x478>)
 800222a:	2201      	movs	r2, #1
 800222c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222e:	f7ff fac1 	bl	80017b4 <HAL_GetTick>
 8002232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002234:	e008      	b.n	8002248 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002236:	f7ff fabd 	bl	80017b4 <HAL_GetTick>
 800223a:	4602      	mov	r2, r0
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	2b02      	cmp	r3, #2
 8002242:	d901      	bls.n	8002248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e05c      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x416>
 8002254:	e054      	b.n	8002300 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002256:	4b10      	ldr	r3, [pc, #64]	; (8002298 <HAL_RCC_OscConfig+0x478>)
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800225c:	f7ff faaa 	bl	80017b4 <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002264:	f7ff faa6 	bl	80017b4 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e045      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002276:	4b06      	ldr	r3, [pc, #24]	; (8002290 <HAL_RCC_OscConfig+0x470>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x444>
 8002282:	e03d      	b.n	8002300 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	2b01      	cmp	r3, #1
 800228a:	d107      	bne.n	800229c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e038      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
 8002290:	40023800 	.word	0x40023800
 8002294:	40007000 	.word	0x40007000
 8002298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x4ec>)
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d028      	beq.n	80022fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d121      	bne.n	80022fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d11a      	bne.n	80022fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80022cc:	4013      	ands	r3, r2
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d111      	bne.n	80022fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e2:	085b      	lsrs	r3, r3, #1
 80022e4:	3b01      	subs	r3, #1
 80022e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e000      	b.n	8002302 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800

08002310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0cc      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b68      	ldr	r3, [pc, #416]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d90c      	bls.n	800234c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b65      	ldr	r3, [pc, #404]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	b2d2      	uxtb	r2, r2
 8002338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233a:	4b63      	ldr	r3, [pc, #396]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	683a      	ldr	r2, [r7, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d001      	beq.n	800234c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e0b8      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d020      	beq.n	800239a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002364:	4b59      	ldr	r3, [pc, #356]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4a58      	ldr	r2, [pc, #352]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800236a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800236e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800237c:	4b53      	ldr	r3, [pc, #332]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	4a52      	ldr	r2, [pc, #328]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002388:	4b50      	ldr	r3, [pc, #320]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	494d      	ldr	r1, [pc, #308]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002396:	4313      	orrs	r3, r2
 8002398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d044      	beq.n	8002430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b01      	cmp	r3, #1
 80023ac:	d107      	bne.n	80023be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ae:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d119      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e07f      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d003      	beq.n	80023ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ca:	2b03      	cmp	r3, #3
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b3f      	ldr	r3, [pc, #252]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e06f      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023de:	4b3b      	ldr	r3, [pc, #236]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e067      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ee:	4b37      	ldr	r3, [pc, #220]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f023 0203 	bic.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4934      	ldr	r1, [pc, #208]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002400:	f7ff f9d8 	bl	80017b4 <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	e00a      	b.n	800241e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7ff f9d4 	bl	80017b4 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e04f      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	4b2b      	ldr	r3, [pc, #172]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	f003 020c 	and.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	429a      	cmp	r2, r3
 800242e:	d1eb      	bne.n	8002408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002430:	4b25      	ldr	r3, [pc, #148]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d20c      	bcs.n	8002458 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b22      	ldr	r3, [pc, #136]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002440:	683a      	ldr	r2, [r7, #0]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b20      	ldr	r3, [pc, #128]	; (80024c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0307 	and.w	r3, r3, #7
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d001      	beq.n	8002458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e032      	b.n	80024be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0304 	and.w	r3, r3, #4
 8002460:	2b00      	cmp	r3, #0
 8002462:	d008      	beq.n	8002476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4916      	ldr	r1, [pc, #88]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d009      	beq.n	8002496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002482:	4b12      	ldr	r3, [pc, #72]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	490e      	ldr	r1, [pc, #56]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	4313      	orrs	r3, r2
 8002494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002496:	f000 f821 	bl	80024dc <HAL_RCC_GetSysClockFreq>
 800249a:	4602      	mov	r2, r0
 800249c:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f003 030f 	and.w	r3, r3, #15
 80024a6:	490a      	ldr	r1, [pc, #40]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 80024a8:	5ccb      	ldrb	r3, [r1, r3]
 80024aa:	fa22 f303 	lsr.w	r3, r2, r3
 80024ae:	4a09      	ldr	r2, [pc, #36]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024b2:	4b09      	ldr	r3, [pc, #36]	; (80024d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7ff f938 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00
 80024cc:	40023800 	.word	0x40023800
 80024d0:	08003230 	.word	0x08003230
 80024d4:	20000000 	.word	0x20000000
 80024d8:	2000013c 	.word	0x2000013c

080024dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e0:	b094      	sub	sp, #80	; 0x50
 80024e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	647b      	str	r3, [r7, #68]	; 0x44
 80024e8:	2300      	movs	r3, #0
 80024ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024ec:	2300      	movs	r3, #0
 80024ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80024f0:	2300      	movs	r3, #0
 80024f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80024f4:	4b79      	ldr	r3, [pc, #484]	; (80026dc <HAL_RCC_GetSysClockFreq+0x200>)
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f003 030c 	and.w	r3, r3, #12
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d00d      	beq.n	800251c <HAL_RCC_GetSysClockFreq+0x40>
 8002500:	2b08      	cmp	r3, #8
 8002502:	f200 80e1 	bhi.w	80026c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002506:	2b00      	cmp	r3, #0
 8002508:	d002      	beq.n	8002510 <HAL_RCC_GetSysClockFreq+0x34>
 800250a:	2b04      	cmp	r3, #4
 800250c:	d003      	beq.n	8002516 <HAL_RCC_GetSysClockFreq+0x3a>
 800250e:	e0db      	b.n	80026c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002510:	4b73      	ldr	r3, [pc, #460]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002512:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002514:	e0db      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002516:	4b73      	ldr	r3, [pc, #460]	; (80026e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002518:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800251a:	e0d8      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800251c:	4b6f      	ldr	r3, [pc, #444]	; (80026dc <HAL_RCC_GetSysClockFreq+0x200>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002524:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002526:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d063      	beq.n	80025fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002532:	4b6a      	ldr	r3, [pc, #424]	; (80026dc <HAL_RCC_GetSysClockFreq+0x200>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	099b      	lsrs	r3, r3, #6
 8002538:	2200      	movs	r2, #0
 800253a:	63bb      	str	r3, [r7, #56]	; 0x38
 800253c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
 8002546:	2300      	movs	r3, #0
 8002548:	637b      	str	r3, [r7, #52]	; 0x34
 800254a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800254e:	4622      	mov	r2, r4
 8002550:	462b      	mov	r3, r5
 8002552:	f04f 0000 	mov.w	r0, #0
 8002556:	f04f 0100 	mov.w	r1, #0
 800255a:	0159      	lsls	r1, r3, #5
 800255c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002560:	0150      	lsls	r0, r2, #5
 8002562:	4602      	mov	r2, r0
 8002564:	460b      	mov	r3, r1
 8002566:	4621      	mov	r1, r4
 8002568:	1a51      	subs	r1, r2, r1
 800256a:	6139      	str	r1, [r7, #16]
 800256c:	4629      	mov	r1, r5
 800256e:	eb63 0301 	sbc.w	r3, r3, r1
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	f04f 0200 	mov.w	r2, #0
 8002578:	f04f 0300 	mov.w	r3, #0
 800257c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002580:	4659      	mov	r1, fp
 8002582:	018b      	lsls	r3, r1, #6
 8002584:	4651      	mov	r1, sl
 8002586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800258a:	4651      	mov	r1, sl
 800258c:	018a      	lsls	r2, r1, #6
 800258e:	4651      	mov	r1, sl
 8002590:	ebb2 0801 	subs.w	r8, r2, r1
 8002594:	4659      	mov	r1, fp
 8002596:	eb63 0901 	sbc.w	r9, r3, r1
 800259a:	f04f 0200 	mov.w	r2, #0
 800259e:	f04f 0300 	mov.w	r3, #0
 80025a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80025a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80025aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80025ae:	4690      	mov	r8, r2
 80025b0:	4699      	mov	r9, r3
 80025b2:	4623      	mov	r3, r4
 80025b4:	eb18 0303 	adds.w	r3, r8, r3
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	462b      	mov	r3, r5
 80025bc:	eb49 0303 	adc.w	r3, r9, r3
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	f04f 0300 	mov.w	r3, #0
 80025ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80025ce:	4629      	mov	r1, r5
 80025d0:	024b      	lsls	r3, r1, #9
 80025d2:	4621      	mov	r1, r4
 80025d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80025d8:	4621      	mov	r1, r4
 80025da:	024a      	lsls	r2, r1, #9
 80025dc:	4610      	mov	r0, r2
 80025de:	4619      	mov	r1, r3
 80025e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025e2:	2200      	movs	r2, #0
 80025e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80025e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80025e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80025ec:	f7fd fdf2 	bl	80001d4 <__aeabi_uldivmod>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4613      	mov	r3, r2
 80025f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025f8:	e058      	b.n	80026ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025fa:	4b38      	ldr	r3, [pc, #224]	; (80026dc <HAL_RCC_GetSysClockFreq+0x200>)
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	099b      	lsrs	r3, r3, #6
 8002600:	2200      	movs	r2, #0
 8002602:	4618      	mov	r0, r3
 8002604:	4611      	mov	r1, r2
 8002606:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800260a:	623b      	str	r3, [r7, #32]
 800260c:	2300      	movs	r3, #0
 800260e:	627b      	str	r3, [r7, #36]	; 0x24
 8002610:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002614:	4642      	mov	r2, r8
 8002616:	464b      	mov	r3, r9
 8002618:	f04f 0000 	mov.w	r0, #0
 800261c:	f04f 0100 	mov.w	r1, #0
 8002620:	0159      	lsls	r1, r3, #5
 8002622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002626:	0150      	lsls	r0, r2, #5
 8002628:	4602      	mov	r2, r0
 800262a:	460b      	mov	r3, r1
 800262c:	4641      	mov	r1, r8
 800262e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002632:	4649      	mov	r1, r9
 8002634:	eb63 0b01 	sbc.w	fp, r3, r1
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	f04f 0300 	mov.w	r3, #0
 8002640:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002644:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002648:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800264c:	ebb2 040a 	subs.w	r4, r2, sl
 8002650:	eb63 050b 	sbc.w	r5, r3, fp
 8002654:	f04f 0200 	mov.w	r2, #0
 8002658:	f04f 0300 	mov.w	r3, #0
 800265c:	00eb      	lsls	r3, r5, #3
 800265e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002662:	00e2      	lsls	r2, r4, #3
 8002664:	4614      	mov	r4, r2
 8002666:	461d      	mov	r5, r3
 8002668:	4643      	mov	r3, r8
 800266a:	18e3      	adds	r3, r4, r3
 800266c:	603b      	str	r3, [r7, #0]
 800266e:	464b      	mov	r3, r9
 8002670:	eb45 0303 	adc.w	r3, r5, r3
 8002674:	607b      	str	r3, [r7, #4]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002682:	4629      	mov	r1, r5
 8002684:	028b      	lsls	r3, r1, #10
 8002686:	4621      	mov	r1, r4
 8002688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800268c:	4621      	mov	r1, r4
 800268e:	028a      	lsls	r2, r1, #10
 8002690:	4610      	mov	r0, r2
 8002692:	4619      	mov	r1, r3
 8002694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002696:	2200      	movs	r2, #0
 8002698:	61bb      	str	r3, [r7, #24]
 800269a:	61fa      	str	r2, [r7, #28]
 800269c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026a0:	f7fd fd98 	bl	80001d4 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4613      	mov	r3, r2
 80026aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <HAL_RCC_GetSysClockFreq+0x200>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	3301      	adds	r3, #1
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80026bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80026be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026c6:	e002      	b.n	80026ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80026ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80026cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80026ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3750      	adds	r7, #80	; 0x50
 80026d4:	46bd      	mov	sp, r7
 80026d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026da:	bf00      	nop
 80026dc:	40023800 	.word	0x40023800
 80026e0:	00f42400 	.word	0x00f42400
 80026e4:	007a1200 	.word	0x007a1200

080026e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d101      	bne.n	80026fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e07b      	b.n	80027f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d108      	bne.n	8002714 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800270a:	d009      	beq.n	8002720 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
 8002712:	e005      	b.n	8002720 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b00      	cmp	r3, #0
 8002730:	d106      	bne.n	8002740 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f7fe f808 	bl	8000750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2202      	movs	r2, #2
 8002744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002756:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002768:	431a      	orrs	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	695b      	ldr	r3, [r3, #20]
 8002782:	f003 0301 	and.w	r3, r3, #1
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002790:	431a      	orrs	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	69db      	ldr	r3, [r3, #28]
 8002796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a1b      	ldr	r3, [r3, #32]
 80027a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a4:	ea42 0103 	orr.w	r1, r2, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	0c1b      	lsrs	r3, r3, #16
 80027be:	f003 0104 	and.w	r1, r3, #4
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	f003 0210 	and.w	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	69da      	ldr	r2, [r3, #28]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b08c      	sub	sp, #48	; 0x30
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002808:	2301      	movs	r3, #1
 800280a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800280c:	2300      	movs	r3, #0
 800280e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002818:	2b01      	cmp	r3, #1
 800281a:	d101      	bne.n	8002820 <HAL_SPI_TransmitReceive+0x26>
 800281c:	2302      	movs	r3, #2
 800281e:	e18a      	b.n	8002b36 <HAL_SPI_TransmitReceive+0x33c>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002828:	f7fe ffc4 	bl	80017b4 <HAL_GetTick>
 800282c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800283e:	887b      	ldrh	r3, [r7, #2]
 8002840:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002842:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002846:	2b01      	cmp	r3, #1
 8002848:	d00f      	beq.n	800286a <HAL_SPI_TransmitReceive+0x70>
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002850:	d107      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d103      	bne.n	8002862 <HAL_SPI_TransmitReceive+0x68>
 800285a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800285e:	2b04      	cmp	r3, #4
 8002860:	d003      	beq.n	800286a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002862:	2302      	movs	r3, #2
 8002864:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002868:	e15b      	b.n	8002b22 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_SPI_TransmitReceive+0x82>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d002      	beq.n	800287c <HAL_SPI_TransmitReceive+0x82>
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d103      	bne.n	8002884 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800287c:	2301      	movs	r3, #1
 800287e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002882:	e14e      	b.n	8002b22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b04      	cmp	r3, #4
 800288e:	d003      	beq.n	8002898 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2205      	movs	r2, #5
 8002894:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	687a      	ldr	r2, [r7, #4]
 80028a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	887a      	ldrh	r2, [r7, #2]
 80028a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	887a      	ldrh	r2, [r7, #2]
 80028ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	68ba      	ldr	r2, [r7, #8]
 80028b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	887a      	ldrh	r2, [r7, #2]
 80028ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2200      	movs	r2, #0
 80028c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2200      	movs	r2, #0
 80028cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028d8:	2b40      	cmp	r3, #64	; 0x40
 80028da:	d007      	beq.n	80028ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028f4:	d178      	bne.n	80029e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d002      	beq.n	8002904 <HAL_SPI_TransmitReceive+0x10a>
 80028fe:	8b7b      	ldrh	r3, [r7, #26]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d166      	bne.n	80029d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	881a      	ldrh	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	1c9a      	adds	r2, r3, #2
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800291e:	b29b      	uxth	r3, r3
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002928:	e053      	b.n	80029d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b02      	cmp	r3, #2
 8002936:	d11b      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x176>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d016      	beq.n	8002970 <HAL_SPI_TransmitReceive+0x176>
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	2b01      	cmp	r3, #1
 8002946:	d113      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294c:	881a      	ldrh	r2, [r3, #0]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002958:	1c9a      	adds	r2, r3, #2
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002962:	b29b      	uxth	r3, r3
 8002964:	3b01      	subs	r3, #1
 8002966:	b29a      	uxth	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800296c:	2300      	movs	r3, #0
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b01      	cmp	r3, #1
 800297c:	d119      	bne.n	80029b2 <HAL_SPI_TransmitReceive+0x1b8>
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002982:	b29b      	uxth	r3, r3
 8002984:	2b00      	cmp	r3, #0
 8002986:	d014      	beq.n	80029b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002992:	b292      	uxth	r2, r2
 8002994:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800299a:	1c9a      	adds	r2, r3, #2
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	3b01      	subs	r3, #1
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029ae:	2301      	movs	r3, #1
 80029b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029b2:	f7fe feff 	bl	80017b4 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029be:	429a      	cmp	r2, r3
 80029c0:	d807      	bhi.n	80029d2 <HAL_SPI_TransmitReceive+0x1d8>
 80029c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029c8:	d003      	beq.n	80029d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80029d0:	e0a7      	b.n	8002b22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d1a6      	bne.n	800292a <HAL_SPI_TransmitReceive+0x130>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1a1      	bne.n	800292a <HAL_SPI_TransmitReceive+0x130>
 80029e6:	e07c      	b.n	8002ae2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_SPI_TransmitReceive+0x1fc>
 80029f0:	8b7b      	ldrh	r3, [r7, #26]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d16b      	bne.n	8002ace <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	330c      	adds	r3, #12
 8002a00:	7812      	ldrb	r2, [r2, #0]
 8002a02:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a08:	1c5a      	adds	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a12:	b29b      	uxth	r3, r3
 8002a14:	3b01      	subs	r3, #1
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a1c:	e057      	b.n	8002ace <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0302 	and.w	r3, r3, #2
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d11c      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x26c>
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d017      	beq.n	8002a66 <HAL_SPI_TransmitReceive+0x26c>
 8002a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d114      	bne.n	8002a66 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	330c      	adds	r3, #12
 8002a46:	7812      	ldrb	r2, [r2, #0]
 8002a48:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d119      	bne.n	8002aa8 <HAL_SPI_TransmitReceive+0x2ae>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d014      	beq.n	8002aa8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	b2d2      	uxtb	r2, r2
 8002a8a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	1c5a      	adds	r2, r3, #1
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002aa8:	f7fe fe84 	bl	80017b4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d803      	bhi.n	8002ac0 <HAL_SPI_TransmitReceive+0x2c6>
 8002ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002abe:	d102      	bne.n	8002ac6 <HAL_SPI_TransmitReceive+0x2cc>
 8002ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d103      	bne.n	8002ace <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002acc:	e029      	b.n	8002b22 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1a2      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x224>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d19d      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002ae6:	68f8      	ldr	r0, [r7, #12]
 8002ae8:	f000 f8b2 	bl	8002c50 <SPI_EndRxTxTransaction>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d006      	beq.n	8002b00 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2220      	movs	r2, #32
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002afe:	e010      	b.n	8002b22 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10b      	bne.n	8002b20 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	617b      	str	r3, [r7, #20]
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	617b      	str	r3, [r7, #20]
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	e000      	b.n	8002b22 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b32:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3730      	adds	r7, #48	; 0x30
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
	...

08002b40 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	60f8      	str	r0, [r7, #12]
 8002b48:	60b9      	str	r1, [r7, #8]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002b50:	f7fe fe30 	bl	80017b4 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	683a      	ldr	r2, [r7, #0]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002b60:	f7fe fe28 	bl	80017b4 <HAL_GetTick>
 8002b64:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002b66:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	015b      	lsls	r3, r3, #5
 8002b6c:	0d1b      	lsrs	r3, r3, #20
 8002b6e:	69fa      	ldr	r2, [r7, #28]
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b76:	e054      	b.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b7e:	d050      	beq.n	8002c22 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002b80:	f7fe fe18 	bl	80017b4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	69fa      	ldr	r2, [r7, #28]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d902      	bls.n	8002b96 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d13d      	bne.n	8002c12 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ba4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bae:	d111      	bne.n	8002bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bb8:	d004      	beq.n	8002bc4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bc2:	d107      	bne.n	8002bd4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bdc:	d10f      	bne.n	8002bfe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bec:	601a      	str	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bfc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e017      	b.n	8002c42 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d101      	bne.n	8002c1c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	3b01      	subs	r3, #1
 8002c20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	bf0c      	ite	eq
 8002c32:	2301      	moveq	r3, #1
 8002c34:	2300      	movne	r3, #0
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d19b      	bne.n	8002b78 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3720      	adds	r7, #32
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000000 	.word	0x20000000

08002c50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b088      	sub	sp, #32
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <SPI_EndRxTxTransaction+0x7c>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a1b      	ldr	r2, [pc, #108]	; (8002cd0 <SPI_EndRxTxTransaction+0x80>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	0d5b      	lsrs	r3, r3, #21
 8002c68:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c6c:	fb02 f303 	mul.w	r3, r2, r3
 8002c70:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c7a:	d112      	bne.n	8002ca2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2200      	movs	r2, #0
 8002c84:	2180      	movs	r1, #128	; 0x80
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f7ff ff5a 	bl	8002b40 <SPI_WaitFlagStateUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d016      	beq.n	8002cc0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c96:	f043 0220 	orr.w	r2, r3, #32
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e00f      	b.n	8002cc2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb8:	2b80      	cmp	r3, #128	; 0x80
 8002cba:	d0f2      	beq.n	8002ca2 <SPI_EndRxTxTransaction+0x52>
 8002cbc:	e000      	b.n	8002cc0 <SPI_EndRxTxTransaction+0x70>
        break;
 8002cbe:	bf00      	nop
  }

  return HAL_OK;
 8002cc0:	2300      	movs	r3, #0
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	165e9f81 	.word	0x165e9f81

08002cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d101      	bne.n	8002ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	e041      	b.n	8002d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d106      	bne.n	8002d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	f7fd fd70 	bl	80007e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2202      	movs	r2, #2
 8002d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	4619      	mov	r1, r3
 8002d12:	4610      	mov	r0, r2
 8002d14:	f000 f9c0 	bl	8003098 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
	...

08002d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d001      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e044      	b.n	8002e16 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2202      	movs	r2, #2
 8002d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f042 0201 	orr.w	r2, r2, #1
 8002da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <HAL_TIM_Base_Start_IT+0xb0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d018      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db6:	d013      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x6c>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1a      	ldr	r2, [pc, #104]	; (8002e28 <HAL_TIM_Base_Start_IT+0xb4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d00e      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <HAL_TIM_Base_Start_IT+0xb8>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d009      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <HAL_TIM_Base_Start_IT+0xbc>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d004      	beq.n	8002de0 <HAL_TIM_Base_Start_IT+0x6c>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a16      	ldr	r2, [pc, #88]	; (8002e34 <HAL_TIM_Base_Start_IT+0xc0>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d111      	bne.n	8002e04 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b06      	cmp	r3, #6
 8002df0:	d010      	beq.n	8002e14 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e02:	e007      	b.n	8002e14 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	40010000 	.word	0x40010000
 8002e28:	40000400 	.word	0x40000400
 8002e2c:	40000800 	.word	0x40000800
 8002e30:	40000c00 	.word	0x40000c00
 8002e34:	40014000 	.word	0x40014000

08002e38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d122      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d11b      	bne.n	8002e94 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f06f 0202 	mvn.w	r2, #2
 8002e64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f8ee 	bl	800305c <HAL_TIM_IC_CaptureCallback>
 8002e80:	e005      	b.n	8002e8e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f8e0 	bl	8003048 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f000 f8f1 	bl	8003070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	691b      	ldr	r3, [r3, #16]
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d122      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b04      	cmp	r3, #4
 8002eae:	d11b      	bne.n	8002ee8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f06f 0204 	mvn.w	r2, #4
 8002eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2202      	movs	r2, #2
 8002ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f8c4 	bl	800305c <HAL_TIM_IC_CaptureCallback>
 8002ed4:	e005      	b.n	8002ee2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f8b6 	bl	8003048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f000 f8c7 	bl	8003070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	691b      	ldr	r3, [r3, #16]
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d122      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	f003 0308 	and.w	r3, r3, #8
 8002f00:	2b08      	cmp	r3, #8
 8002f02:	d11b      	bne.n	8002f3c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f06f 0208 	mvn.w	r2, #8
 8002f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2204      	movs	r2, #4
 8002f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f003 0303 	and.w	r3, r3, #3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 f89a 	bl	800305c <HAL_TIM_IC_CaptureCallback>
 8002f28:	e005      	b.n	8002f36 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f88c 	bl	8003048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f30:	6878      	ldr	r0, [r7, #4]
 8002f32:	f000 f89d 	bl	8003070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d122      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d11b      	bne.n	8002f90 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0210 	mvn.w	r2, #16
 8002f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2208      	movs	r2, #8
 8002f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d003      	beq.n	8002f7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f870 	bl	800305c <HAL_TIM_IC_CaptureCallback>
 8002f7c:	e005      	b.n	8002f8a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f862 	bl	8003048 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f84:	6878      	ldr	r0, [r7, #4]
 8002f86:	f000 f873 	bl	8003070 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10e      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d107      	bne.n	8002fbc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0201 	mvn.w	r2, #1
 8002fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fe fa1a 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b80      	cmp	r3, #128	; 0x80
 8002fc8:	d10e      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd4:	2b80      	cmp	r3, #128	; 0x80
 8002fd6:	d107      	bne.n	8002fe8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f8e2 	bl	80031ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b40      	cmp	r3, #64	; 0x40
 8002ff4:	d10e      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d107      	bne.n	8003014 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800300c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f838 	bl	8003084 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b20      	cmp	r3, #32
 8003020:	d10e      	bne.n	8003040 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0320 	and.w	r3, r3, #32
 800302c:	2b20      	cmp	r3, #32
 800302e:	d107      	bne.n	8003040 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0220 	mvn.w	r2, #32
 8003038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f8ac 	bl	8003198 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003040:	bf00      	nop
 8003042:	3708      	adds	r7, #8
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003070:	b480      	push	{r7}
 8003072:	b083      	sub	sp, #12
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003078:	bf00      	nop
 800307a:	370c      	adds	r7, #12
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr

08003084 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4a34      	ldr	r2, [pc, #208]	; (800317c <TIM_Base_SetConfig+0xe4>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00f      	beq.n	80030d0 <TIM_Base_SetConfig+0x38>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b6:	d00b      	beq.n	80030d0 <TIM_Base_SetConfig+0x38>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	4a31      	ldr	r2, [pc, #196]	; (8003180 <TIM_Base_SetConfig+0xe8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d007      	beq.n	80030d0 <TIM_Base_SetConfig+0x38>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a30      	ldr	r2, [pc, #192]	; (8003184 <TIM_Base_SetConfig+0xec>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_Base_SetConfig+0x38>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a2f      	ldr	r2, [pc, #188]	; (8003188 <TIM_Base_SetConfig+0xf0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d108      	bne.n	80030e2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	68fa      	ldr	r2, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a25      	ldr	r2, [pc, #148]	; (800317c <TIM_Base_SetConfig+0xe4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d01b      	beq.n	8003122 <TIM_Base_SetConfig+0x8a>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f0:	d017      	beq.n	8003122 <TIM_Base_SetConfig+0x8a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a22      	ldr	r2, [pc, #136]	; (8003180 <TIM_Base_SetConfig+0xe8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d013      	beq.n	8003122 <TIM_Base_SetConfig+0x8a>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a21      	ldr	r2, [pc, #132]	; (8003184 <TIM_Base_SetConfig+0xec>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d00f      	beq.n	8003122 <TIM_Base_SetConfig+0x8a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a20      	ldr	r2, [pc, #128]	; (8003188 <TIM_Base_SetConfig+0xf0>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d00b      	beq.n	8003122 <TIM_Base_SetConfig+0x8a>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	4a1f      	ldr	r2, [pc, #124]	; (800318c <TIM_Base_SetConfig+0xf4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d007      	beq.n	8003122 <TIM_Base_SetConfig+0x8a>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a1e      	ldr	r2, [pc, #120]	; (8003190 <TIM_Base_SetConfig+0xf8>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d003      	beq.n	8003122 <TIM_Base_SetConfig+0x8a>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <TIM_Base_SetConfig+0xfc>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d108      	bne.n	8003134 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	4313      	orrs	r3, r2
 8003132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	695b      	ldr	r3, [r3, #20]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68fa      	ldr	r2, [r7, #12]
 8003146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a08      	ldr	r2, [pc, #32]	; (800317c <TIM_Base_SetConfig+0xe4>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d103      	bne.n	8003168 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	615a      	str	r2, [r3, #20]
}
 800316e:	bf00      	nop
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	40010000 	.word	0x40010000
 8003180:	40000400 	.word	0x40000400
 8003184:	40000800 	.word	0x40000800
 8003188:	40000c00 	.word	0x40000c00
 800318c:	40014000 	.word	0x40014000
 8003190:	40014400 	.word	0x40014400
 8003194:	40014800 	.word	0x40014800

08003198 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <memset>:
 80031c0:	4402      	add	r2, r0
 80031c2:	4603      	mov	r3, r0
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d100      	bne.n	80031ca <memset+0xa>
 80031c8:	4770      	bx	lr
 80031ca:	f803 1b01 	strb.w	r1, [r3], #1
 80031ce:	e7f9      	b.n	80031c4 <memset+0x4>

080031d0 <__libc_init_array>:
 80031d0:	b570      	push	{r4, r5, r6, lr}
 80031d2:	4d0d      	ldr	r5, [pc, #52]	; (8003208 <__libc_init_array+0x38>)
 80031d4:	4c0d      	ldr	r4, [pc, #52]	; (800320c <__libc_init_array+0x3c>)
 80031d6:	1b64      	subs	r4, r4, r5
 80031d8:	10a4      	asrs	r4, r4, #2
 80031da:	2600      	movs	r6, #0
 80031dc:	42a6      	cmp	r6, r4
 80031de:	d109      	bne.n	80031f4 <__libc_init_array+0x24>
 80031e0:	4d0b      	ldr	r5, [pc, #44]	; (8003210 <__libc_init_array+0x40>)
 80031e2:	4c0c      	ldr	r4, [pc, #48]	; (8003214 <__libc_init_array+0x44>)
 80031e4:	f000 f818 	bl	8003218 <_init>
 80031e8:	1b64      	subs	r4, r4, r5
 80031ea:	10a4      	asrs	r4, r4, #2
 80031ec:	2600      	movs	r6, #0
 80031ee:	42a6      	cmp	r6, r4
 80031f0:	d105      	bne.n	80031fe <__libc_init_array+0x2e>
 80031f2:	bd70      	pop	{r4, r5, r6, pc}
 80031f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80031f8:	4798      	blx	r3
 80031fa:	3601      	adds	r6, #1
 80031fc:	e7ee      	b.n	80031dc <__libc_init_array+0xc>
 80031fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003202:	4798      	blx	r3
 8003204:	3601      	adds	r6, #1
 8003206:	e7f2      	b.n	80031ee <__libc_init_array+0x1e>
 8003208:	08003248 	.word	0x08003248
 800320c:	08003248 	.word	0x08003248
 8003210:	08003248 	.word	0x08003248
 8003214:	0800324c 	.word	0x0800324c

08003218 <_init>:
 8003218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800321a:	bf00      	nop
 800321c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800321e:	bc08      	pop	{r3}
 8003220:	469e      	mov	lr, r3
 8003222:	4770      	bx	lr

08003224 <_fini>:
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	bf00      	nop
 8003228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800322a:	bc08      	pop	{r3}
 800322c:	469e      	mov	lr, r3
 800322e:	4770      	bx	lr
