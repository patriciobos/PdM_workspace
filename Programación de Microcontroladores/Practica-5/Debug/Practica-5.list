
Practica-5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020e0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002274  08002274  00012274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800229c  0800229c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080022a4  080022a4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080022a4  080022a4  000122a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080022a8  080022a8  000122a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080022ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000010  080022bc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000008c  080022bc  0002008c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007cd2  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001889  00000000  00000000  00027d55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  000295e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000055a  00000000  00000000  00029d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00015113  00000000  00000000  0002a25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000971a  00000000  00000000  0003f36d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008427b  00000000  00000000  00048a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001b04  00000000  00000000  000ccd04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000088  00000000  00000000  000ce808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800225c 	.word	0x0800225c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	0800225c 	.word	0x0800225c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fb19 	bl	8000b0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f80b 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f875 	bl	80005cc <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  bool init = uartInit();
 80004e2:	f000 f9fd 	bl	80008e0 <uartInit>
 80004e6:	4603      	mov	r3, r0
 80004e8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 2 */
  debounceFSM_init();
 80004ea:	f000 fa6b 	bl	80009c4 <debounceFSM_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  readKey();
 80004ee:	f000 fac3 	bl	8000a78 <readKey>
 80004f2:	e7fc      	b.n	80004ee <main+0x1e>

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b094      	sub	sp, #80	; 0x50
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0320 	add.w	r3, r7, #32
 80004fe:	2230      	movs	r2, #48	; 0x30
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f001 fe7e 	bl	8002204 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	f107 030c 	add.w	r3, r7, #12
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	605a      	str	r2, [r3, #4]
 8000512:	609a      	str	r2, [r3, #8]
 8000514:	60da      	str	r2, [r3, #12]
 8000516:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000518:	2300      	movs	r3, #0
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	4b29      	ldr	r3, [pc, #164]	; (80005c4 <SystemClock_Config+0xd0>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000520:	4a28      	ldr	r2, [pc, #160]	; (80005c4 <SystemClock_Config+0xd0>)
 8000522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000526:	6413      	str	r3, [r2, #64]	; 0x40
 8000528:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <SystemClock_Config+0xd0>)
 800052a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800052c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
 8000538:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <SystemClock_Config+0xd4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <SystemClock_Config+0xd4>)
 8000542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000546:	6013      	str	r3, [r2, #0]
 8000548:	4b1f      	ldr	r3, [pc, #124]	; (80005c8 <SystemClock_Config+0xd4>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000550:	607b      	str	r3, [r7, #4]
 8000552:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000554:	2302      	movs	r3, #2
 8000556:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000558:	2301      	movs	r3, #1
 800055a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800055c:	2310      	movs	r3, #16
 800055e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000560:	2302      	movs	r3, #2
 8000562:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000564:	2300      	movs	r3, #0
 8000566:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000568:	2310      	movs	r3, #16
 800056a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800056c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000570:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000572:	2304      	movs	r3, #4
 8000574:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000576:	2307      	movs	r3, #7
 8000578:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	4618      	mov	r0, r3
 8000580:	f000 fde6 	bl	8001150 <HAL_RCC_OscConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800058a:	f000 f895 	bl	80006b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800058e:	230f      	movs	r3, #15
 8000590:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000592:	2302      	movs	r3, #2
 8000594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800059a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800059e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2102      	movs	r1, #2
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f848 	bl	8001640 <HAL_RCC_ClockConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80005b6:	f000 f87f 	bl	80006b8 <Error_Handler>
  }
}
 80005ba:	bf00      	nop
 80005bc:	3750      	adds	r7, #80	; 0x50
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40007000 	.word	0x40007000

080005cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	; 0x28
 80005d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b31      	ldr	r3, [pc, #196]	; (80006ac <MX_GPIO_Init+0xe0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	4a30      	ldr	r2, [pc, #192]	; (80006ac <MX_GPIO_Init+0xe0>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	; 0x30
 80005f2:	4b2e      	ldr	r3, [pc, #184]	; (80006ac <MX_GPIO_Init+0xe0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b2a      	ldr	r3, [pc, #168]	; (80006ac <MX_GPIO_Init+0xe0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	4a29      	ldr	r2, [pc, #164]	; (80006ac <MX_GPIO_Init+0xe0>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060c:	6313      	str	r3, [r2, #48]	; 0x30
 800060e:	4b27      	ldr	r3, [pc, #156]	; (80006ac <MX_GPIO_Init+0xe0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b23      	ldr	r3, [pc, #140]	; (80006ac <MX_GPIO_Init+0xe0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a22      	ldr	r2, [pc, #136]	; (80006ac <MX_GPIO_Init+0xe0>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b20      	ldr	r3, [pc, #128]	; (80006ac <MX_GPIO_Init+0xe0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b1c      	ldr	r3, [pc, #112]	; (80006ac <MX_GPIO_Init+0xe0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a1b      	ldr	r2, [pc, #108]	; (80006ac <MX_GPIO_Init+0xe0>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <MX_GPIO_Init+0xe0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	4816      	ldr	r0, [pc, #88]	; (80006b0 <MX_GPIO_Init+0xe4>)
 8000658:	f000 fd60 	bl	800111c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000662:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	4810      	ldr	r0, [pc, #64]	; (80006b4 <MX_GPIO_Init+0xe8>)
 8000674:	f000 fbce 	bl	8000e14 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000678:	2320      	movs	r3, #32
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <MX_GPIO_Init+0xe4>)
 8000690:	f000 fbc0 	bl	8000e14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000694:	2200      	movs	r2, #0
 8000696:	2100      	movs	r1, #0
 8000698:	2028      	movs	r0, #40	; 0x28
 800069a:	f000 fb84 	bl	8000da6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800069e:	2028      	movs	r0, #40	; 0x28
 80006a0:	f000 fb9d 	bl	8000dde <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006a4:	bf00      	nop
 80006a6:	3728      	adds	r7, #40	; 0x28
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	40023800 	.word	0x40023800
 80006b0:	40020000 	.word	0x40020000
 80006b4:	40020800 	.word	0x40020800

080006b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006bc:	b672      	cpsid	i
}
 80006be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <Error_Handler+0x8>
	...

080006c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <HAL_MspInit+0x4c>)
 80006d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006d2:	4a0f      	ldr	r2, [pc, #60]	; (8000710 <HAL_MspInit+0x4c>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d8:	6453      	str	r3, [r2, #68]	; 0x44
 80006da:	4b0d      	ldr	r3, [pc, #52]	; (8000710 <HAL_MspInit+0x4c>)
 80006dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	2300      	movs	r3, #0
 80006e8:	603b      	str	r3, [r7, #0]
 80006ea:	4b09      	ldr	r3, [pc, #36]	; (8000710 <HAL_MspInit+0x4c>)
 80006ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <HAL_MspInit+0x4c>)
 80006f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f4:	6413      	str	r3, [r2, #64]	; 0x40
 80006f6:	4b06      	ldr	r3, [pc, #24]	; (8000710 <HAL_MspInit+0x4c>)
 80006f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fe:	603b      	str	r3, [r7, #0]
 8000700:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000702:	2007      	movs	r0, #7
 8000704:	f000 fb44 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000708:	bf00      	nop
 800070a:	3708      	adds	r7, #8
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40023800 	.word	0x40023800

08000714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b08a      	sub	sp, #40	; 0x28
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	f107 0314 	add.w	r3, r7, #20
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a19      	ldr	r2, [pc, #100]	; (8000798 <HAL_UART_MspInit+0x84>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d12b      	bne.n	800078e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	613b      	str	r3, [r7, #16]
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <HAL_UART_MspInit+0x88>)
 800073c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073e:	4a17      	ldr	r2, [pc, #92]	; (800079c <HAL_UART_MspInit+0x88>)
 8000740:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000744:	6413      	str	r3, [r2, #64]	; 0x40
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <HAL_UART_MspInit+0x88>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60fb      	str	r3, [r7, #12]
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <HAL_UART_MspInit+0x88>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a10      	ldr	r2, [pc, #64]	; (800079c <HAL_UART_MspInit+0x88>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <HAL_UART_MspInit+0x88>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800076e:	230c      	movs	r3, #12
 8000770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800077e:	2307      	movs	r3, #7
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4619      	mov	r1, r3
 8000788:	4805      	ldr	r0, [pc, #20]	; (80007a0 <HAL_UART_MspInit+0x8c>)
 800078a:	f000 fb43 	bl	8000e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800078e:	bf00      	nop
 8000790:	3728      	adds	r7, #40	; 0x28
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40004400 	.word	0x40004400
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a8:	e7fe      	b.n	80007a8 <NMI_Handler+0x4>

080007aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007ae:	e7fe      	b.n	80007ae <HardFault_Handler+0x4>

080007b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <MemManage_Handler+0x4>

080007b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b6:	b480      	push	{r7}
 80007b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ba:	e7fe      	b.n	80007ba <BusFault_Handler+0x4>

080007bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <UsageFault_Handler+0x4>

080007c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007c2:	b480      	push	{r7}
 80007c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c6:	bf00      	nop
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f0:	f000 f9de 	bl	8000bb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007fc:	4b06      	ldr	r3, [pc, #24]	; (8000818 <SystemInit+0x20>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000802:	4a05      	ldr	r2, [pc, #20]	; (8000818 <SystemInit+0x20>)
 8000804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800080c:	bf00      	nop
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	e000ed00 	.word	0xe000ed00

0800081c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800081c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000854 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000820:	480d      	ldr	r0, [pc, #52]	; (8000858 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000822:	490e      	ldr	r1, [pc, #56]	; (800085c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000824:	4a0e      	ldr	r2, [pc, #56]	; (8000860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000828:	e002      	b.n	8000830 <LoopCopyDataInit>

0800082a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800082a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800082c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800082e:	3304      	adds	r3, #4

08000830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000834:	d3f9      	bcc.n	800082a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000836:	4a0b      	ldr	r2, [pc, #44]	; (8000864 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000838:	4c0b      	ldr	r4, [pc, #44]	; (8000868 <LoopFillZerobss+0x26>)
  movs r3, #0
 800083a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800083c:	e001      	b.n	8000842 <LoopFillZerobss>

0800083e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800083e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000840:	3204      	adds	r2, #4

08000842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000844:	d3fb      	bcc.n	800083e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000846:	f7ff ffd7 	bl	80007f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800084a:	f001 fce3 	bl	8002214 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800084e:	f7ff fe3f 	bl	80004d0 <main>
  bx  lr    
 8000852:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000854:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000858:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800085c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000860:	080022ac 	.word	0x080022ac
  ldr r2, =_sbss
 8000864:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000868:	2000008c 	.word	0x2000008c

0800086c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800086c:	e7fe      	b.n	800086c <ADC_IRQHandler>

0800086e <delayInit>:
#include "API_delay.h"
#include "main.h"



void delayInit( delay_t * delay, tick_t duration ){ //Setea el tiempo pero no inicializa el tim
 800086e:	b580      	push	{r7, lr}
 8000870:	b082      	sub	sp, #8
 8000872:	af00      	add	r7, sp, #0
 8000874:	6078      	str	r0, [r7, #4]
 8000876:	6039      	str	r1, [r7, #0]

	if (delay == NULL || duration <=0){
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d002      	beq.n	8000884 <delayInit+0x16>
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <delayInit+0x1a>
		Error_Handler();
 8000884:	f7ff ff18 	bl	80006b8 <Error_Handler>
	}
	delay->running = false;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2200      	movs	r2, #0
 800088c:	721a      	strb	r2, [r3, #8]
	delay->duration = duration;
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	683a      	ldr	r2, [r7, #0]
 8000892:	605a      	str	r2, [r3, #4]

}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <delayRead>:

bool_t delayRead( delay_t * delay ){
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	if (delay == NULL){
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <delayRead+0x12>
			Error_Handler();
 80008aa:	f7ff ff05 	bl	80006b8 <Error_Handler>
		}

		if( HAL_GetTick() - delay->startTime > delay->duration && delay->running){
 80008ae:	f000 f993 	bl	8000bd8 <HAL_GetTick>
 80008b2:	4602      	mov	r2, r0
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	1ad2      	subs	r2, r2, r3
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	429a      	cmp	r2, r3
 80008c0:	d908      	bls.n	80008d4 <delayRead+0x38>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	7a1b      	ldrb	r3, [r3, #8]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d004      	beq.n	80008d4 <delayRead+0x38>
			//Termino el tiempo
			delay->running = false;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2200      	movs	r2, #0
 80008ce:	721a      	strb	r2, [r3, #8]
			return true;
 80008d0:	2301      	movs	r3, #1
 80008d2:	e000      	b.n	80008d6 <delayRead+0x3a>
		} else {
			return false;
 80008d4:	2300      	movs	r3, #0
		}


}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <uartInit>:
static UART_HandleTypeDef huart2;

static void MX_USART2_UART_Init(void);


bool uartInit(void){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0

	bool CorrectInicialization = false;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]
	MX_USART2_UART_Init();
 80008ea:	f000 f847 	bl	800097c <MX_USART2_UART_Init>
	if (HAL_UART_Init(&huart2) == HAL_OK)
 80008ee:	480b      	ldr	r0, [pc, #44]	; (800091c <uartInit+0x3c>)
 80008f0:	f001 f8c6 	bl	8001a80 <HAL_UART_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d10b      	bne.n	8000912 <uartInit+0x32>
	  {
		uartSendString("\033[2J");
 80008fa:	4809      	ldr	r0, [pc, #36]	; (8000920 <uartInit+0x40>)
 80008fc:	f000 f814 	bl	8000928 <uartSendString>
		//UART PRINT VARIABLES de CONFIGURACION
		uint16_t size = sizeof(uint8_t);
 8000900:	2301      	movs	r3, #1
 8000902:	80bb      	strh	r3, [r7, #4]
		char* baudrate = "115200";
 8000904:	4b07      	ldr	r3, [pc, #28]	; (8000924 <uartInit+0x44>)
 8000906:	603b      	str	r3, [r7, #0]
		uartSendString(baudrate);
 8000908:	6838      	ldr	r0, [r7, #0]
 800090a:	f000 f80d 	bl	8000928 <uartSendString>

		CorrectInicialization=true;
 800090e:	2301      	movs	r3, #1
 8000910:	71fb      	strb	r3, [r7, #7]
	  }
	return CorrectInicialization;
 8000912:	79fb      	ldrb	r3, [r7, #7]
}
 8000914:	4618      	mov	r0, r3
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	2000002c 	.word	0x2000002c
 8000920:	08002274 	.word	0x08002274
 8000924:	0800227c 	.word	0x0800227c

08000928 <uartSendString>:

void uartSendString(uint8_t * pstring){
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]

	 int length = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	60fb      	str	r3, [r7, #12]

	  // Loop through the array, counting the number of bytes before the terminating null character.
	  while (pstring[length] != '\0') {
 8000934:	e002      	b.n	800093c <uartSendString+0x14>
	    length++;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	3301      	adds	r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
	  while (pstring[length] != '\0') {
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f6      	bne.n	8000936 <uartSendString+0xe>
	  }

	 HAL_UART_Transmit(&huart2, pstring, length, UART_TIMER_MS(50));
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	b29a      	uxth	r2, r3
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <uartSendString+0x48>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4908      	ldr	r1, [pc, #32]	; (8000974 <uartSendString+0x4c>)
 8000952:	fba1 1303 	umull	r1, r3, r1, r3
 8000956:	099b      	lsrs	r3, r3, #6
 8000958:	2132      	movs	r1, #50	; 0x32
 800095a:	fb01 f303 	mul.w	r3, r1, r3
 800095e:	6879      	ldr	r1, [r7, #4]
 8000960:	4805      	ldr	r0, [pc, #20]	; (8000978 <uartSendString+0x50>)
 8000962:	f001 f8da 	bl	8001b1a <HAL_UART_Transmit>


}
 8000966:	bf00      	nop
 8000968:	3710      	adds	r7, #16
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000000 	.word	0x20000000
 8000974:	10624dd3 	.word	0x10624dd3
 8000978:	2000002c 	.word	0x2000002c

0800097c <MX_USART2_UART_Init>:
}



static void MX_USART2_UART_Init(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0


  huart2.Instance = USART2;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART2_UART_Init+0x40>)
 8000982:	4a0f      	ldr	r2, [pc, #60]	; (80009c0 <MX_USART2_UART_Init+0x44>)
 8000984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_USART2_UART_Init+0x40>)
 8000988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800098c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART2_UART_Init+0x40>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART2_UART_Init+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART2_UART_Init+0x40>)
 800099c:	2200      	movs	r2, #0
 800099e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART2_UART_Init+0x40>)
 80009a2:	220c      	movs	r2, #12
 80009a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <MX_USART2_UART_Init+0x40>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <MX_USART2_UART_Init+0x40>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	61da      	str	r2, [r3, #28]



}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	2000002c 	.word	0x2000002c
 80009c0:	40004400 	.word	0x40004400

080009c4 <debounceFSM_init>:
static bool ButtonPressOcurred = false;


static delay_t timer;

void debounceFSM_init(void){		// debe cargar el estado inicial
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0


	FSMPointer = BUTTON_UP;
 80009c8:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <debounceFSM_init+0x1c>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
	delayInit(&timer,BOUNCE_TIME_DELAY);
 80009ce:	2128      	movs	r1, #40	; 0x28
 80009d0:	4804      	ldr	r0, [pc, #16]	; (80009e4 <debounceFSM_init+0x20>)
 80009d2:	f7ff ff4c 	bl	800086e <delayInit>
	LED_PLACA_init(&LED);
 80009d6:	4804      	ldr	r0, [pc, #16]	; (80009e8 <debounceFSM_init+0x24>)
 80009d8:	f000 f866 	bl	8000aa8 <LED_PLACA_init>

}
 80009dc:	bf00      	nop
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000004 	.word	0x20000004
 80009e4:	2000007c 	.word	0x2000007c
 80009e8:	20000070 	.word	0x20000070

080009ec <debounceFSM_timer_update>:

void debounceFSM_timer_update(void){
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
	switch(FSMPointer){
 80009f0:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <debounceFSM_timer_update+0x54>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d002      	beq.n	80009fe <debounceFSM_timer_update+0x12>
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	d00e      	beq.n	8000a1a <debounceFSM_timer_update+0x2e>
				break;
				}


	}
}
 80009fc:	e01e      	b.n	8000a3c <debounceFSM_timer_update+0x50>
				if (ButtonPressOcurred){  //Vuelvo a ver el estado del boton, si es igual -> avanzo
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <debounceFSM_timer_update+0x58>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d005      	beq.n	8000a12 <debounceFSM_timer_update+0x26>
					FSMPointer = BUTTON_DOWN;
 8000a06:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <debounceFSM_timer_update+0x54>)
 8000a08:	2202      	movs	r2, #2
 8000a0a:	701a      	strb	r2, [r3, #0]
					buttonPressed();
 8000a0c:	f000 f81c 	bl	8000a48 <buttonPressed>
				break;
 8000a10:	e014      	b.n	8000a3c <debounceFSM_timer_update+0x50>
					FSMPointer = BUTTON_UP;
 8000a12:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <debounceFSM_timer_update+0x54>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
				break;
 8000a18:	e010      	b.n	8000a3c <debounceFSM_timer_update+0x50>
				if (!ButtonPressOcurred){ //Vuelvo a ver el estado del boton, si es igual -> avanzo
 8000a1a:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <debounceFSM_timer_update+0x58>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	f083 0301 	eor.w	r3, r3, #1
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d005      	beq.n	8000a34 <debounceFSM_timer_update+0x48>
					FSMPointer = BUTTON_UP;
 8000a28:	4b05      	ldr	r3, [pc, #20]	; (8000a40 <debounceFSM_timer_update+0x54>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
					buttonReleased();
 8000a2e:	f000 f817 	bl	8000a60 <buttonReleased>
				break;
 8000a32:	e002      	b.n	8000a3a <debounceFSM_timer_update+0x4e>
							FSMPointer = BUTTON_DOWN;
 8000a34:	4b02      	ldr	r3, [pc, #8]	; (8000a40 <debounceFSM_timer_update+0x54>)
 8000a36:	2202      	movs	r2, #2
 8000a38:	701a      	strb	r2, [r3, #0]
				break;
 8000a3a:	bf00      	nop
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	20000004 	.word	0x20000004
 8000a44:	20000078 	.word	0x20000078

08000a48 <buttonPressed>:

	}

}
					// transición de estados y actualizar las salidas
void buttonPressed(void){
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0

	LED_TURN_ON(LED);
 8000a4c:	4b03      	ldr	r3, [pc, #12]	; (8000a5c <buttonPressed+0x14>)
 8000a4e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a52:	f000 f83b 	bl	8000acc <LED_TURN_ON>
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000070 	.word	0x20000070

08000a60 <buttonReleased>:
void buttonReleased(void){
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0

	LED_TURN_OFF(LED);
 8000a64:	4b03      	ldr	r3, [pc, #12]	; (8000a74 <buttonReleased+0x14>)
 8000a66:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a6a:	f000 f83f 	bl	8000aec <LED_TURN_OFF>
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000070 	.word	0x20000070

08000a78 <readKey>:
GPIO_PinState ReadButton(void){

	return HAL_GPIO_ReadPin(GPIOC,B1_Pin);
}

bool_t readKey(void){
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0

		bool timesUp = delayRead(&timer);
 8000a7e:	4808      	ldr	r0, [pc, #32]	; (8000aa0 <readKey+0x28>)
 8000a80:	f7ff ff0c 	bl	800089c <delayRead>
 8000a84:	4603      	mov	r3, r0
 8000a86:	71fb      	strb	r3, [r7, #7]
		if (timesUp){
 8000a88:	79fb      	ldrb	r3, [r7, #7]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <readKey+0x1a>
			debounceFSM_timer_update();
 8000a8e:	f7ff ffad 	bl	80009ec <debounceFSM_timer_update>
		}

return ButtonPressOcurred;
 8000a92:	4b04      	ldr	r3, [pc, #16]	; (8000aa4 <readKey+0x2c>)
 8000a94:	781b      	ldrb	r3, [r3, #0]

}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2000007c 	.word	0x2000007c
 8000aa4:	20000078 	.word	0x20000078

08000aa8 <LED_PLACA_init>:

//void LED3_TURN_ON(struct led_data);
//void LED3_TURN_OFF(struct led_data);
//void LED3_TOGGLE(struct led_data);

void LED_PLACA_init(struct led_data *ledPlaca){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]

	ledPlaca->GPIO_target = LD2_GPIO_Port;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a05      	ldr	r2, [pc, #20]	; (8000ac8 <LED_PLACA_init+0x20>)
 8000ab4:	601a      	str	r2, [r3, #0]
	ledPlaca->Pin_Nro = LD2_Pin;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	2220      	movs	r2, #32
 8000aba:	809a      	strh	r2, [r3, #4]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	40020000 	.word	0x40020000

08000acc <LED_TURN_ON>:

void LED_TURN_ON(struct led_data led){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	e883 0003 	stmia.w	r3, {r0, r1}

	 HAL_GPIO_WritePin(led.GPIO_target, led.Pin_Nro,LED_ON);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	88b9      	ldrh	r1, [r7, #4]
 8000adc:	2201      	movs	r2, #1
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fb1c 	bl	800111c <HAL_GPIO_WritePin>
}
 8000ae4:	bf00      	nop
 8000ae6:	3708      	adds	r7, #8
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}

08000aec <LED_TURN_OFF>:
void LED_TURN_OFF(struct led_data led){
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	463b      	mov	r3, r7
 8000af4:	e883 0003 	stmia.w	r3, {r0, r1}
	 HAL_GPIO_WritePin(led.GPIO_target, led.Pin_Nro,LED_OFF);
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	88b9      	ldrh	r1, [r7, #4]
 8000afc:	2200      	movs	r2, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f000 fb0c 	bl	800111c <HAL_GPIO_WritePin>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <HAL_Init+0x40>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <HAL_Init+0x40>)
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b1c:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <HAL_Init+0x40>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a0a      	ldr	r2, [pc, #40]	; (8000b4c <HAL_Init+0x40>)
 8000b22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b28:	4b08      	ldr	r3, [pc, #32]	; (8000b4c <HAL_Init+0x40>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_Init+0x40>)
 8000b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b34:	2003      	movs	r0, #3
 8000b36:	f000 f92b 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 f808 	bl	8000b50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b40:	f7ff fdc0 	bl	80006c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b44:	2300      	movs	r3, #0
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40023c00 	.word	0x40023c00

08000b50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x54>)
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_InitTick+0x58>)
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	4619      	mov	r1, r3
 8000b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 f943 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e00e      	b.n	8000b9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2b0f      	cmp	r3, #15
 8000b82:	d80a      	bhi.n	8000b9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b84:	2200      	movs	r2, #0
 8000b86:	6879      	ldr	r1, [r7, #4]
 8000b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b8c:	f000 f90b 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b90:	4a06      	ldr	r2, [pc, #24]	; (8000bac <HAL_InitTick+0x5c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
 8000b98:	e000      	b.n	8000b9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b9a:	2301      	movs	r3, #1
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	20000000 	.word	0x20000000
 8000ba8:	2000000c 	.word	0x2000000c
 8000bac:	20000008 	.word	0x20000008

08000bb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb4:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x20>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4413      	add	r3, r2
 8000bc0:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_IncTick+0x24>)
 8000bc2:	6013      	str	r3, [r2, #0]
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	2000000c 	.word	0x2000000c
 8000bd4:	20000088 	.word	0x20000088

08000bd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  return uwTick;
 8000bdc:	4b03      	ldr	r3, [pc, #12]	; (8000bec <HAL_GetTick+0x14>)
 8000bde:	681b      	ldr	r3, [r3, #0]
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	20000088 	.word	0x20000088

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff29 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff3e 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa2 	bl	8000d4c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
	...

08000e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b089      	sub	sp, #36	; 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	61fb      	str	r3, [r7, #28]
 8000e2e:	e159      	b.n	80010e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e30:	2201      	movs	r2, #1
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	697a      	ldr	r2, [r7, #20]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	f040 8148 	bne.w	80010de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685b      	ldr	r3, [r3, #4]
 8000e52:	f003 0303 	and.w	r3, r3, #3
 8000e56:	2b01      	cmp	r3, #1
 8000e58:	d005      	beq.n	8000e66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e62:	2b02      	cmp	r3, #2
 8000e64:	d130      	bne.n	8000ec8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	2203      	movs	r2, #3
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	091b      	lsrs	r3, r3, #4
 8000eb2:	f003 0201 	and.w	r2, r3, #1
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d017      	beq.n	8000f04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	689a      	ldr	r2, [r3, #8]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0303 	and.w	r3, r3, #3
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d123      	bne.n	8000f58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f1e:	69fb      	ldr	r3, [r7, #28]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	220f      	movs	r2, #15
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0307 	and.w	r3, r3, #7
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	08da      	lsrs	r2, r3, #3
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	3208      	adds	r2, #8
 8000f52:	69b9      	ldr	r1, [r7, #24]
 8000f54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	2203      	movs	r2, #3
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	43db      	mvns	r3, r3
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	4013      	ands	r3, r2
 8000f6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f003 0203 	and.w	r2, r3, #3
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	005b      	lsls	r3, r3, #1
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4313      	orrs	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	f000 80a2 	beq.w	80010de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	60fb      	str	r3, [r7, #12]
 8000f9e:	4b57      	ldr	r3, [pc, #348]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa2:	4a56      	ldr	r2, [pc, #344]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa8:	6453      	str	r3, [r2, #68]	; 0x44
 8000faa:	4b54      	ldr	r3, [pc, #336]	; (80010fc <HAL_GPIO_Init+0x2e8>)
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb2:	60fb      	str	r3, [r7, #12]
 8000fb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fb6:	4a52      	ldr	r2, [pc, #328]	; (8001100 <HAL_GPIO_Init+0x2ec>)
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	089b      	lsrs	r3, r3, #2
 8000fbc:	3302      	adds	r3, #2
 8000fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	f003 0303 	and.w	r3, r3, #3
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	220f      	movs	r2, #15
 8000fce:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd2:	43db      	mvns	r3, r3
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a49      	ldr	r2, [pc, #292]	; (8001104 <HAL_GPIO_Init+0x2f0>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d019      	beq.n	8001016 <HAL_GPIO_Init+0x202>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a48      	ldr	r2, [pc, #288]	; (8001108 <HAL_GPIO_Init+0x2f4>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d013      	beq.n	8001012 <HAL_GPIO_Init+0x1fe>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a47      	ldr	r2, [pc, #284]	; (800110c <HAL_GPIO_Init+0x2f8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d00d      	beq.n	800100e <HAL_GPIO_Init+0x1fa>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a46      	ldr	r2, [pc, #280]	; (8001110 <HAL_GPIO_Init+0x2fc>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d007      	beq.n	800100a <HAL_GPIO_Init+0x1f6>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a45      	ldr	r2, [pc, #276]	; (8001114 <HAL_GPIO_Init+0x300>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d101      	bne.n	8001006 <HAL_GPIO_Init+0x1f2>
 8001002:	2304      	movs	r3, #4
 8001004:	e008      	b.n	8001018 <HAL_GPIO_Init+0x204>
 8001006:	2307      	movs	r3, #7
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x204>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x204>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x204>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x204>
 8001016:	2300      	movs	r3, #0
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	f002 0203 	and.w	r2, r2, #3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4093      	lsls	r3, r2
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001028:	4935      	ldr	r1, [pc, #212]	; (8001100 <HAL_GPIO_Init+0x2ec>)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001036:	4b38      	ldr	r3, [pc, #224]	; (8001118 <HAL_GPIO_Init+0x304>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800105a:	4a2f      	ldr	r2, [pc, #188]	; (8001118 <HAL_GPIO_Init+0x304>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001060:	4b2d      	ldr	r3, [pc, #180]	; (8001118 <HAL_GPIO_Init+0x304>)
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001084:	4a24      	ldr	r2, [pc, #144]	; (8001118 <HAL_GPIO_Init+0x304>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800108a:	4b23      	ldr	r3, [pc, #140]	; (8001118 <HAL_GPIO_Init+0x304>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ae:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_GPIO_Init+0x304>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	f67f aea2 	bls.w	8000e30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40013800 	.word	0x40013800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40020800 	.word	0x40020800
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40013c00 	.word	0x40013c00

0800111c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	460b      	mov	r3, r1
 8001126:	807b      	strh	r3, [r7, #2]
 8001128:	4613      	mov	r3, r2
 800112a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800112c:	787b      	ldrb	r3, [r7, #1]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001132:	887a      	ldrh	r2, [r7, #2]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001138:	e003      	b.n	8001142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113a:	887b      	ldrh	r3, [r7, #2]
 800113c:	041a      	lsls	r2, r3, #16
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
	...

08001150 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b086      	sub	sp, #24
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d101      	bne.n	8001162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e267      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b00      	cmp	r3, #0
 800116c:	d075      	beq.n	800125a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800116e:	4b88      	ldr	r3, [pc, #544]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	2b04      	cmp	r3, #4
 8001178:	d00c      	beq.n	8001194 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800117a:	4b85      	ldr	r3, [pc, #532]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001182:	2b08      	cmp	r3, #8
 8001184:	d112      	bne.n	80011ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001186:	4b82      	ldr	r3, [pc, #520]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001192:	d10b      	bne.n	80011ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001194:	4b7e      	ldr	r3, [pc, #504]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d05b      	beq.n	8001258 <HAL_RCC_OscConfig+0x108>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d157      	bne.n	8001258 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e242      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011b4:	d106      	bne.n	80011c4 <HAL_RCC_OscConfig+0x74>
 80011b6:	4b76      	ldr	r3, [pc, #472]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	4a75      	ldr	r2, [pc, #468]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c0:	6013      	str	r3, [r2, #0]
 80011c2:	e01d      	b.n	8001200 <HAL_RCC_OscConfig+0xb0>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011cc:	d10c      	bne.n	80011e8 <HAL_RCC_OscConfig+0x98>
 80011ce:	4b70      	ldr	r3, [pc, #448]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a6f      	ldr	r2, [pc, #444]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011d8:	6013      	str	r3, [r2, #0]
 80011da:	4b6d      	ldr	r3, [pc, #436]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a6c      	ldr	r2, [pc, #432]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e4:	6013      	str	r3, [r2, #0]
 80011e6:	e00b      	b.n	8001200 <HAL_RCC_OscConfig+0xb0>
 80011e8:	4b69      	ldr	r3, [pc, #420]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a68      	ldr	r2, [pc, #416]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b66      	ldr	r3, [pc, #408]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a65      	ldr	r2, [pc, #404]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80011fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d013      	beq.n	8001230 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fce6 	bl	8000bd8 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fce2 	bl	8000bd8 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	; 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e207      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001222:	4b5b      	ldr	r3, [pc, #364]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d0f0      	beq.n	8001210 <HAL_RCC_OscConfig+0xc0>
 800122e:	e014      	b.n	800125a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fcd2 	bl	8000bd8 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fcce 	bl	8000bd8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1f3      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800124a:	4b51      	ldr	r3, [pc, #324]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f0      	bne.n	8001238 <HAL_RCC_OscConfig+0xe8>
 8001256:	e000      	b.n	800125a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f003 0302 	and.w	r3, r3, #2
 8001262:	2b00      	cmp	r3, #0
 8001264:	d063      	beq.n	800132e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001266:	4b4a      	ldr	r3, [pc, #296]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f003 030c 	and.w	r3, r3, #12
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00b      	beq.n	800128a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001272:	4b47      	ldr	r3, [pc, #284]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800127a:	2b08      	cmp	r3, #8
 800127c:	d11c      	bne.n	80012b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800127e:	4b44      	ldr	r3, [pc, #272]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 0302 	and.w	r3, r3, #2
 8001292:	2b00      	cmp	r3, #0
 8001294:	d005      	beq.n	80012a2 <HAL_RCC_OscConfig+0x152>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d001      	beq.n	80012a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e1c7      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	4b3b      	ldr	r3, [pc, #236]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00db      	lsls	r3, r3, #3
 80012b0:	4937      	ldr	r1, [pc, #220]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e03a      	b.n	800132e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d020      	beq.n	8001302 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b34      	ldr	r3, [pc, #208]	; (8001394 <HAL_RCC_OscConfig+0x244>)
 80012c2:	2201      	movs	r2, #1
 80012c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c6:	f7ff fc87 	bl	8000bd8 <HAL_GetTick>
 80012ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012cc:	e008      	b.n	80012e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012ce:	f7ff fc83 	bl	8000bd8 <HAL_GetTick>
 80012d2:	4602      	mov	r2, r0
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	1ad3      	subs	r3, r2, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e1a8      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e0:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0f0      	beq.n	80012ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	691b      	ldr	r3, [r3, #16]
 80012f8:	00db      	lsls	r3, r3, #3
 80012fa:	4925      	ldr	r1, [pc, #148]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 80012fc:	4313      	orrs	r3, r2
 80012fe:	600b      	str	r3, [r1, #0]
 8001300:	e015      	b.n	800132e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001302:	4b24      	ldr	r3, [pc, #144]	; (8001394 <HAL_RCC_OscConfig+0x244>)
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fc66 	bl	8000bd8 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fc62 	bl	8000bd8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e187      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001322:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	2b00      	cmp	r3, #0
 8001338:	d036      	beq.n	80013a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	695b      	ldr	r3, [r3, #20]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d016      	beq.n	8001370 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_RCC_OscConfig+0x248>)
 8001344:	2201      	movs	r2, #1
 8001346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001348:	f7ff fc46 	bl	8000bd8 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001350:	f7ff fc42 	bl	8000bd8 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b02      	cmp	r3, #2
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e167      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_RCC_OscConfig+0x240>)
 8001364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001366:	f003 0302 	and.w	r3, r3, #2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x200>
 800136e:	e01b      	b.n	80013a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_RCC_OscConfig+0x248>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001376:	f7ff fc2f 	bl	8000bd8 <HAL_GetTick>
 800137a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800137c:	e00e      	b.n	800139c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800137e:	f7ff fc2b 	bl	8000bd8 <HAL_GetTick>
 8001382:	4602      	mov	r2, r0
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	2b02      	cmp	r3, #2
 800138a:	d907      	bls.n	800139c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e150      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
 8001390:	40023800 	.word	0x40023800
 8001394:	42470000 	.word	0x42470000
 8001398:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800139c:	4b88      	ldr	r3, [pc, #544]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800139e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1ea      	bne.n	800137e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0304 	and.w	r3, r3, #4
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 8097 	beq.w	80014e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013ba:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d10f      	bne.n	80013e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	4b7d      	ldr	r3, [pc, #500]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a7c      	ldr	r2, [pc, #496]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b7a      	ldr	r3, [pc, #488]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013e2:	2301      	movs	r3, #1
 80013e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013e6:	4b77      	ldr	r3, [pc, #476]	; (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d118      	bne.n	8001424 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013f2:	4b74      	ldr	r3, [pc, #464]	; (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a73      	ldr	r2, [pc, #460]	; (80015c4 <HAL_RCC_OscConfig+0x474>)
 80013f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fbeb 	bl	8000bd8 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001406:	f7ff fbe7 	bl	8000bd8 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e10c      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	4b6a      	ldr	r3, [pc, #424]	; (80015c4 <HAL_RCC_OscConfig+0x474>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d106      	bne.n	800143a <HAL_RCC_OscConfig+0x2ea>
 800142c:	4b64      	ldr	r3, [pc, #400]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a63      	ldr	r2, [pc, #396]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
 8001438:	e01c      	b.n	8001474 <HAL_RCC_OscConfig+0x324>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d10c      	bne.n	800145c <HAL_RCC_OscConfig+0x30c>
 8001442:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001444:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001446:	4a5e      	ldr	r2, [pc, #376]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001448:	f043 0304 	orr.w	r3, r3, #4
 800144c:	6713      	str	r3, [r2, #112]	; 0x70
 800144e:	4b5c      	ldr	r3, [pc, #368]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001452:	4a5b      	ldr	r2, [pc, #364]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001454:	f043 0301 	orr.w	r3, r3, #1
 8001458:	6713      	str	r3, [r2, #112]	; 0x70
 800145a:	e00b      	b.n	8001474 <HAL_RCC_OscConfig+0x324>
 800145c:	4b58      	ldr	r3, [pc, #352]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800145e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001460:	4a57      	ldr	r2, [pc, #348]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6713      	str	r3, [r2, #112]	; 0x70
 8001468:	4b55      	ldr	r3, [pc, #340]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800146a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146c:	4a54      	ldr	r2, [pc, #336]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800146e:	f023 0304 	bic.w	r3, r3, #4
 8001472:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d015      	beq.n	80014a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800147c:	f7ff fbac 	bl	8000bd8 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001482:	e00a      	b.n	800149a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001484:	f7ff fba8 	bl	8000bd8 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001492:	4293      	cmp	r3, r2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e0cb      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800149a:	4b49      	ldr	r3, [pc, #292]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800149c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0ee      	beq.n	8001484 <HAL_RCC_OscConfig+0x334>
 80014a6:	e014      	b.n	80014d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014a8:	f7ff fb96 	bl	8000bd8 <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ae:	e00a      	b.n	80014c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b0:	f7ff fb92 	bl	8000bd8 <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80014be:	4293      	cmp	r3, r2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e0b5      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014c6:	4b3e      	ldr	r3, [pc, #248]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ca:	f003 0302 	and.w	r3, r3, #2
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1ee      	bne.n	80014b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014d2:	7dfb      	ldrb	r3, [r7, #23]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d105      	bne.n	80014e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014d8:	4b39      	ldr	r3, [pc, #228]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014dc:	4a38      	ldr	r2, [pc, #224]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 80a1 	beq.w	8001630 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014ee:	4b34      	ldr	r3, [pc, #208]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	2b08      	cmp	r3, #8
 80014f8:	d05c      	beq.n	80015b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d141      	bne.n	8001586 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001502:	4b31      	ldr	r3, [pc, #196]	; (80015c8 <HAL_RCC_OscConfig+0x478>)
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001508:	f7ff fb66 	bl	8000bd8 <HAL_GetTick>
 800150c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150e:	e008      	b.n	8001522 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001510:	f7ff fb62 	bl	8000bd8 <HAL_GetTick>
 8001514:	4602      	mov	r2, r0
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	2b02      	cmp	r3, #2
 800151c:	d901      	bls.n	8001522 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800151e:	2303      	movs	r3, #3
 8001520:	e087      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001522:	4b27      	ldr	r3, [pc, #156]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f0      	bne.n	8001510 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69da      	ldr	r2, [r3, #28]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1b      	ldr	r3, [r3, #32]
 8001536:	431a      	orrs	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153c:	019b      	lsls	r3, r3, #6
 800153e:	431a      	orrs	r2, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001544:	085b      	lsrs	r3, r3, #1
 8001546:	3b01      	subs	r3, #1
 8001548:	041b      	lsls	r3, r3, #16
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	491b      	ldr	r1, [pc, #108]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 8001554:	4313      	orrs	r3, r2
 8001556:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <HAL_RCC_OscConfig+0x478>)
 800155a:	2201      	movs	r2, #1
 800155c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800155e:	f7ff fb3b 	bl	8000bd8 <HAL_GetTick>
 8001562:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001564:	e008      	b.n	8001578 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001566:	f7ff fb37 	bl	8000bd8 <HAL_GetTick>
 800156a:	4602      	mov	r2, r0
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	1ad3      	subs	r3, r2, r3
 8001570:	2b02      	cmp	r3, #2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e05c      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001580:	2b00      	cmp	r3, #0
 8001582:	d0f0      	beq.n	8001566 <HAL_RCC_OscConfig+0x416>
 8001584:	e054      	b.n	8001630 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_RCC_OscConfig+0x478>)
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb24 	bl	8000bd8 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fb20 	bl	8000bd8 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e045      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015a6:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_RCC_OscConfig+0x470>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d1f0      	bne.n	8001594 <HAL_RCC_OscConfig+0x444>
 80015b2:	e03d      	b.n	8001630 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	e038      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
 80015c0:	40023800 	.word	0x40023800
 80015c4:	40007000 	.word	0x40007000
 80015c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_RCC_OscConfig+0x4ec>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d028      	beq.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d121      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d11a      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f6:	68fa      	ldr	r2, [r7, #12]
 80015f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015fc:	4013      	ands	r3, r2
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001602:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001604:	4293      	cmp	r3, r2
 8001606:	d111      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	3b01      	subs	r3, #1
 8001616:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001618:	429a      	cmp	r2, r3
 800161a:	d107      	bne.n	800162c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001626:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001628:	429a      	cmp	r2, r3
 800162a:	d001      	beq.n	8001630 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e000      	b.n	8001632 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3718      	adds	r7, #24
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0cc      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001654:	4b68      	ldr	r3, [pc, #416]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0307 	and.w	r3, r3, #7
 800165c:	683a      	ldr	r2, [r7, #0]
 800165e:	429a      	cmp	r2, r3
 8001660:	d90c      	bls.n	800167c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001662:	4b65      	ldr	r3, [pc, #404]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800166a:	4b63      	ldr	r3, [pc, #396]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	683a      	ldr	r2, [r7, #0]
 8001674:	429a      	cmp	r2, r3
 8001676:	d001      	beq.n	800167c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001678:	2301      	movs	r3, #1
 800167a:	e0b8      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0302 	and.w	r3, r3, #2
 8001684:	2b00      	cmp	r3, #0
 8001686:	d020      	beq.n	80016ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	2b00      	cmp	r3, #0
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001694:	4b59      	ldr	r3, [pc, #356]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	4a58      	ldr	r2, [pc, #352]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800169e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0308 	and.w	r3, r3, #8
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016ac:	4b53      	ldr	r3, [pc, #332]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a52      	ldr	r2, [pc, #328]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016b8:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	494d      	ldr	r1, [pc, #308]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d044      	beq.n	8001760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d107      	bne.n	80016ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d119      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e07f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d003      	beq.n	80016fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d107      	bne.n	800170e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fe:	4b3f      	ldr	r3, [pc, #252]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d109      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e06f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800170e:	4b3b      	ldr	r3, [pc, #236]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d101      	bne.n	800171e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e067      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0203 	bic.w	r2, r3, #3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	4934      	ldr	r1, [pc, #208]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 800172c:	4313      	orrs	r3, r2
 800172e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001730:	f7ff fa52 	bl	8000bd8 <HAL_GetTick>
 8001734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001736:	e00a      	b.n	800174e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001738:	f7ff fa4e 	bl	8000bd8 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	f241 3288 	movw	r2, #5000	; 0x1388
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e04f      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b2b      	ldr	r3, [pc, #172]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 020c 	and.w	r2, r3, #12
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	429a      	cmp	r2, r3
 800175e:	d1eb      	bne.n	8001738 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b25      	ldr	r3, [pc, #148]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d20c      	bcs.n	8001788 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001770:	683a      	ldr	r2, [r7, #0]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001776:	4b20      	ldr	r3, [pc, #128]	; (80017f8 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	683a      	ldr	r2, [r7, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	d001      	beq.n	8001788 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e032      	b.n	80017ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0304 	and.w	r3, r3, #4
 8001790:	2b00      	cmp	r3, #0
 8001792:	d008      	beq.n	80017a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	4916      	ldr	r1, [pc, #88]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	4313      	orrs	r3, r2
 80017a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0308 	and.w	r3, r3, #8
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d009      	beq.n	80017c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017b4:	689b      	ldr	r3, [r3, #8]
 80017b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	00db      	lsls	r3, r3, #3
 80017c0:	490e      	ldr	r1, [pc, #56]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017c6:	f000 f821 	bl	800180c <HAL_RCC_GetSysClockFreq>
 80017ca:	4602      	mov	r2, r0
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_ClockConfig+0x1bc>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	091b      	lsrs	r3, r3, #4
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	490a      	ldr	r1, [pc, #40]	; (8001800 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	5ccb      	ldrb	r3, [r1, r3]
 80017da:	fa22 f303 	lsr.w	r3, r2, r3
 80017de:	4a09      	ldr	r2, [pc, #36]	; (8001804 <HAL_RCC_ClockConfig+0x1c4>)
 80017e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017e2:	4b09      	ldr	r3, [pc, #36]	; (8001808 <HAL_RCC_ClockConfig+0x1c8>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff f9b2 	bl	8000b50 <HAL_InitTick>

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023c00 	.word	0x40023c00
 80017fc:	40023800 	.word	0x40023800
 8001800:	08002284 	.word	0x08002284
 8001804:	20000000 	.word	0x20000000
 8001808:	20000008 	.word	0x20000008

0800180c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800180c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001810:	b094      	sub	sp, #80	; 0x50
 8001812:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001814:	2300      	movs	r3, #0
 8001816:	647b      	str	r3, [r7, #68]	; 0x44
 8001818:	2300      	movs	r3, #0
 800181a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800181c:	2300      	movs	r3, #0
 800181e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001820:	2300      	movs	r3, #0
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001824:	4b79      	ldr	r3, [pc, #484]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d00d      	beq.n	800184c <HAL_RCC_GetSysClockFreq+0x40>
 8001830:	2b08      	cmp	r3, #8
 8001832:	f200 80e1 	bhi.w	80019f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <HAL_RCC_GetSysClockFreq+0x34>
 800183a:	2b04      	cmp	r3, #4
 800183c:	d003      	beq.n	8001846 <HAL_RCC_GetSysClockFreq+0x3a>
 800183e:	e0db      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001840:	4b73      	ldr	r3, [pc, #460]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x204>)
 8001842:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001844:	e0db      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001846:	4b73      	ldr	r3, [pc, #460]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x208>)
 8001848:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800184a:	e0d8      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800184c:	4b6f      	ldr	r3, [pc, #444]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001854:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001856:	4b6d      	ldr	r3, [pc, #436]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d063      	beq.n	800192a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001862:	4b6a      	ldr	r3, [pc, #424]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	099b      	lsrs	r3, r3, #6
 8001868:	2200      	movs	r2, #0
 800186a:	63bb      	str	r3, [r7, #56]	; 0x38
 800186c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800186e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001874:	633b      	str	r3, [r7, #48]	; 0x30
 8001876:	2300      	movs	r3, #0
 8001878:	637b      	str	r3, [r7, #52]	; 0x34
 800187a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800187e:	4622      	mov	r2, r4
 8001880:	462b      	mov	r3, r5
 8001882:	f04f 0000 	mov.w	r0, #0
 8001886:	f04f 0100 	mov.w	r1, #0
 800188a:	0159      	lsls	r1, r3, #5
 800188c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001890:	0150      	lsls	r0, r2, #5
 8001892:	4602      	mov	r2, r0
 8001894:	460b      	mov	r3, r1
 8001896:	4621      	mov	r1, r4
 8001898:	1a51      	subs	r1, r2, r1
 800189a:	6139      	str	r1, [r7, #16]
 800189c:	4629      	mov	r1, r5
 800189e:	eb63 0301 	sbc.w	r3, r3, r1
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80018b0:	4659      	mov	r1, fp
 80018b2:	018b      	lsls	r3, r1, #6
 80018b4:	4651      	mov	r1, sl
 80018b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018ba:	4651      	mov	r1, sl
 80018bc:	018a      	lsls	r2, r1, #6
 80018be:	4651      	mov	r1, sl
 80018c0:	ebb2 0801 	subs.w	r8, r2, r1
 80018c4:	4659      	mov	r1, fp
 80018c6:	eb63 0901 	sbc.w	r9, r3, r1
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018de:	4690      	mov	r8, r2
 80018e0:	4699      	mov	r9, r3
 80018e2:	4623      	mov	r3, r4
 80018e4:	eb18 0303 	adds.w	r3, r8, r3
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	462b      	mov	r3, r5
 80018ec:	eb49 0303 	adc.w	r3, r9, r3
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	f04f 0200 	mov.w	r2, #0
 80018f6:	f04f 0300 	mov.w	r3, #0
 80018fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018fe:	4629      	mov	r1, r5
 8001900:	024b      	lsls	r3, r1, #9
 8001902:	4621      	mov	r1, r4
 8001904:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001908:	4621      	mov	r1, r4
 800190a:	024a      	lsls	r2, r1, #9
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001912:	2200      	movs	r2, #0
 8001914:	62bb      	str	r3, [r7, #40]	; 0x28
 8001916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001918:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800191c:	f7fe fc5a 	bl	80001d4 <__aeabi_uldivmod>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	4613      	mov	r3, r2
 8001926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001928:	e058      	b.n	80019dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800192a:	4b38      	ldr	r3, [pc, #224]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	099b      	lsrs	r3, r3, #6
 8001930:	2200      	movs	r2, #0
 8001932:	4618      	mov	r0, r3
 8001934:	4611      	mov	r1, r2
 8001936:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800193a:	623b      	str	r3, [r7, #32]
 800193c:	2300      	movs	r3, #0
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
 8001940:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001944:	4642      	mov	r2, r8
 8001946:	464b      	mov	r3, r9
 8001948:	f04f 0000 	mov.w	r0, #0
 800194c:	f04f 0100 	mov.w	r1, #0
 8001950:	0159      	lsls	r1, r3, #5
 8001952:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001956:	0150      	lsls	r0, r2, #5
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4641      	mov	r1, r8
 800195e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001962:	4649      	mov	r1, r9
 8001964:	eb63 0b01 	sbc.w	fp, r3, r1
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 0300 	mov.w	r3, #0
 8001970:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001974:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001978:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800197c:	ebb2 040a 	subs.w	r4, r2, sl
 8001980:	eb63 050b 	sbc.w	r5, r3, fp
 8001984:	f04f 0200 	mov.w	r2, #0
 8001988:	f04f 0300 	mov.w	r3, #0
 800198c:	00eb      	lsls	r3, r5, #3
 800198e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001992:	00e2      	lsls	r2, r4, #3
 8001994:	4614      	mov	r4, r2
 8001996:	461d      	mov	r5, r3
 8001998:	4643      	mov	r3, r8
 800199a:	18e3      	adds	r3, r4, r3
 800199c:	603b      	str	r3, [r7, #0]
 800199e:	464b      	mov	r3, r9
 80019a0:	eb45 0303 	adc.w	r3, r5, r3
 80019a4:	607b      	str	r3, [r7, #4]
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80019b2:	4629      	mov	r1, r5
 80019b4:	028b      	lsls	r3, r1, #10
 80019b6:	4621      	mov	r1, r4
 80019b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80019bc:	4621      	mov	r1, r4
 80019be:	028a      	lsls	r2, r1, #10
 80019c0:	4610      	mov	r0, r2
 80019c2:	4619      	mov	r1, r3
 80019c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019c6:	2200      	movs	r2, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	61fa      	str	r2, [r7, #28]
 80019cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019d0:	f7fe fc00 	bl	80001d4 <__aeabi_uldivmod>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4613      	mov	r3, r2
 80019da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80019dc:	4b0b      	ldr	r3, [pc, #44]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x200>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	0c1b      	lsrs	r3, r3, #16
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	3301      	adds	r3, #1
 80019e8:	005b      	lsls	r3, r3, #1
 80019ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80019ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80019ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019f6:	e002      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x204>)
 80019fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3750      	adds	r7, #80	; 0x50
 8001a04:	46bd      	mov	sp, r7
 8001a06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	00f42400 	.word	0x00f42400
 8001a14:	007a1200 	.word	0x007a1200

08001a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	20000000 	.word	0x20000000

08001a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a34:	f7ff fff0 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0a9b      	lsrs	r3, r3, #10
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	08002294 	.word	0x08002294

08001a58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001a5c:	f7ff ffdc 	bl	8001a18 <HAL_RCC_GetHCLKFreq>
 8001a60:	4602      	mov	r2, r0
 8001a62:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	0b5b      	lsrs	r3, r3, #13
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	4903      	ldr	r1, [pc, #12]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a6e:	5ccb      	ldrb	r3, [r1, r3]
 8001a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	40023800 	.word	0x40023800
 8001a7c:	08002294 	.word	0x08002294

08001a80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e03f      	b.n	8001b12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d106      	bne.n	8001aac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f7fe fe34 	bl	8000714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2224      	movs	r2, #36	; 0x24
 8001ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	68da      	ldr	r2, [r3, #12]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ac2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f929 	bl	8001d1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001ad8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	695a      	ldr	r2, [r3, #20]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ae8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68da      	ldr	r2, [r3, #12]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001af8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2220      	movs	r2, #32
 8001b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b08a      	sub	sp, #40	; 0x28
 8001b1e:	af02      	add	r7, sp, #8
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	603b      	str	r3, [r7, #0]
 8001b26:	4613      	mov	r3, r2
 8001b28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b20      	cmp	r3, #32
 8001b38:	d17c      	bne.n	8001c34 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_UART_Transmit+0x2c>
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e075      	b.n	8001c36 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d101      	bne.n	8001b58 <HAL_UART_Transmit+0x3e>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e06e      	b.n	8001c36 <HAL_UART_Transmit+0x11c>
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2221      	movs	r2, #33	; 0x21
 8001b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b6e:	f7ff f833 	bl	8000bd8 <HAL_GetTick>
 8001b72:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	88fa      	ldrh	r2, [r7, #6]
 8001b78:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	88fa      	ldrh	r2, [r7, #6]
 8001b7e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b88:	d108      	bne.n	8001b9c <HAL_UART_Transmit+0x82>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d104      	bne.n	8001b9c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b96:	68bb      	ldr	r3, [r7, #8]
 8001b98:	61bb      	str	r3, [r7, #24]
 8001b9a:	e003      	b.n	8001ba4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001b9c:	68bb      	ldr	r3, [r7, #8]
 8001b9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001bac:	e02a      	b.n	8001c04 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	9300      	str	r3, [sp, #0]
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	2180      	movs	r1, #128	; 0x80
 8001bb8:	68f8      	ldr	r0, [r7, #12]
 8001bba:	f000 f840 	bl	8001c3e <UART_WaitOnFlagUntilTimeout>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e036      	b.n	8001c36 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10b      	bne.n	8001be6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	881b      	ldrh	r3, [r3, #0]
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001bdc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	3302      	adds	r3, #2
 8001be2:	61bb      	str	r3, [r7, #24]
 8001be4:	e007      	b.n	8001bf6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	781a      	ldrb	r2, [r3, #0]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bf0:	69fb      	ldr	r3, [r7, #28]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1cf      	bne.n	8001bae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	9300      	str	r3, [sp, #0]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	2200      	movs	r2, #0
 8001c16:	2140      	movs	r1, #64	; 0x40
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f810 	bl	8001c3e <UART_WaitOnFlagUntilTimeout>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e006      	b.n	8001c36 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2220      	movs	r2, #32
 8001c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001c30:	2300      	movs	r3, #0
 8001c32:	e000      	b.n	8001c36 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001c34:	2302      	movs	r3, #2
  }
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b090      	sub	sp, #64	; 0x40
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	60f8      	str	r0, [r7, #12]
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	603b      	str	r3, [r7, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c4e:	e050      	b.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001c56:	d04c      	beq.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001c58:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d007      	beq.n	8001c6e <UART_WaitOnFlagUntilTimeout+0x30>
 8001c5e:	f7fe ffbb 	bl	8000bd8 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d241      	bcs.n	8001cf2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	330c      	adds	r3, #12
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	e853 3f00 	ldrex	r3, [r3]
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	330c      	adds	r3, #12
 8001c8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c8e:	637a      	str	r2, [r7, #52]	; 0x34
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c96:	e841 2300 	strex	r3, r2, [r1]
 8001c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1e5      	bne.n	8001c6e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	3314      	adds	r3, #20
 8001ca8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	e853 3f00 	ldrex	r3, [r3]
 8001cb0:	613b      	str	r3, [r7, #16]
   return(result);
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	f023 0301 	bic.w	r3, r3, #1
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	3314      	adds	r3, #20
 8001cc0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc2:	623a      	str	r2, [r7, #32]
 8001cc4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cc6:	69f9      	ldr	r1, [r7, #28]
 8001cc8:	6a3a      	ldr	r2, [r7, #32]
 8001cca:	e841 2300 	strex	r3, r2, [r1]
 8001cce:	61bb      	str	r3, [r7, #24]
   return(result);
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1e5      	bne.n	8001ca2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2220      	movs	r2, #32
 8001cda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e00f      	b.n	8001d12 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	79fb      	ldrb	r3, [r7, #7]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d09f      	beq.n	8001c50 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3740      	adds	r7, #64	; 0x40
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
	...

08001d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d20:	b0c0      	sub	sp, #256	; 0x100
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d38:	68d9      	ldr	r1, [r3, #12]
 8001d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	ea40 0301 	orr.w	r3, r0, r1
 8001d44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	431a      	orrs	r2, r3
 8001d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001d74:	f021 010c 	bic.w	r1, r1, #12
 8001d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001d82:	430b      	orrs	r3, r1
 8001d84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	695b      	ldr	r3, [r3, #20]
 8001d8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d96:	6999      	ldr	r1, [r3, #24]
 8001d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	ea40 0301 	orr.w	r3, r0, r1
 8001da2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	4b8f      	ldr	r3, [pc, #572]	; (8001fe8 <UART_SetConfig+0x2cc>)
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d005      	beq.n	8001dbc <UART_SetConfig+0xa0>
 8001db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b8d      	ldr	r3, [pc, #564]	; (8001fec <UART_SetConfig+0x2d0>)
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d104      	bne.n	8001dc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001dbc:	f7ff fe4c 	bl	8001a58 <HAL_RCC_GetPCLK2Freq>
 8001dc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001dc4:	e003      	b.n	8001dce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dc6:	f7ff fe33 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 8001dca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd2:	69db      	ldr	r3, [r3, #28]
 8001dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dd8:	f040 810c 	bne.w	8001ff4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001de0:	2200      	movs	r2, #0
 8001de2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001de6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001dea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001dee:	4622      	mov	r2, r4
 8001df0:	462b      	mov	r3, r5
 8001df2:	1891      	adds	r1, r2, r2
 8001df4:	65b9      	str	r1, [r7, #88]	; 0x58
 8001df6:	415b      	adcs	r3, r3
 8001df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dfe:	4621      	mov	r1, r4
 8001e00:	eb12 0801 	adds.w	r8, r2, r1
 8001e04:	4629      	mov	r1, r5
 8001e06:	eb43 0901 	adc.w	r9, r3, r1
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e1e:	4690      	mov	r8, r2
 8001e20:	4699      	mov	r9, r3
 8001e22:	4623      	mov	r3, r4
 8001e24:	eb18 0303 	adds.w	r3, r8, r3
 8001e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e2c:	462b      	mov	r3, r5
 8001e2e:	eb49 0303 	adc.w	r3, r9, r3
 8001e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001e46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	18db      	adds	r3, r3, r3
 8001e4e:	653b      	str	r3, [r7, #80]	; 0x50
 8001e50:	4613      	mov	r3, r2
 8001e52:	eb42 0303 	adc.w	r3, r2, r3
 8001e56:	657b      	str	r3, [r7, #84]	; 0x54
 8001e58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001e5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001e60:	f7fe f9b8 	bl	80001d4 <__aeabi_uldivmod>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	4b61      	ldr	r3, [pc, #388]	; (8001ff0 <UART_SetConfig+0x2d4>)
 8001e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8001e6e:	095b      	lsrs	r3, r3, #5
 8001e70:	011c      	lsls	r4, r3, #4
 8001e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e76:	2200      	movs	r2, #0
 8001e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001e80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001e84:	4642      	mov	r2, r8
 8001e86:	464b      	mov	r3, r9
 8001e88:	1891      	adds	r1, r2, r2
 8001e8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8001e8c:	415b      	adcs	r3, r3
 8001e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001e94:	4641      	mov	r1, r8
 8001e96:	eb12 0a01 	adds.w	sl, r2, r1
 8001e9a:	4649      	mov	r1, r9
 8001e9c:	eb43 0b01 	adc.w	fp, r3, r1
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001eac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eb4:	4692      	mov	sl, r2
 8001eb6:	469b      	mov	fp, r3
 8001eb8:	4643      	mov	r3, r8
 8001eba:	eb1a 0303 	adds.w	r3, sl, r3
 8001ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ec2:	464b      	mov	r3, r9
 8001ec4:	eb4b 0303 	adc.w	r3, fp, r3
 8001ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001ed8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001edc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	18db      	adds	r3, r3, r3
 8001ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	eb42 0303 	adc.w	r3, r2, r3
 8001eec:	647b      	str	r3, [r7, #68]	; 0x44
 8001eee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001ef2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001ef6:	f7fe f96d 	bl	80001d4 <__aeabi_uldivmod>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4611      	mov	r1, r2
 8001f00:	4b3b      	ldr	r3, [pc, #236]	; (8001ff0 <UART_SetConfig+0x2d4>)
 8001f02:	fba3 2301 	umull	r2, r3, r3, r1
 8001f06:	095b      	lsrs	r3, r3, #5
 8001f08:	2264      	movs	r2, #100	; 0x64
 8001f0a:	fb02 f303 	mul.w	r3, r2, r3
 8001f0e:	1acb      	subs	r3, r1, r3
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f16:	4b36      	ldr	r3, [pc, #216]	; (8001ff0 <UART_SetConfig+0x2d4>)
 8001f18:	fba3 2302 	umull	r2, r3, r3, r2
 8001f1c:	095b      	lsrs	r3, r3, #5
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f24:	441c      	add	r4, r3
 8001f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f38:	4642      	mov	r2, r8
 8001f3a:	464b      	mov	r3, r9
 8001f3c:	1891      	adds	r1, r2, r2
 8001f3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f40:	415b      	adcs	r3, r3
 8001f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001f48:	4641      	mov	r1, r8
 8001f4a:	1851      	adds	r1, r2, r1
 8001f4c:	6339      	str	r1, [r7, #48]	; 0x30
 8001f4e:	4649      	mov	r1, r9
 8001f50:	414b      	adcs	r3, r1
 8001f52:	637b      	str	r3, [r7, #52]	; 0x34
 8001f54:	f04f 0200 	mov.w	r2, #0
 8001f58:	f04f 0300 	mov.w	r3, #0
 8001f5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001f60:	4659      	mov	r1, fp
 8001f62:	00cb      	lsls	r3, r1, #3
 8001f64:	4651      	mov	r1, sl
 8001f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f6a:	4651      	mov	r1, sl
 8001f6c:	00ca      	lsls	r2, r1, #3
 8001f6e:	4610      	mov	r0, r2
 8001f70:	4619      	mov	r1, r3
 8001f72:	4603      	mov	r3, r0
 8001f74:	4642      	mov	r2, r8
 8001f76:	189b      	adds	r3, r3, r2
 8001f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001f7c:	464b      	mov	r3, r9
 8001f7e:	460a      	mov	r2, r1
 8001f80:	eb42 0303 	adc.w	r3, r2, r3
 8001f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001f94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	18db      	adds	r3, r3, r3
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	eb42 0303 	adc.w	r3, r2, r3
 8001fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001fae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001fb2:	f7fe f90f 	bl	80001d4 <__aeabi_uldivmod>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	460b      	mov	r3, r1
 8001fba:	4b0d      	ldr	r3, [pc, #52]	; (8001ff0 <UART_SetConfig+0x2d4>)
 8001fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8001fc0:	095b      	lsrs	r3, r3, #5
 8001fc2:	2164      	movs	r1, #100	; 0x64
 8001fc4:	fb01 f303 	mul.w	r3, r1, r3
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	3332      	adds	r3, #50	; 0x32
 8001fce:	4a08      	ldr	r2, [pc, #32]	; (8001ff0 <UART_SetConfig+0x2d4>)
 8001fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd4:	095b      	lsrs	r3, r3, #5
 8001fd6:	f003 0207 	and.w	r2, r3, #7
 8001fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4422      	add	r2, r4
 8001fe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fe4:	e106      	b.n	80021f4 <UART_SetConfig+0x4d8>
 8001fe6:	bf00      	nop
 8001fe8:	40011000 	.word	0x40011000
 8001fec:	40011400 	.word	0x40011400
 8001ff0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001ffe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002002:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002006:	4642      	mov	r2, r8
 8002008:	464b      	mov	r3, r9
 800200a:	1891      	adds	r1, r2, r2
 800200c:	6239      	str	r1, [r7, #32]
 800200e:	415b      	adcs	r3, r3
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
 8002012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002016:	4641      	mov	r1, r8
 8002018:	1854      	adds	r4, r2, r1
 800201a:	4649      	mov	r1, r9
 800201c:	eb43 0501 	adc.w	r5, r3, r1
 8002020:	f04f 0200 	mov.w	r2, #0
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	00eb      	lsls	r3, r5, #3
 800202a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800202e:	00e2      	lsls	r2, r4, #3
 8002030:	4614      	mov	r4, r2
 8002032:	461d      	mov	r5, r3
 8002034:	4643      	mov	r3, r8
 8002036:	18e3      	adds	r3, r4, r3
 8002038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800203c:	464b      	mov	r3, r9
 800203e:	eb45 0303 	adc.w	r3, r5, r3
 8002042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002052:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002056:	f04f 0200 	mov.w	r2, #0
 800205a:	f04f 0300 	mov.w	r3, #0
 800205e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002062:	4629      	mov	r1, r5
 8002064:	008b      	lsls	r3, r1, #2
 8002066:	4621      	mov	r1, r4
 8002068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800206c:	4621      	mov	r1, r4
 800206e:	008a      	lsls	r2, r1, #2
 8002070:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002074:	f7fe f8ae 	bl	80001d4 <__aeabi_uldivmod>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4b60      	ldr	r3, [pc, #384]	; (8002200 <UART_SetConfig+0x4e4>)
 800207e:	fba3 2302 	umull	r2, r3, r3, r2
 8002082:	095b      	lsrs	r3, r3, #5
 8002084:	011c      	lsls	r4, r3, #4
 8002086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800208a:	2200      	movs	r2, #0
 800208c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002090:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002094:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002098:	4642      	mov	r2, r8
 800209a:	464b      	mov	r3, r9
 800209c:	1891      	adds	r1, r2, r2
 800209e:	61b9      	str	r1, [r7, #24]
 80020a0:	415b      	adcs	r3, r3
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020a8:	4641      	mov	r1, r8
 80020aa:	1851      	adds	r1, r2, r1
 80020ac:	6139      	str	r1, [r7, #16]
 80020ae:	4649      	mov	r1, r9
 80020b0:	414b      	adcs	r3, r1
 80020b2:	617b      	str	r3, [r7, #20]
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020c0:	4659      	mov	r1, fp
 80020c2:	00cb      	lsls	r3, r1, #3
 80020c4:	4651      	mov	r1, sl
 80020c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ca:	4651      	mov	r1, sl
 80020cc:	00ca      	lsls	r2, r1, #3
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	4603      	mov	r3, r0
 80020d4:	4642      	mov	r2, r8
 80020d6:	189b      	adds	r3, r3, r2
 80020d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80020dc:	464b      	mov	r3, r9
 80020de:	460a      	mov	r2, r1
 80020e0:	eb42 0303 	adc.w	r3, r2, r3
 80020e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80020e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80020f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	f04f 0300 	mov.w	r3, #0
 80020fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002100:	4649      	mov	r1, r9
 8002102:	008b      	lsls	r3, r1, #2
 8002104:	4641      	mov	r1, r8
 8002106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800210a:	4641      	mov	r1, r8
 800210c:	008a      	lsls	r2, r1, #2
 800210e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002112:	f7fe f85f 	bl	80001d4 <__aeabi_uldivmod>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4611      	mov	r1, r2
 800211c:	4b38      	ldr	r3, [pc, #224]	; (8002200 <UART_SetConfig+0x4e4>)
 800211e:	fba3 2301 	umull	r2, r3, r3, r1
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2264      	movs	r2, #100	; 0x64
 8002126:	fb02 f303 	mul.w	r3, r2, r3
 800212a:	1acb      	subs	r3, r1, r3
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	3332      	adds	r3, #50	; 0x32
 8002130:	4a33      	ldr	r2, [pc, #204]	; (8002200 <UART_SetConfig+0x4e4>)
 8002132:	fba2 2303 	umull	r2, r3, r2, r3
 8002136:	095b      	lsrs	r3, r3, #5
 8002138:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800213c:	441c      	add	r4, r3
 800213e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002142:	2200      	movs	r2, #0
 8002144:	673b      	str	r3, [r7, #112]	; 0x70
 8002146:	677a      	str	r2, [r7, #116]	; 0x74
 8002148:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800214c:	4642      	mov	r2, r8
 800214e:	464b      	mov	r3, r9
 8002150:	1891      	adds	r1, r2, r2
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	415b      	adcs	r3, r3
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800215c:	4641      	mov	r1, r8
 800215e:	1851      	adds	r1, r2, r1
 8002160:	6039      	str	r1, [r7, #0]
 8002162:	4649      	mov	r1, r9
 8002164:	414b      	adcs	r3, r1
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002174:	4659      	mov	r1, fp
 8002176:	00cb      	lsls	r3, r1, #3
 8002178:	4651      	mov	r1, sl
 800217a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800217e:	4651      	mov	r1, sl
 8002180:	00ca      	lsls	r2, r1, #3
 8002182:	4610      	mov	r0, r2
 8002184:	4619      	mov	r1, r3
 8002186:	4603      	mov	r3, r0
 8002188:	4642      	mov	r2, r8
 800218a:	189b      	adds	r3, r3, r2
 800218c:	66bb      	str	r3, [r7, #104]	; 0x68
 800218e:	464b      	mov	r3, r9
 8002190:	460a      	mov	r2, r1
 8002192:	eb42 0303 	adc.w	r3, r2, r3
 8002196:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	663b      	str	r3, [r7, #96]	; 0x60
 80021a2:	667a      	str	r2, [r7, #100]	; 0x64
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	f04f 0300 	mov.w	r3, #0
 80021ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80021b0:	4649      	mov	r1, r9
 80021b2:	008b      	lsls	r3, r1, #2
 80021b4:	4641      	mov	r1, r8
 80021b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021ba:	4641      	mov	r1, r8
 80021bc:	008a      	lsls	r2, r1, #2
 80021be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80021c2:	f7fe f807 	bl	80001d4 <__aeabi_uldivmod>
 80021c6:	4602      	mov	r2, r0
 80021c8:	460b      	mov	r3, r1
 80021ca:	4b0d      	ldr	r3, [pc, #52]	; (8002200 <UART_SetConfig+0x4e4>)
 80021cc:	fba3 1302 	umull	r1, r3, r3, r2
 80021d0:	095b      	lsrs	r3, r3, #5
 80021d2:	2164      	movs	r1, #100	; 0x64
 80021d4:	fb01 f303 	mul.w	r3, r1, r3
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	3332      	adds	r3, #50	; 0x32
 80021de:	4a08      	ldr	r2, [pc, #32]	; (8002200 <UART_SetConfig+0x4e4>)
 80021e0:	fba2 2303 	umull	r2, r3, r2, r3
 80021e4:	095b      	lsrs	r3, r3, #5
 80021e6:	f003 020f 	and.w	r2, r3, #15
 80021ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4422      	add	r2, r4
 80021f2:	609a      	str	r2, [r3, #8]
}
 80021f4:	bf00      	nop
 80021f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002200:	51eb851f 	.word	0x51eb851f

08002204 <memset>:
 8002204:	4402      	add	r2, r0
 8002206:	4603      	mov	r3, r0
 8002208:	4293      	cmp	r3, r2
 800220a:	d100      	bne.n	800220e <memset+0xa>
 800220c:	4770      	bx	lr
 800220e:	f803 1b01 	strb.w	r1, [r3], #1
 8002212:	e7f9      	b.n	8002208 <memset+0x4>

08002214 <__libc_init_array>:
 8002214:	b570      	push	{r4, r5, r6, lr}
 8002216:	4d0d      	ldr	r5, [pc, #52]	; (800224c <__libc_init_array+0x38>)
 8002218:	4c0d      	ldr	r4, [pc, #52]	; (8002250 <__libc_init_array+0x3c>)
 800221a:	1b64      	subs	r4, r4, r5
 800221c:	10a4      	asrs	r4, r4, #2
 800221e:	2600      	movs	r6, #0
 8002220:	42a6      	cmp	r6, r4
 8002222:	d109      	bne.n	8002238 <__libc_init_array+0x24>
 8002224:	4d0b      	ldr	r5, [pc, #44]	; (8002254 <__libc_init_array+0x40>)
 8002226:	4c0c      	ldr	r4, [pc, #48]	; (8002258 <__libc_init_array+0x44>)
 8002228:	f000 f818 	bl	800225c <_init>
 800222c:	1b64      	subs	r4, r4, r5
 800222e:	10a4      	asrs	r4, r4, #2
 8002230:	2600      	movs	r6, #0
 8002232:	42a6      	cmp	r6, r4
 8002234:	d105      	bne.n	8002242 <__libc_init_array+0x2e>
 8002236:	bd70      	pop	{r4, r5, r6, pc}
 8002238:	f855 3b04 	ldr.w	r3, [r5], #4
 800223c:	4798      	blx	r3
 800223e:	3601      	adds	r6, #1
 8002240:	e7ee      	b.n	8002220 <__libc_init_array+0xc>
 8002242:	f855 3b04 	ldr.w	r3, [r5], #4
 8002246:	4798      	blx	r3
 8002248:	3601      	adds	r6, #1
 800224a:	e7f2      	b.n	8002232 <__libc_init_array+0x1e>
 800224c:	080022a4 	.word	0x080022a4
 8002250:	080022a4 	.word	0x080022a4
 8002254:	080022a4 	.word	0x080022a4
 8002258:	080022a8 	.word	0x080022a8

0800225c <_init>:
 800225c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800225e:	bf00      	nop
 8002260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002262:	bc08      	pop	{r3}
 8002264:	469e      	mov	lr, r3
 8002266:	4770      	bx	lr

08002268 <_fini>:
 8002268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800226a:	bf00      	nop
 800226c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800226e:	bc08      	pop	{r3}
 8002270:	469e      	mov	lr, r3
 8002272:	4770      	bx	lr
